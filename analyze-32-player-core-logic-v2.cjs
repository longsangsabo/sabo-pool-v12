const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const serviceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceKey) {
  console.error('Missing Supabase credentials in .env file');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, serviceKey);

/**
 * Ph√¢n t√≠ch core logic c·ªßa 32 player double elimination tournament
 * C·∫•u tr√∫c chu·∫©n:
 * - 32 players chia th√†nh 2 groups: A (16 players) v√† B (16 players)
 * - M·ªói group c√≥ Winners Bracket v√† Losers Bracket
 * - Winners Bracket: 15 matches ƒë·ªÉ t·ª´ 16 players ‚Üí 1 winner
 * - Losers Bracket: s·ªë matches kh√°c nhau t√πy theo c·∫•u tr√∫c
 * - Group Finals: 2 matches (1 cho m·ªói group)
 * - Cross-Bracket Finals: 3 matches ƒë·ªÉ quy·∫øt ƒë·ªãnh champion
 */

async function analyzeCoreLogic() {
  console.log('üîç PH√ÇN T√çCH CORE LOGIC 32 PLAYER TOURNAMENT');
  console.log('='.repeat(60));

  try {
    // L·∫•y t·∫•t c·∫£ matches
    const { data: matches, error } = await supabase
      .from('sabo32_matches')
      .select('*')
      .order('sabo_match_id');

    if (error) {
      console.error('Error fetching matches:', error);
      return;
    }

    console.log(`üìä T·ªïng s·ªë matches: ${matches.length}`);
    console.log();

    // Ph√¢n t√≠ch theo bracket_type v√† group
    const analysis = {};
    
    matches.forEach(match => {
      const key = `${match.group_id}_${match.bracket_type}`;
      if (!analysis[key]) {
        analysis[key] = [];
      }
      analysis[key].push(match);
    });

    // Hi·ªÉn th·ªã ph√¢n t√≠ch chi ti·∫øt
    console.log('üìã PH√ÇN T√çCH CHI TI·∫æT THEO BRACKET:');
    console.log('-'.repeat(50));

    Object.keys(analysis).sort().forEach(key => {
      const matches = analysis[key];
      const [group, bracket] = key.split('_');
      console.log(`${group} ${bracket}: ${matches.length} matches`);
      
      // Hi·ªÉn th·ªã rounds
      const rounds = {};
      matches.forEach(match => {
        if (!rounds[match.round]) {
          rounds[match.round] = 0;
        }
        rounds[match.round]++;
      });
      
      Object.keys(rounds).sort((a, b) => parseInt(a) - parseInt(b)).forEach(round => {
        console.log(`  Round ${round}: ${rounds[round]} matches`);
      });
      console.log();
    });

    // T√≠nh to√°n l√Ω thuy·∫øt cho 32 player tournament
    console.log('üßÆ T√çNH TO√ÅN LY THUY·∫æT:');
    console.log('-'.repeat(30));
    console.log('Winners Bracket (16 players ‚Üí 1 winner):');
    console.log('  Round 1: 8 matches (16‚Üí8)');
    console.log('  Round 2: 4 matches (8‚Üí4)'); 
    console.log('  Round 3: 2 matches (4‚Üí2)');
    console.log('  Round 4: 1 match (2‚Üí1)');
    console.log('  Total Winners: 15 matches');
    console.log();
    
    console.log('Losers Bracket (15 losers t·ª´ Winners + reset t·ª´ Winners Final):');
    console.log('  C·∫ßn t√≠nh to√°n c·ª• th·ªÉ d·ª±a tr√™n c·∫•u tr√∫c double elimination');
    console.log();

    // Ki·ªÉm tra t√≠nh h·ª£p l·ªá
    console.log('‚úÖ KI·ªÇM TRA T√çNH H·ª¢P L·ªÜ:');
    console.log('-'.repeat(30));
    
    const groupA = matches.filter(m => m.group_id === 'A');
    const groupB = matches.filter(m => m.group_id === 'B');
    const crossBracket = matches.filter(m => m.group_id === 'Cross-Bracket');
    
    console.log(`Group A: ${groupA.length} matches`);
    console.log(`Group B: ${groupB.length} matches`);
    console.log(`Cross-Bracket: ${crossBracket.length} matches`);
    console.log();

    // Ph√¢n t√≠ch Winners vs Losers trong m·ªói group
    const groupAWinners = groupA.filter(m => m.bracket_type === 'Winners');
    const groupALosers = groupA.filter(m => m.bracket_type === 'Losers');
    const groupAFinal = groupA.filter(m => m.bracket_type === 'Final');
    
    const groupBWinners = groupB.filter(m => m.bracket_type === 'Winners');
    const groupBLosers = groupB.filter(m => m.bracket_type === 'Losers');
    const groupBFinal = groupB.filter(m => m.bracket_type === 'Final');

    console.log('üìä PH√ÇN T√çCH CHI TI·∫æT T·ª™NG GROUP:');
    console.log('-'.repeat(40));
    console.log(`Group A Winners: ${groupAWinners.length} matches`);
    console.log(`Group A Losers: ${groupALosers.length} matches`);
    console.log(`Group A Final: ${groupAFinal.length} matches`);
    console.log(`‚û°Ô∏è  Total Group A: ${groupA.length} matches`);
    console.log();
    
    console.log(`Group B Winners: ${groupBWinners.length} matches`);
    console.log(`Group B Losers: ${groupBLosers.length} matches`);
    console.log(`Group B Final: ${groupBFinal.length} matches`);
    console.log(`‚û°Ô∏è  Total Group B: ${groupB.length} matches`);
    console.log();

    // T√≠nh to√°n chu·∫©n cho 16 players double elimination
    console.log('üéØ CHU·∫®N CHO 16 PLAYERS DOUBLE ELIMINATION:');
    console.log('-'.repeat(45));
    console.log('Winners Bracket: 15 matches (16‚Üí8‚Üí4‚Üí2‚Üí1)');
    console.log('Losers Bracket: 11 matches');
    console.log('  - Round 1: 4 matches (8 losers t·ª´ Winners R1)');
    console.log('  - Round 2: 2 matches (4 winners R1 + 4 losers t·ª´ Winners R2)');
    console.log('  - Round 3: 2 matches (2 winners R2 + 2 losers t·ª´ Winners R3)');
    console.log('  - Round 4: 1 match (1 winner R3 + 1 loser t·ª´ Winners R4)');
    console.log('  - Round 5: 1 match (Losers Final)');
    console.log('  - Round 6: 1 match (n·∫øu Losers champion th·∫Øng Winners champion)');
    console.log('Group Final: 1 match (Winners champion vs Losers champion)');
    console.log('Total per group: 27 matches (15+11+1)');
    console.log();
    console.log('‚ùå NH∆ØNG TH·ª∞C T·∫æ Group A c√≥:', groupA.length, 'matches');
    console.log('‚ùå NH∆ØNG TH·ª∞C T·∫æ Group B c√≥:', groupB.length, 'matches');
    
    if (groupA.length !== 26 || groupB.length !== 26) {
      console.log();
      console.log('üö® C√ì V·∫§N ƒê·ªÄ V·ªöI S·ªê L∆Ø·ª¢NG MATCHES!');
      console.log('Chu·∫©n: m·ªói group c·∫ßn 26 matches (15 Winners + 10 Losers + 1 Final)');
      console.log('Kh√¥ng ph·∫£i 27 matches nh∆∞ hi·ªán t·∫°i!');
    }

  } catch (error) {
    console.error('Error in analysis:', error);
  }
}

analyzeCoreLogic();
