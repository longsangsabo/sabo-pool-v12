require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// S·ª≠ d·ª•ng service key ƒë·ªÉ c√≥ quy·ªÅn ƒë·∫ßy ƒë·ªß
const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_SERVICE_ROLE_KEY
);

async function analyzeGroupFinalsIssue() {
  console.log('üîç PH√ÇN T√çCH V·∫§N ƒê·ªÄ GROUP FINALS SABO-32');
  
  try {
    // T√¨m tournament SABO-32 ƒëang active
    const { data: tournaments, error: tourError } = await supabase
      .from('tournaments')
      .select('*')
      .eq('tournament_type', 'SABO_32')
      .eq('status', 'ongoing')
      .order('created_at', { ascending: false })
      .limit(1);

    if (tourError) {
      console.error('‚ùå L·ªói tournaments:', tourError);
      return;
    }

    if (!tournaments?.length) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y SABO-32 tournament ƒëang active');
      
      // Ki·ªÉm tra t·∫•t c·∫£ tournaments
      const { data: allTournaments } = await supabase
        .from('tournaments')
        .select('*')
        .eq('tournament_type', 'SABO_32')
        .order('created_at', { ascending: false })
        .limit(5);
      
      console.log('\nüìã 5 SABO-32 tournaments g·∫ßn nh·∫•t:');
      allTournaments?.forEach(t => {
        console.log(`  ${t.id}: ${t.name} - Status: ${t.status} - Created: ${t.created_at}`);
      });
      return;
    }

    const tournament = tournaments[0];
    console.log(`üéØ Tournament: ${tournament.name} (ID: ${tournament.id})`);
    console.log(`üìÖ Status: ${tournament.status}`);

    // L·∫•y t·∫•t c·∫£ matches
    const { data: matches, error: matchError } = await supabase
      .from('sabo32_matches')
      .select('*')
      .eq('tournament_id', tournament.id)
      .order(['bracket_type', 'round_number', 'match_number']);

    if (matchError) {
      console.error('‚ùå L·ªói matches:', matchError);
      return;
    }

    if (!matches?.length) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y matches cho tournament n√†y');
      return;
    }

    console.log(`üìä T·ªïng s·ªë matches: ${matches.length}`);

    // Ph√¢n t√≠ch theo bracket type
    const bracketTypes = [...new Set(matches.map(m => m.bracket_type))];
    console.log(`\nüè∑Ô∏è C√°c bracket types: ${bracketTypes.join(', ')}`);

    // Ph√¢n t√≠ch chi ti·∫øt Group A
    console.log('\nüÖ∞Ô∏è === GROUP A DETAILED ANALYSIS ===');
    await analyzeGroupDetailed(matches, 'A', tournament.id);

    // Ph√¢n t√≠ch chi ti·∫øt Group B  
    console.log('\nüÖ±Ô∏è === GROUP B DETAILED ANALYSIS ===');
    await analyzeGroupDetailed(matches, 'B', tournament.id);

  } catch (error) {
    console.error('‚ùå L·ªói t·ªïng qu√°t:', error);
  }
}

async function analyzeGroupDetailed(allMatches, group, tournamentId) {
  const groupPrefix = `GROUP_${group}`;
  
  // L·ªçc matches theo group
  const groupMatches = allMatches.filter(m => m.bracket_type.startsWith(groupPrefix));
  console.log(`üìä Group ${group} c√≥ ${groupMatches.length} matches`);

  // Ph√¢n lo·∫°i matches
  const winners = groupMatches.filter(m => m.bracket_type === `${groupPrefix}_WINNERS`);
  const losersA = groupMatches.filter(m => m.bracket_type === `${groupPrefix}_LOSERS_A`);
  const losersB = groupMatches.filter(m => m.bracket_type === `${groupPrefix}_LOSERS_B`);
  const finals = groupMatches.filter(m => m.bracket_type === `${groupPrefix}_FINAL`);

  console.log(`\nüìà Winners Bracket: ${winners.length} matches`);
  winners.forEach((m, i) => {
    console.log(`  ${i+1}. ${m.sabo_match_id} (Round ${m.round_number}): ${m.status}`);
    console.log(`     ${m.player1_id || 'TBD'} vs ${m.player2_id || 'TBD'} ‚Üí Winner: ${m.winner_id || 'TBD'}`);
  });

  console.log(`\nüìâ Losers A: ${losersA.length} matches`);
  losersA.forEach((m, i) => {
    console.log(`  ${i+1}. ${m.sabo_match_id} (Round ${m.round_number}): ${m.status}`);
    console.log(`     ${m.player1_id || 'TBD'} vs ${m.player2_id || 'TBD'} ‚Üí Winner: ${m.winner_id || 'TBD'}`);
  });

  console.log(`\nüìâ Losers B: ${losersB.length} matches`);
  losersB.forEach((m, i) => {
    console.log(`  ${i+1}. ${m.sabo_match_id} (Round ${m.round_number}): ${m.status}`);
    console.log(`     ${m.player1_id || 'TBD'} vs ${m.player2_id || 'TBD'} ‚Üí Winner: ${m.winner_id || 'TBD'}`);
  });

  console.log(`\nüèÜ Group Finals: ${finals.length} matches`);
  finals.forEach((m, i) => {
    console.log(`  ${i+1}. ${m.sabo_match_id}: ${m.status}`);
    console.log(`     ${m.player1_id || 'TBD'} vs ${m.player2_id || 'TBD'} ‚Üí Winner: ${m.winner_id || 'TBD'}`);
  });

  // Ki·ªÉm tra ƒëi·ªÅu ki·ªán advancement
  console.log(`\nüîç KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN ADVANCEMENT GROUP ${group}:`);
  
  // T√¨m nh·ªØng matches cu·ªëi c√πng ƒë√£ completed
  const completedWinners = winners.filter(m => m.status === 'completed' && m.winner_id);
  const completedLosersA = losersA.filter(m => m.status === 'completed' && m.winner_id);
  const completedLosersB = losersB.filter(m => m.status === 'completed' && m.winner_id);

  console.log(`‚úÖ Completed Winners: ${completedWinners.length}/${winners.length}`);
  console.log(`‚úÖ Completed Losers A: ${completedLosersA.length}/${losersA.length}`);
  console.log(`‚úÖ Completed Losers B: ${completedLosersB.length}/${losersB.length}`);

  // Logic advancement: C·∫ßn 2 t·ª´ Winners, 1 t·ª´ Losers A, 1 t·ª´ Losers B
  if (completedWinners.length >= 2 && completedLosersA.length >= 1 && completedLosersB.length >= 1) {
    console.log('üéØ ƒê·ª¶ ƒêI·ªÄU KI·ªÜN ADVANCE V√ÄO GROUP FINAL!');
    
    // T√¨m 2 ng∆∞·ªùi cu·ªëi c√πng t·ª´ Winners bracket (highest round)
    const maxWinnersRound = Math.max(...completedWinners.map(m => m.round_number));
    const winnersFinalists = completedWinners.filter(m => m.round_number === maxWinnersRound);
    
    // 1 ng∆∞·ªùi t·ª´ Losers A (highest round)
    const maxLosersARound = Math.max(...completedLosersA.map(m => m.round_number));
    const losersAWinner = completedLosersA.filter(m => m.round_number === maxLosersARound);
    
    // 1 ng∆∞·ªùi t·ª´ Losers B (highest round)
    const maxLosersBRound = Math.max(...completedLosersB.map(m => m.round_number));
    const losersBWinner = completedLosersB.filter(m => m.round_number === maxLosersBRound);

    console.log('\nüèÜ 4 NG∆Ø·ªúI C·∫¶N ADVANCE V√ÄO GROUP FINAL:');
    console.log(`  Winners Bracket (${winnersFinalists.length}):`);
    winnersFinalists.forEach(m => console.log(`    - ${m.winner_id} (t·ª´ ${m.sabo_match_id})`));
    
    console.log(`  Losers A Winner (${losersAWinner.length}):`);
    losersAWinner.forEach(m => console.log(`    - ${m.winner_id} (t·ª´ ${m.sabo_match_id})`));
    
    console.log(`  Losers B Winner (${losersBWinner.length}):`);
    losersBWinner.forEach(m => console.log(`    - ${m.winner_id} (t·ª´ ${m.sabo_match_id})`));

    // Ki·ªÉm tra xem Group Final ƒë√£ c√≥ players ch∆∞a
    if (finals.length > 0) {
      const groupFinal = finals[0];
      if (!groupFinal.player1_id && !groupFinal.player2_id) {
        console.log('\n‚ö†Ô∏è V·∫§N ƒê·ªÄ: Group Final ch∆∞a c√≥ players ƒë∆∞·ª£c assign!');
        console.log('üîß C·∫¶N CH·∫†Y LOGIC ADVANCEMENT ƒê·ªÇ POPULATE GROUP FINAL');
        
        // ƒê·ªÅ xu·∫•t gi·∫£i ph√°p
        await suggestFix(group, winnersFinalists, losersAWinner, losersBWinner, groupFinal, tournamentId);
      } else {
        console.log('‚úÖ Group Final ƒë√£ c√≥ players ƒë∆∞·ª£c assign');
      }
    } else {
      console.log('‚ö†Ô∏è V·∫§N ƒê·ªÄ: Kh√¥ng t√¨m th·∫•y Group Final match!');
    }
  } else {
    console.log('‚ùå CH∆ØA ƒê·ª¶ ƒêI·ªÄU KI·ªÜN ADVANCE V√ÄO GROUP FINAL');
    console.log(`   C·∫ßn: 2 t·ª´ Winners (c√≥ ${completedWinners.length}), 1 t·ª´ Losers A (c√≥ ${completedLosersA.length}), 1 t·ª´ Losers B (c√≥ ${completedLosersB.length})`);
  }
}

async function suggestFix(group, winnersFinalists, losersAWinner, losersBWinner, groupFinal, tournamentId) {
  console.log(`\nüîß ƒê·ªÄ XU·∫§T GI·∫¢I PH√ÅP CHO GROUP ${group}:`);
  
  const allQualifiers = [
    ...winnersFinalists.map(m => m.winner_id),
    ...losersAWinner.map(m => m.winner_id),
    ...losersBWinner.map(m => m.winner_id)
  ];

  console.log(`üìù SQL ƒë·ªÉ fix Group ${group} Final:`);
  console.log(`UPDATE sabo32_matches 
SET 
  player1_id = '${allQualifiers[0] || 'PLAYER_1_ID'}',
  player2_id = '${allQualifiers[1] || 'PLAYER_2_ID'}',
  player3_id = '${allQualifiers[2] || 'PLAYER_3_ID'}', 
  player4_id = '${allQualifiers[3] || 'PLAYER_4_ID'}',
  status = 'pending'
WHERE 
  tournament_id = '${tournamentId}' 
  AND bracket_type = 'GROUP_${group}_FINAL'
  AND sabo_match_id = '${groupFinal.sabo_match_id}';`);
}

// Ch·∫°y ph√¢n t√≠ch
analyzeGroupFinalsIssue().catch(console.error);
