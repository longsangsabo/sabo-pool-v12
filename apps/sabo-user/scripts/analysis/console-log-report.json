{
  "debug": [
    {
      "file": "src/components/ChallengeDebugPanel.tsx",
      "line": 18,
      "content": "console.log('🔄 [DebugPanel] Manual refresh triggered by user');",
      "context": "16: \n17:   const handleManualRefresh = async () => {\n18:     console.log('🔄 [DebugPanel] Manual refresh triggered by user');\n19:     await onRefresh();\n20:   };"
    },
    {
      "file": "src/components/challenges/ScoreSubmissionCard.tsx",
      "line": 105,
      "content": "console.log('🎯 ScoreSubmissionCard Debug:', {",
      "context": "103: \n104:   // Debug log\n105:   console.log('🎯 ScoreSubmissionCard Debug:', {\n106:     challengeId: challenge.id,\n107:     challenger_score: challenge.challenger_score,"
    },
    {
      "file": "src/components/club/ClubMobileNavigation.tsx",
      "line": 200,
      "content": "console.log('Verification count:', count); // Debug log",
      "context": "198:         .eq('status', 'pending');\n199:       if (error) throw error;\n200:       console.log('Verification count:', count); // Debug log\n201:       return count || 0;\n202:     },"
    },
    {
      "file": "src/components/debug/DebugTournamentComponent.tsx",
      "line": 9,
      "content": "console.log('=== SABO32 Tournament Debug ===');",
      "context": "7: \n8:   useEffect(() => {\n9:     console.log('=== SABO32 Tournament Debug ===');\n10:     console.log('Tournament ID:', tournamentId);\n11:     console.log('Loading:', isLoading);"
    },
    {
      "file": "src/components/debug/HandicapDebugger.tsx",
      "line": 25,
      "content": "console.log('🎯 Handicap Debug Result:', result);",
      "context": "23:     const result = calculateSaboHandicapPrecise(challengerRank, opponentRank, betAmount);\n24:     setResult(result);\n25:     console.log('🎯 Handicap Debug Result:', result);\n26:   };\n27: "
    },
    {
      "file": "src/components/debug/PrizeFlowDebugger.tsx",
      "line": 93,
      "content": "console.log('🏆 [Debugger] Received prizes:', prizes.length);",
      "context": "91:               isPreviewMode={true}\n92:               onPrizesChange={(prizes) => {\n93:                 console.log('🏆 [Debugger] Received prizes:', prizes.length);\n94:                 setReceivedPrizes(prizes);\n95:                 addTestResult(`📨 Received ${prizes.length} prizes from TournamentPrizesManager`);"
    },
    {
      "file": "src/components/layouts/RoleBasedLayout.tsx",
      "line": 26,
      "content": "console.log('[RoleBasedLayout] Debug:', {",
      "context": "24:     path.startsWith('/club-management') || /\\/clubs\\/.+\\/owner$/.test(path);\n25: \n26:   console.log('[RoleBasedLayout] Debug:', {\n27:     user: user?.id,\n28:     isClubOwner,"
    },
    {
      "file": "src/components/legacy/CombinedSPALeaderboard.tsx",
      "line": 116,
      "content": "console.log('🔍 Legacy entries debug:', {",
      "context": "114:       }));\n115: \n116:       console.log('🔍 Legacy entries debug:', {\n117:         totalEntries: legacyEntries.length,\n118:         userInfo: user ? {"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 139,
      "content": "console.log('🧹 Force refresh: Clearing all cached state...');",
      "context": "137:       \n138:       if (forceRefresh) {\n139:         console.log('🧹 Force refresh: Clearing all cached state...');\n140:         \n141:         // Clear any localStorage cache that might exist"
    },
    {
      "file": "src/components/ranking/SPAPointsCard.tsx",
      "line": 160,
      "content": "console.log('🧹 [SPAPointsCard] Cleaning up subscription');",
      "context": "158: \n159:     return () => {\n160:       console.log('🧹 [SPAPointsCard] Cleaning up subscription');\n161:       subscription.unsubscribe();\n162:     };"
    },
    {
      "file": "src/components/tournament/ForceStartTournamentButton.tsx",
      "line": 40,
      "content": "console.log('🔥 ForceStartTournamentButton Debug:', {",
      "context": "38: \n39:   // Debug log to see why button doesn't show\n40:   console.log('🔥 ForceStartTournamentButton Debug:', {\n41:     tournamentId,\n42:     tournamentName,"
    },
    {
      "file": "src/components/tournament/TournamentBracket.tsx",
      "line": 46,
      "content": "console.log('🎯 Tournament Debug:', {",
      "context": "44:   }\n45: \n46:   console.log('🎯 Tournament Debug:', {\n47:     id: tournament.id,\n48:     name: tournament.name,"
    },
    {
      "file": "src/components/tournament/templates/DoubleEliminationTemplate.tsx",
      "line": 63,
      "content": "console.log('🔍 [DoubleEliminationTemplate] Debug info:', {",
      "context": "61:   // Load tournament data - either completed or in-progress with bracket data\n62:   useEffect(() => {\n63:     console.log('🔍 [DoubleEliminationTemplate] Debug info:', {\n64:       tournamentId,\n65:       isCompletedTemplate,"
    },
    {
      "file": "src/components/tournament/templates/SingleEliminationTemplate.tsx",
      "line": 334,
      "content": "console.log('🔍 Debug match score submission:', {",
      "context": "332:     try {\n333:       // Debug logging\n334:       console.log('🔍 Debug match score submission:', {\n335:         matchId,\n336:         scores,"
    },
    {
      "file": "src/contexts/TournamentGlobalContext.tsx",
      "line": 307,
      "content": "console.log('🔍 [TournamentGlobal] Debug filtering:', {",
      "context": "305:     : tournaments;\n306: \n307:   console.log('🔍 [TournamentGlobal] Debug filtering:', {\n308:     clubId,\n309:     totalTournaments: tournaments.length,"
    },
    {
      "file": "src/contexts/TournamentStateContext.tsx",
      "line": 85,
      "content": "console.log('🏆 [TournamentStateContext] Debug:', {",
      "context": "83:   );\n84: \n85:   console.log('🏆 [TournamentStateContext] Debug:', {\n86:     clubId,\n87:     totalTournaments: tournaments.length,"
    },
    {
      "file": "src/hooks/useAuthStateMonitor.ts",
      "line": 21,
      "content": "console.log('🧹 Auto-cleaning due to multiple conflicts');",
      "context": "19:       // Auto-cleanup if too many conflicts\n20:       if (conflicts.length > 3) {\n21:         console.log('🧹 Auto-cleaning due to multiple conflicts');\n22:         cleanupAuthState();\n23:       }"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 108,
      "content": "console.log(`🧹 Cleaned up ${expiredChallenges.length} expired challenge(s)`);",
      "context": "106:           // Show user-friendly notification for cleanup\n107:           if (expiredChallenges.length > 0) {\n108:             console.log(`🧹 Cleaned up ${expiredChallenges.length} expired challenge(s)`);\n109:             // Optional: Show toast notification to user\n110:             // toast.info(`Đã ẩn ${expiredChallenges.length} thách đấu hết hạn`);"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 461,
      "content": "console.log('🔍 SPA Validation Debug:', {",
      "context": "459: \n460:     // Debug: Log current user profile and SPA\n461:     console.log('🔍 SPA Validation Debug:', {\n462:       currentUserProfile,\n463:       userSpa,"
    },
    {
      "file": "src/hooks/useTournamentResults.ts",
      "line": 41,
      "content": "console.log('🔍 Raw results data:', resultsData[0]); // Debug log",
      "context": "39:       }\n40: \n41:       console.log('🔍 Raw results data:', resultsData[0]); // Debug log\n42: \n43:       // Get prize details for this tournament"
    },
    {
      "file": "src/lib/rankUtils.ts",
      "line": 99,
      "content": "console.log(`[RankDebug] ${context}:`, {",
      "context": "97:  */\n98: export const debugRankData = (context: string, data: any): void => {\n99:   console.log(`[RankDebug] ${context}:`, {\n100:     verified_rank: data?.verified_rank,\n101:     current_rank: data?.current_rank,"
    },
    {
      "file": "src/pages/ClubManagementPage.tsx",
      "line": 46,
      "content": "console.log('🏢 [ClubManagementPage] Debug:', {",
      "context": "44: \n45:   // Debug current club info\n46:   console.log('🏢 [ClubManagementPage] Debug:', {\n47:     user: user?.id,\n48:     isClubOwner,"
    },
    {
      "file": "src/pages/Profile.tsx",
      "line": 9,
      "content": "console.log('🔍 [Profile] Debug info:', {",
      "context": "7: \n8:   // Debug logging\n9:   console.log('🔍 [Profile] Debug info:', {\n10:     isMobile,\n11:     screenWidth: window.innerWidth,"
    },
    {
      "file": "src/pages/StandardizedChallengesPage.tsx",
      "line": 9,
      "content": "console.log('🔍 [StandardizedChallengesPage] Debug info:', {",
      "context": "7: \n8:   // Debug logging\n9:   console.log('🔍 [StandardizedChallengesPage] Debug info:', {\n10:     isMobile,\n11:     screenWidth: window.innerWidth,"
    },
    {
      "file": "src/pages/StandardizedProfilePage.tsx",
      "line": 9,
      "content": "console.log('🔍 [StandardizedProfilePage] Debug info:', {",
      "context": "7: \n8:   // Debug logging\n9:   console.log('🔍 [StandardizedProfilePage] Debug info:', {\n10:     isMobile,\n11:     screenWidth: window.innerWidth,"
    },
    {
      "file": "src/pages/StandardizedTournamentsPage.tsx",
      "line": 9,
      "content": "console.log('🔍 [StandardizedTournamentsPage] Debug info:', {",
      "context": "7: \n8:   // Debug logging\n9:   console.log('🔍 [StandardizedTournamentsPage] Debug info:', {\n10:     isMobile,\n11:     screenWidth: window.innerWidth,"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 168,
      "content": "console.log('🎯 ThreeStepScoreWorkflow Debug:', {",
      "context": "166:         };\n167:       default:\n168:         console.log('🎯 ThreeStepScoreWorkflow Debug:', {\n169:           challengeId: challenge.id,\n170:           userId: user?.id,"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 92,
      "content": "console.error('💥 Debug error:', error);",
      "context": "90: \n91:     } catch (error) {\n92:       console.error('💥 Debug error:', error);\n93:       return { error };\n94:     }"
    },
    {
      "file": "src/tournaments/sabo/components/SABOMatchCard.tsx",
      "line": 79,
      "content": "console.log('🎯 SABOMatchCard Debug:', {",
      "context": "77: \n78:   // Debug logging\n79:   console.log('🎯 SABOMatchCard Debug:', {\n80:     matchId: match.id,\n81:     isClubOwner,"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 29,
      "content": "console.log('🧹 Cleared localStorage key:', key);",
      "context": "27:     authKeys.forEach(key => {\n28:       localStorage.removeItem(key);\n29:       console.log('🧹 Cleared localStorage key:', key);\n30:     });\n31: "
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 34,
      "content": "console.log('🧹 Cleared sessionStorage');",
      "context": "32:     // Clear session storage\n33:     sessionStorage.clear();\n34:     console.log('🧹 Cleared sessionStorage');\n35: \n36:     // Force sign out on Supabase client"
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 8,
      "content": "console.log('🧹 Cleaning up auth state...');",
      "context": "6:  */\n7: export const cleanupAuthState = () => {\n8:   console.log('🧹 Cleaning up auth state...');\n9: \n10:   // Clear localStorage"
    },
    {
      "file": "src/utils/challengeCleanup.ts",
      "line": 21,
      "content": "console.log('🧹 Starting manual cleanup of expired challenges...');",
      "context": "19: export const manualCleanupExpiredChallenges = async (): Promise<CleanupResult> => {\n20:   try {\n21:     console.log('🧹 Starting manual cleanup of expired challenges...');\n22:     \n23:     const { data: result, error } = await supabase.rpc('enhanced_cleanup_expired_challenges');"
    },
    {
      "file": "src/utils/debugTournamentRefresh.ts",
      "line": 5,
      "content": "console.log('🔧 Debug: Force refreshing tournament UI...');",
      "context": "3: \n4: export const debugTournamentRefresh = () => {\n5:   console.log('🔧 Debug: Force refreshing tournament UI...');\n6: \n7:   // Method 1: Clear React Query cache"
    },
    {
      "file": "src/utils/tournamentOptimization.ts",
      "line": 53,
      "content": "console.log('🧹 Cleaned up tournament data for:', tournamentId);",
      "context": "51:     .forEach(key => operationTimestamps.delete(key));\n52: \n53:   console.log('🧹 Cleaned up tournament data for:', tournamentId);\n54: };\n55: "
    }
  ],
  "errors": [
    {
      "file": "src/components/AvatarManager.tsx",
      "line": 90,
      "content": "console.error('Error uploading avatar:', error);",
      "context": "88:       setShowAvatarModal(false);\n89:     } catch (error) {\n90:       console.error('Error uploading avatar:', error);\n91:       toast.error('Có lỗi xảy ra khi tải ảnh lên');\n92:     } finally {"
    },
    {
      "file": "src/components/AvatarManager.tsx",
      "line": 103,
      "content": "console.error('Error updating avatar:', error);",
      "context": "101:       setShowAvatarModal(false);\n102:     } catch (error) {\n103:       console.error('Error updating avatar:', error);\n104:       toast.error('Có lỗi xảy ra');\n105:     }"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 94,
      "content": "console.error('❌ Error updating challenger SPA:', challengerError);",
      "context": "92: \n93:         if (challengerError) {\n94:           console.error('❌ Error updating challenger SPA:', challengerError);\n95:           return false;\n96:         }"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 107,
      "content": "console.error('❌ Error updating opponent SPA:', opponentError);",
      "context": "105: \n106:         if (opponentError) {\n107:           console.error('❌ Error updating opponent SPA:', opponentError);\n108:           return false;\n109:         }"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 124,
      "content": "console.error('❌ Error updating opponent SPA:', opponentError);",
      "context": "122: \n123:         if (opponentError) {\n124:           console.error('❌ Error updating opponent SPA:', opponentError);\n125:           return false;\n126:         }"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 137,
      "content": "console.error('❌ Error updating challenger SPA:', challengerError);",
      "context": "135: \n136:         if (challengerError) {\n137:           console.error('❌ Error updating challenger SPA:', challengerError);\n138:           return false;\n139:         }"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 147,
      "content": "console.error('❌ Exception in SPA transfer:', error);",
      "context": "145: \n146:     } catch (error) {\n147:       console.error('❌ Exception in SPA transfer:', error);\n148:       return false;\n149:     }"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 177,
      "content": "console.error('❌ Club approval error:', error);",
      "context": "175: \n176:       if (error) {\n177:         console.error('❌ Club approval error:', error);\n178:         toast.error(`Lỗi: ${error.message}`);\n179:         return;"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 201,
      "content": "console.error('❌ SPA transfer failed');",
      "context": "199:           if (!spaSuccess) {\n200:             toast.error('Lỗi xử lý điểm SPA');\n201:             console.error('❌ SPA transfer failed');\n202:           } else {\n203:             toast.success('✅ Đã xử lý điểm SPA thành công!');"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 235,
      "content": "console.warn('Notification error:', notificationError);",
      "context": "233:             \n234:           if (notificationError) {\n235:             console.warn('Notification error:', notificationError);\n236:           } else {\n237:             console.log('✅ Notifications sent to players');"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 260,
      "content": "console.error('❌ Exception in club approval:', error);",
      "context": "258: \n259:     } catch (error) {\n260:       console.error('❌ Exception in club approval:', error);\n261:       toast.error('Có lỗi xảy ra khi xử lý phê duyệt');\n262:     } finally {"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 288,
      "content": "console.error('❌ Error fetching challenges:', error);",
      "context": "286: \n287:       if (error) {\n288:         console.error('❌ Error fetching challenges:', error);\n289:         return;\n290:       }"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 296,
      "content": "console.error('❌ Exception fetching challenges:', error);",
      "context": "294:       setChallenges(data || []);\n295:     } catch (error) {\n296:       console.error('❌ Exception fetching challenges:', error);\n297:     } finally {\n298:       setLoading(false);"
    },
    {
      "file": "src/components/ClubMemberManagement.tsx",
      "line": 111,
      "content": "console.error('Club members fetch error:', err);",
      "context": "109:         err instanceof Error ? err.message : 'Failed to fetch club members';\n110:       setError(errorMessage);\n111:       console.error('Club members fetch error:', err);\n112:     } finally {\n113:       setLoading(false);"
    },
    {
      "file": "src/components/ClubNotifications.tsx",
      "line": 71,
      "content": "console.error('Error fetching notifications:', error);",
      "context": "69:       setNotifications(transformedNotifications);\n70:     } catch (error) {\n71:       console.error('Error fetching notifications:', error);\n72:       toast.error('Lỗi khi tải thông báo');\n73:     } finally {"
    },
    {
      "file": "src/components/ClubNotifications.tsx",
      "line": 91,
      "content": "console.error('Error marking as read:', error);",
      "context": "89:       );\n90:     } catch (error) {\n91:       console.error('Error marking as read:', error);\n92:     }\n93:   };"
    },
    {
      "file": "src/components/ClubNotifications.tsx",
      "line": 111,
      "content": "console.error('Error marking all as read:', error);",
      "context": "109:       toast.success('Đã đánh dấu tất cả là đã đọc');\n110:     } catch (error) {\n111:       console.error('Error marking all as read:', error);\n112:       toast.error('Lỗi khi đánh dấu đã đọc');\n113:     }"
    },
    {
      "file": "src/components/ClubProfileForm.tsx",
      "line": 134,
      "content": "console.error('Error updating club profile:', error);",
      "context": "132:       \n133:     } catch (error) {\n134:       console.error('Error updating club profile:', error);\n135:       toast.error('Không thể cập nhật thông tin câu lạc bộ');\n136:     } finally {"
    },
    {
      "file": "src/components/ClubProfileFormFixed.tsx",
      "line": 122,
      "content": "console.error('Error updating club profile:', error);",
      "context": "120:       \n121:     } catch (error) {\n122:       console.error('Error updating club profile:', error);\n123:       toast.error('Không thể cập nhật thông tin câu lạc bộ');\n124:     } finally {"
    },
    {
      "file": "src/components/ClubProfileTab.tsx",
      "line": 151,
      "content": "console.error('Error fetching provinces:', error);",
      "context": "149:       setProvinces(mockProvinces);\n150:     } catch (error) {\n151:       console.error('Error fetching provinces:', error);\n152:     }\n153:   };"
    },
    {
      "file": "src/components/ClubProfileTab.tsx",
      "line": 167,
      "content": "console.error('Error fetching districts:', error);",
      "context": "165:       setDistricts(mockDistricts);\n166:     } catch (error) {\n167:       console.error('Error fetching districts:', error);\n168:     }\n169:   };"
    },
    {
      "file": "src/components/ClubProfileTab.tsx",
      "line": 183,
      "content": "console.error('Error fetching wards:', error);",
      "context": "181:       setWards(mockWards);\n182:     } catch (error) {\n183:       console.error('Error fetching wards:', error);\n184:     }\n185:   };"
    },
    {
      "file": "src/components/ClubProfileTab.tsx",
      "line": 196,
      "content": "console.error('Error fetching clubs:', error);",
      "context": "194:       setClubs(data?.map(club => ({ ...club, name: club.club_name })) || []);\n195:     } catch (error) {\n196:       console.error('Error fetching clubs:', error);\n197:     }\n198:   };"
    },
    {
      "file": "src/components/ClubProfileTab.tsx",
      "line": 209,
      "content": "console.error('Error checking club registration:', error);",
      "context": "207: \n208:       if (error) {\n209:         console.error('Error checking club registration:', error);\n210:         return;\n211:       }"
    },
    {
      "file": "src/components/ClubProfileTab.tsx",
      "line": 216,
      "content": "console.error('Error checking club registration:', error);",
      "context": "214:       setClubData(null);\n215:     } catch (error) {\n216:       console.error('Error checking club registration:', error);\n217:     }\n218:   };"
    },
    {
      "file": "src/components/ClubProfileTab.tsx",
      "line": 282,
      "content": "console.error('Database error:', error);",
      "context": "280: \n281:       if (error) {\n282:         console.error('Database error:', error);\n283:         throw error;\n284:       }"
    },
    {
      "file": "src/components/ClubProfileTab.tsx",
      "line": 299,
      "content": "console.error('Error registering club:', error);",
      "context": "297:       onUpdate();\n298:     } catch (error: any) {\n299:       console.error('Error registering club:', error);\n300:       toast.error(\n301:         'Có lỗi xảy ra khi đăng ký CLB: ' + (error.message || 'Unknown error')"
    },
    {
      "file": "src/components/ClubRegistrationForm.tsx",
      "line": 101,
      "content": "console.error('Error fetching club profile:', error);",
      "context": "99:       }\n100:     } catch (error) {\n101:       console.error('Error fetching club profile:', error);\n102:       setClubProfile(null);\n103:     } finally {"
    },
    {
      "file": "src/components/ClubRegistrationForm.tsx",
      "line": 158,
      "content": "console.error('Error registering club:', error);",
      "context": "156:       await fetchClubProfile(); // Refresh data\n157:     } catch (error: any) {\n158:       console.error('Error registering club:', error);\n159:       toast.error(\n160:         'Có lỗi xảy ra khi đăng ký CLB: ' + (error.message || 'Unknown error')"
    },
    {
      "file": "src/components/ClubRegistrationMultiStepForm.tsx",
      "line": 142,
      "content": "console.error('Error fetching registration:', error);",
      "context": "140: \n141:       if (error && error.code !== 'PGRST116') {\n142:         console.error('Error fetching registration:', error);\n143:         return;\n144:       }"
    },
    {
      "file": "src/components/ClubRegistrationMultiStepForm.tsx",
      "line": 177,
      "content": "console.error('Error:', error);",
      "context": "175:       }\n176:     } catch (error) {\n177:       console.error('Error:', error);\n178:     } finally {\n179:       setLoading(false);"
    },
    {
      "file": "src/components/ClubRegistrationMultiStepForm.tsx",
      "line": 203,
      "content": "console.error('Error saving draft:', error);",
      "context": "201:       fetchExistingRegistration();\n202:     } catch (error: any) {\n203:       console.error('Error saving draft:', error);\n204:       toast.error('Lỗi khi lưu: ' + error.message);\n205:     } finally {"
    },
    {
      "file": "src/components/ClubRegistrationMultiStepForm.tsx",
      "line": 245,
      "content": "console.error('Error submitting registration:', error);",
      "context": "243:       fetchExistingRegistration();\n244:     } catch (error: any) {\n245:       console.error('Error submitting registration:', error);\n246:       toast.error('Lỗi khi gửi đăng ký: ' + error.message);\n247:     } finally {"
    },
    {
      "file": "src/components/ClubRegistrationMultiStepForm.tsx",
      "line": 269,
      "content": "console.error('Error resetting to edit:', error);",
      "context": "267:       fetchExistingRegistration();\n268:     } catch (error: any) {\n269:       console.error('Error resetting to edit:', error);\n270:       toast.error('Lỗi khi chuyển về chế độ chỉnh sửa: ' + error.message);\n271:     } finally {"
    },
    {
      "file": "src/components/ClubRegistrationMultiStepForm.tsx",
      "line": 424,
      "content": "console.error('Error uploading photos:', error);",
      "context": "422:       toast.success(`Đã tải lên ${uploadedUrls.length} ảnh thành công!`);\n423:     } catch (error: any) {\n424:       console.error('Error uploading photos:', error);\n425:       toast.error('Lỗi khi tải ảnh: ' + error.message);\n426:     } finally {"
    },
    {
      "file": "src/components/ClubRegistrationMultiStepForm.tsx",
      "line": 468,
      "content": "console.error('Error uploading business license:', error);",
      "context": "466:       toast.success('Đã tải lên ảnh giấy phép thành công!');\n467:     } catch (error: any) {\n468:       console.error('Error uploading business license:', error);\n469:       toast.error('Lỗi khi tải ảnh: ' + error.message);\n470:     } finally {"
    },
    {
      "file": "src/components/ClubSettings.tsx",
      "line": 82,
      "content": "console.error('Error fetching club settings:', error);",
      "context": "80:       }\n81:     } catch (error) {\n82:       console.error('Error fetching club settings:', error);\n83:       toast.error('Lỗi khi tải cài đặt CLB');\n84:     } finally {"
    },
    {
      "file": "src/components/ClubSettings.tsx",
      "line": 110,
      "content": "console.error('Error saving club settings:', error);",
      "context": "108:       toast.success('Đã lưu cài đặt CLB');\n109:     } catch (error) {\n110:       console.error('Error saving club settings:', error);\n111:       toast.error('Lỗi khi lưu cài đặt');\n112:     } finally {"
    },
    {
      "file": "src/components/ClubStatsDashboard.tsx",
      "line": 104,
      "content": "console.error('Error fetching club info:', error);",
      "context": "102:       ]);\n103:     } catch (error) {\n104:       console.error('Error fetching club info:', error);\n105:     } finally {\n106:       setLoading(false);"
    },
    {
      "file": "src/components/ClubStatsDashboard.tsx",
      "line": 141,
      "content": "console.error('Error fetching club stats:', error);",
      "context": "139:       });\n140:     } catch (error) {\n141:       console.error('Error fetching club stats:', error);\n142:     }\n143:   };"
    },
    {
      "file": "src/components/ClubStatsDashboard.tsx",
      "line": 160,
      "content": "console.error('Error calculating real-time stats:', error);",
      "context": "158:       };\n159:     } catch (error) {\n160:       console.error('Error calculating real-time stats:', error);\n161:       return {\n162:         active_members: 0,"
    },
    {
      "file": "src/components/ClubStatsDashboard.tsx",
      "line": 175,
      "content": "console.error('Error fetching club members:', error);",
      "context": "173:       setMembers([]);\n174:     } catch (error) {\n175:       console.error('Error fetching club members:', error);\n176:       setMembers([]);\n177:     }"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 98,
      "content": "console.error('💥 Error loading club data:', error);",
      "context": "96:         }\n97:       } catch (error) {\n98:         console.error('💥 Error loading club data:', error);\n99:       } finally {\n100:         setLoading(false);"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 155,
      "content": "console.error('❌ Club query error:', error);",
      "context": "153: \n154:         if (error) {\n155:           console.error('❌ Club query error:', error);\n156:           return null;\n157:         }"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 162,
      "content": "console.error('💥 Error fetching club ID:', error);",
      "context": "160:         return data?.id || null;\n161:       } catch (error) {\n162:         console.error('💥 Error fetching club ID:', error);\n163:         return null;\n164:       }"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 217,
      "content": "console.error('💥 Error loading tournaments:', error);",
      "context": "215:         }\n216:       } catch (error) {\n217:         console.error('💥 Error loading tournaments:', error);\n218:         toast.error('Không thể tải danh sách giải đấu');\n219:       }"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 720,
      "content": "console.error('❌ Error loading registrations:', registrationsError);",
      "context": "718: \n719:       if (registrationsError) {\n720:         console.error('❌ Error loading registrations:', registrationsError);\n721:         throw registrationsError;\n722:       }"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 742,
      "content": "console.error('❌ Error loading profiles:', profilesError);",
      "context": "740: \n741:         if (profilesError) {\n742:           console.error('❌ Error loading profiles:', profilesError);\n743:         } else {\n744:           profilesData = profiles || [];"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 757,
      "content": "console.error('❌ Error loading registrations:', error);",
      "context": "755:       setRegistrations(combinedData);\n756:     } catch (error: any) {\n757:       console.error('❌ Error loading registrations:', error);\n758:       toast.error(`Lỗi khi tải danh sách thành viên: ${error.message}`);\n759:     } finally {"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 789,
      "content": "console.error('Error confirming payment:', error);",
      "context": "787:       loadRegistrations();\n788:     } catch (error) {\n789:       console.error('Error confirming payment:', error);\n790:       toast.error('Lỗi xác nhận thanh toán');\n791:     }"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 804,
      "content": "console.error('Error cancelling registration:', error);",
      "context": "802:       loadRegistrations();\n803:     } catch (error) {\n804:       console.error('Error cancelling registration:', error);\n805:       toast.error('Lỗi hủy đăng ký');\n806:     }"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 1032,
      "content": "console.error('Error awarding points:', pointsError);",
      "context": "1030:               // Mock points award implementation\n1031:             } catch (pointsError) {\n1032:               console.error('Error awarding points:', pointsError);\n1033:             }\n1034:           }"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 1053,
      "content": "console.error('Error closing tournament:', error);",
      "context": "1051:       setBracketData(null);\n1052:     } catch (error) {\n1053:       console.error('Error closing tournament:', error);\n1054:       toast.error('Có lỗi xảy ra khi đóng giải đấu');\n1055:     }"
    },
    {
      "file": "src/components/CreatePostModal.tsx",
      "line": 48,
      "content": "console.error('Error creating post:', error);",
      "context": "46:       onClose();\n47:     } catch (error) {\n48:       console.error('Error creating post:', error);\n49:     } finally {\n50:       setIsLoading(false);"
    },
    {
      "file": "src/components/CurrentSeasonCard.tsx",
      "line": 63,
      "content": "console.error('Error loading current season data:', err);",
      "context": "61:       setComparison(seasonComparison);\n62:     } catch (err) {\n63:       console.error('Error loading current season data:', err);\n64:     }\n65:   };"
    },
    {
      "file": "src/components/DailyChallengeStatus.tsx",
      "line": 26,
      "content": "console.error('Error fetching daily challenge stats:', error);",
      "context": "24: \n25:       if (error && error.code !== 'PGRST116') {\n26:         console.error('Error fetching daily challenge stats:', error);\n27:         return 0;\n28:       }"
    },
    {
      "file": "src/components/DatabaseHealthCheck.tsx",
      "line": 60,
      "content": "console.error('Health check failed:', error);",
      "context": "58:       setLastCheck(new Date());\n59:     } catch (error) {\n60:       console.error('Health check failed:', error);\n61:       checks.push({\n62:         name: 'System Health',"
    },
    {
      "file": "src/components/DatabaseSetupWizard.tsx",
      "line": 44,
      "content": "console.error('Database check failed:', error);",
      "context": "42:       setSelectedOption(recommendation);\n43:     } catch (error) {\n44:       console.error('Database check failed:', error);\n45:     } finally {\n46:       setLoading(false);"
    },
    {
      "file": "src/components/DepositModal.tsx",
      "line": 73,
      "content": "console.error('Error creating deposit:', error);",
      "context": "71:       }\n72:     } catch (error) {\n73:       console.error('Error creating deposit:', error);\n74:       toast.error('Có lỗi xảy ra khi tạo giao dịch');\n75:     } finally {"
    },
    {
      "file": "src/components/EnhancedChallengesList.tsx",
      "line": 41,
      "content": "console.error('Error responding to challenge:', error);",
      "context": "39:       setSelectedChallenge(null);\n40:     } catch (error) {\n41:       console.error('Error responding to challenge:', error);\n42:     }\n43:   };"
    },
    {
      "file": "src/components/EnhancedChallengesList.tsx",
      "line": 57,
      "content": "console.error('Error completing challenge:', error);",
      "context": "55:       });\n56:     } catch (error) {\n57:       console.error('Error completing challenge:', error);\n58:     }\n59:   };"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "line": 26,
      "content": "console.error('ErrorBoundary caught an error:', error, errorInfo);",
      "context": "24: \n25:   public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n26:     console.error('ErrorBoundary caught an error:', error, errorInfo);\n27:   }\n28: "
    },
    {
      "file": "src/components/EvidenceUpload.tsx",
      "line": 114,
      "content": "console.error('Upload error:', error);",
      "context": "112:         return null;\n113:       } catch (error) {\n114:         console.error('Upload error:', error);\n115:         toast.error(`Lỗi upload file ${file.name}`);\n116:         return null;"
    },
    {
      "file": "src/components/FloatingUserChat.tsx",
      "line": 82,
      "content": "console.error('Error initializing chat session:', error);",
      "context": "80:       await loadChatMessages(session.id);\n81:     } catch (error) {\n82:       console.error('Error initializing chat session:', error);\n83:     }\n84:   };"
    },
    {
      "file": "src/components/FloatingUserChat.tsx",
      "line": 108,
      "content": "console.error('Error loading messages:', error);",
      "context": "106:       setMessages(typedMessages);\n107:     } catch (error) {\n108:       console.error('Error loading messages:', error);\n109:     }\n110:   };"
    },
    {
      "file": "src/components/FloatingUserChat.tsx",
      "line": 146,
      "content": "console.error('Error sending message:', error);",
      "context": "144:       await loadChatMessages(currentSession.id);\n145:     } catch (error) {\n146:       console.error('Error sending message:', error);\n147:       // Remove temp message and show error\n148:       setMessages(prev => prev.filter(m => m.id !== tempUserMessage.id));"
    },
    {
      "file": "src/components/GoogleMapsPlacesAutocomplete.tsx",
      "line": 85,
      "content": "console.error('Error searching places:', error);",
      "context": "83:       }\n84:     } catch (error) {\n85:       console.error('Error searching places:', error);\n86:       toast.error('Lỗi kết nối mạng. Vui lòng thử lại.');\n87:     } finally {"
    },
    {
      "file": "src/components/GoogleMapsPlacesAutocomplete.tsx",
      "line": 120,
      "content": "console.error('Error getting place details:', error);",
      "context": "118:       }\n119:     } catch (error) {\n120:       console.error('Error getting place details:', error);\n121:       toast.error('Lỗi khi lấy thông tin địa điểm');\n122:     } finally {"
    },
    {
      "file": "src/components/MatchCompletionModal.tsx",
      "line": 87,
      "content": "console.error('Error updating match:', error);",
      "context": "85:       }, 500);\n86:     } catch (error) {\n87:       console.error('Error updating match:', error);\n88:       toast.error('Lỗi khi cập nhật kết quả');\n89:     } finally {"
    },
    {
      "file": "src/components/MyChallengesTab.tsx",
      "line": 167,
      "content": "console.error('Error fetching challenges/matches:', error);",
      "context": "165:       setPastMatches(pastWithProfiles as Match[]);\n166:     } catch (error) {\n167:       console.error('Error fetching challenges/matches:', error);\n168:     } finally {\n169:       setLoading(false);"
    },
    {
      "file": "src/components/MyChallengesTab.tsx",
      "line": 202,
      "content": "console.error('Error responding to challenge:', error);",
      "context": "200:       fetchChallengesAndMatches();\n201:     } catch (error) {\n202:       console.error('Error responding to challenge:', error);\n203:       toast.error('Lỗi khi phản hồi thách đấu');\n204:     }"
    },
    {
      "file": "src/components/Navigation.tsx",
      "line": 94,
      "content": "console.error('Error checking user status:', error);",
      "context": "92:         }\n93:       } catch (error) {\n94:         console.error('Error checking user status:', error);\n95:         setIsClubOwner(false);\n96:         setIsAdmin(false);"
    },
    {
      "file": "src/components/PWAInstallPrompt.tsx",
      "line": 75,
      "content": "console.error('Install failed:', error);",
      "context": "73:       setShowPrompt(false);\n74:     } catch (error) {\n75:       console.error('Install failed:', error);\n76:       toast.error('Cài đặt thất bại');\n77:     }"
    },
    {
      "file": "src/components/PaymentButton.tsx",
      "line": 57,
      "content": "console.error('Payment error:', error);",
      "context": "55:       }\n56:     } catch (error) {\n57:       console.error('Payment error:', error);\n58:       toast.error('Có lỗi xảy ra khi tạo thanh toán');\n59:     } finally {"
    },
    {
      "file": "src/components/PenaltyAppealModal.tsx",
      "line": 66,
      "content": "console.error('Error submitting appeal:', error);",
      "context": "64:       onClose();\n65:     } catch (error: any) {\n66:       console.error('Error submitting appeal:', error);\n67:       toast.error('Lỗi khi gửi kháng cáo: ' + error.message);\n68:     } finally {"
    },
    {
      "file": "src/components/PenaltyManagement.tsx",
      "line": 65,
      "content": "console.error('Error fetching penalties:', error);",
      "context": "63:       setPenalties((data as any) || []);\n64:     } catch (error) {\n65:       console.error('Error fetching penalties:', error);\n66:     } finally {\n67:       setLoading(false);"
    },
    {
      "file": "src/components/PlayerStatsComponent.tsx",
      "line": 66,
      "content": "console.error('Error fetching stats:', statsError);",
      "context": "64: \n65:       if (statsError && statsError.code !== 'PGRST116') {\n66:         console.error('Error fetching stats:', statsError);\n67:       }\n68: "
    },
    {
      "file": "src/components/PlayerStatsComponent.tsx",
      "line": 114,
      "content": "console.error('Error fetching player stats:', error);",
      "context": "112:       setFavoriteOpponents(opponentsWithProfiles as any);\n113:     } catch (error) {\n114:       console.error('Error fetching player stats:', error);\n115:     } finally {\n116:       setLoading(false);"
    },
    {
      "file": "src/components/PostMatchRatingModal.tsx",
      "line": 78,
      "content": "console.error('Error submitting rating:', error);",
      "context": "76:       onClose();\n77:     } catch (error: any) {\n78:       console.error('Error submitting rating:', error);\n79:       toast.error('Lỗi khi gửi đánh giá: ' + error.message);\n80:     } finally {"
    },
    {
      "file": "src/components/ProfileHeader.tsx",
      "line": 99,
      "content": "console.error('Error fetching stats:', error);",
      "context": "97: \n98:       if (error && error.code !== 'PGRST116') {\n99:         console.error('Error fetching stats:', error);\n100:         return;\n101:       }"
    },
    {
      "file": "src/components/ProfileHeader.tsx",
      "line": 116,
      "content": "console.error('Error fetching player stats:', error);",
      "context": "114:       });\n115:     } catch (error) {\n116:       console.error('Error fetching player stats:', error);\n117:     } finally {\n118:       setLoading(false);"
    },
    {
      "file": "src/components/ProfileHeader.tsx",
      "line": 138,
      "content": "console.error('Error fetching verification status:', error);",
      "context": "136:       setVerificationStatus({ status: 'none' });\n137:     } catch (error) {\n138:       console.error('Error fetching verification status:', error);\n139:     }\n140:   };"
    },
    {
      "file": "src/components/ProfileHeader.tsx",
      "line": 153,
      "content": "console.error('Error fetching club profile:', error);",
      "context": "151: \n152:       if (error && error.code !== 'PGRST116') {\n153:         console.error('Error fetching club profile:', error);\n154:         setHasClubProfile(false);\n155:         return;"
    },
    {
      "file": "src/components/ProfileHeader.tsx",
      "line": 160,
      "content": "console.error('Error fetching club profile:', error);",
      "context": "158:       setHasClubProfile(!!data);\n159:     } catch (error) {\n160:       console.error('Error fetching club profile:', error);\n161:       setHasClubProfile(false);\n162:     } finally {"
    },
    {
      "file": "src/components/ProvinceDistrictWardSelector.tsx",
      "line": 94,
      "content": "console.error('Error fetching provinces:', err);",
      "context": "92:     } catch (err) {\n93:       setError(err instanceof Error ? err.message : 'Lỗi không xác định');\n94:       console.error('Error fetching provinces:', err);\n95:     } finally {\n96:       setLoadingProvinces(false);"
    },
    {
      "file": "src/components/ProvinceDistrictWardSelector.tsx",
      "line": 116,
      "content": "console.error('Error fetching districts:', err);",
      "context": "114:     } catch (err) {\n115:       setError(err instanceof Error ? err.message : 'Lỗi không xác định');\n116:       console.error('Error fetching districts:', err);\n117:       setDistricts([]);\n118:     } finally {"
    },
    {
      "file": "src/components/ProvinceDistrictWardSelector.tsx",
      "line": 139,
      "content": "console.error('Error fetching wards:', err);",
      "context": "137:     } catch (err) {\n138:       setError(err instanceof Error ? err.message : 'Lỗi không xác định');\n139:       console.error('Error fetching wards:', err);\n140:       setWards([]);\n141:     } finally {"
    },
    {
      "file": "src/components/PublicProfilePage.tsx",
      "line": 78,
      "content": "console.error('Error fetching profile:', error);",
      "context": "76:       }\n77:     } catch (error) {\n78:       console.error('Error fetching profile:', error);\n79:       toast.error('Không thể tải hồ sơ');\n80:     } finally {"
    },
    {
      "file": "src/components/QRCodeScanner.tsx",
      "line": 58,
      "content": "console.error('Error accessing camera:', err);",
      "context": "56:       }\n57:     } catch (err) {\n58:       console.error('Error accessing camera:', err);\n59:       toast({\n60:         title: 'Lỗi camera',"
    },
    {
      "file": "src/components/RankHistory.tsx",
      "line": 54,
      "content": "console.error('Error fetching rank history:', error);",
      "context": "52:       setHistory(mockHistory);\n53:     } catch (error) {\n54:       console.error('Error fetching rank history:', error);\n55:     } finally {\n56:       setLoading(false);"
    },
    {
      "file": "src/components/RankRegistration.tsx",
      "line": 71,
      "content": "console.error('Error fetching approved clubs:', clubError);",
      "context": "69: \n70:       if (clubError) {\n71:         console.error('Error fetching approved clubs:', clubError);\n72:         \n73:         // Fallback: get all club profiles"
    },
    {
      "file": "src/components/RankRegistration.tsx",
      "line": 81,
      "content": "console.error('Error fetching all club profiles:', allError);",
      "context": "79: \n80:         if (allError) {\n81:           console.error('Error fetching all club profiles:', allError);\n82:           throw allError;\n83:         }"
    },
    {
      "file": "src/components/RankRegistration.tsx",
      "line": 92,
      "content": "console.error('Error fetching clubs:', error);",
      "context": "90:       }\n91:     } catch (error) {\n92:       console.error('Error fetching clubs:', error);\n93:       toast({\n94:         title: 'Lỗi',"
    },
    {
      "file": "src/components/RankRegistration.tsx",
      "line": 148,
      "content": "console.error('Error uploading files:', error);",
      "context": "146:       });\n147:     } catch (error) {\n148:       console.error('Error uploading files:', error);\n149:       toast({\n150:         title: 'Lỗi',"
    },
    {
      "file": "src/components/RankRegistration.tsx",
      "line": 196,
      "content": "console.error('Error submitting rank request:', error);",
      "context": "194: \n195:       if (error) {\n196:         console.error('Error submitting rank request:', error);\n197:         throw error;\n198:       }"
    },
    {
      "file": "src/components/RankRegistration.tsx",
      "line": 211,
      "content": "console.error('Error submitting rank request:', error);",
      "context": "209:       setEvidenceFiles([]);\n210:     } catch (error) {\n211:       console.error('Error submitting rank request:', error);\n212:       toast({\n213:         title: 'Lỗi',"
    },
    {
      "file": "src/components/RankRegistrationClean.tsx",
      "line": 71,
      "content": "console.error('Error fetching approved clubs:', clubError);",
      "context": "69: \n70:       if (clubError) {\n71:         console.error('Error fetching approved clubs:', clubError);\n72:         \n73:         // Fallback: get all club profiles"
    },
    {
      "file": "src/components/RankRegistrationClean.tsx",
      "line": 81,
      "content": "console.error('Error fetching all club profiles:', allError);",
      "context": "79: \n80:         if (allError) {\n81:           console.error('Error fetching all club profiles:', allError);\n82:           throw allError;\n83:         }"
    },
    {
      "file": "src/components/RankRegistrationClean.tsx",
      "line": 92,
      "content": "console.error('Error fetching clubs:', error);",
      "context": "90:       }\n91:     } catch (error) {\n92:       console.error('Error fetching clubs:', error);\n93:       toast({\n94:         title: 'Lỗi',"
    },
    {
      "file": "src/components/RankRegistrationClean.tsx",
      "line": 148,
      "content": "console.error('Error uploading files:', error);",
      "context": "146:       });\n147:     } catch (error) {\n148:       console.error('Error uploading files:', error);\n149:       toast({\n150:         title: 'Lỗi',"
    },
    {
      "file": "src/components/RankRegistrationClean.tsx",
      "line": 196,
      "content": "console.error('Error submitting rank request:', error);",
      "context": "194: \n195:       if (error) {\n196:         console.error('Error submitting rank request:', error);\n197:         throw error;\n198:       }"
    },
    {
      "file": "src/components/RankRegistrationClean.tsx",
      "line": 211,
      "content": "console.error('Error submitting rank request:', error);",
      "context": "209:       setEvidenceFiles([]);\n210:     } catch (error) {\n211:       console.error('Error submitting rank request:', error);\n212:       toast({\n213:         title: 'Lỗi',"
    },
    {
      "file": "src/components/RankRegistrationForm.tsx",
      "line": 109,
      "content": "console.error('Error fetching clubs:', error);",
      "context": "107:       }\n108:     } catch (error) {\n109:       console.error('Error fetching clubs:', error);\n110:       toast.error('Lỗi khi tải danh sách CLB');\n111:     } finally {"
    },
    {
      "file": "src/components/RankRegistrationForm.tsx",
      "line": 157,
      "content": "console.error('Error fetching user rank requests:', error);",
      "context": "155:       setUserRankRequests(transformedRequests);\n156:     } catch (error) {\n157:       console.error('Error fetching user rank requests:', error);\n158:       setUserRankRequests([]);\n159:     }"
    },
    {
      "file": "src/components/RankRegistrationForm.tsx",
      "line": 202,
      "content": "console.error('Error submitting rank request:', error);",
      "context": "200:       }\n201:     } catch (error) {\n202:       console.error('Error submitting rank request:', error);\n203:       const errorMessage =\n204:         error instanceof Error ? error.message : 'Lỗi khi gửi yêu cầu rank';"
    },
    {
      "file": "src/components/RankRequestCard.tsx",
      "line": 114,
      "content": "console.error('Error updating rank request:', error);",
      "context": "112:       }\n113:     } catch (error) {\n114:       console.error('Error updating rank request:', error);\n115:     } finally {\n116:       setIsUpdating(false);"
    },
    {
      "file": "src/components/RankRequestsManagement.tsx",
      "line": 118,
      "content": "console.error('Error fetching rank requests:', error);",
      "context": "116:       setRequests(mockRequests);\n117:     } catch (error) {\n118:       console.error('Error fetching rank requests:', error);\n119:       toast.error('Có lỗi khi tải danh sách yêu cầu');\n120:     } finally {"
    },
    {
      "file": "src/components/RankRequestsManagement.tsx",
      "line": 159,
      "content": "console.error('Error handling request:', error);",
      "context": "157:       }\n158:     } catch (error) {\n159:       console.error('Error handling request:', error);\n160:       toast.error('Có lỗi khi xử lý yêu cầu');\n161:     } finally {"
    },
    {
      "file": "src/components/RankRequestsTab.tsx",
      "line": 87,
      "content": "console.error('Error updating rank request:', error);",
      "context": "85:       setRejectionReason('');\n86:     } catch (error) {\n87:       console.error('Error updating rank request:', error);\n88:     } finally {\n89:       setUpdating(false);"
    },
    {
      "file": "src/components/RankTestModal.tsx",
      "line": 181,
      "content": "console.error('Upload error:', error);",
      "context": "179:       toast.success(`Đã tải lên ${uploadedUrls.length} hình ảnh`);\n180:     } catch (error) {\n181:       console.error('Upload error:', error);\n182:       toast.error('Lỗi khi tải lên hình ảnh');\n183:     } finally {"
    },
    {
      "file": "src/components/RankVerificationForm.tsx",
      "line": 81,
      "content": "console.error('Error fetching clubs:', error);",
      "context": "79:       setClubs((data as ClubOption[]) || []);\n80:     } catch (error) {\n81:       console.error('Error fetching clubs:', error);\n82:     }\n83:   };"
    },
    {
      "file": "src/components/RankVerificationForm.tsx",
      "line": 117,
      "content": "console.error('Error fetching verifications:', error);",
      "context": "115:       setVerifications(transformedData as RankVerification[]);\n116:     } catch (error) {\n117:       console.error('Error fetching verifications:', error);\n118:     }\n119:   };"
    },
    {
      "file": "src/components/RankVerificationForm.tsx",
      "line": 144,
      "content": "console.error('Error submitting verification:', error);",
      "context": "142:       fetchVerifications();\n143:     } catch (error: any) {\n144:       console.error('Error submitting verification:', error);\n145:       toast.error('Lỗi khi gửi yêu cầu: ' + error.message);\n146:     } finally {"
    },
    {
      "file": "src/components/RankVerificationRequests.tsx",
      "line": 77,
      "content": "console.error('Error fetching rank verifications:', error);",
      "context": "75: \n76:       if (error) {\n77:         console.error('Error fetching rank verifications:', error);\n78:         throw error;\n79:       }"
    },
    {
      "file": "src/components/RankVerificationRequests.tsx",
      "line": 99,
      "content": "console.error('Error fetching requests:', error);",
      "context": "97:       setRequests((requestsWithProfiles as VerificationRequest[]) || []);\n98:     } catch (error) {\n99:       console.error('Error fetching requests:', error);\n100:       toast.error('Lỗi khi tải danh sách yêu cầu xác thực hạng');\n101:     } finally {"
    },
    {
      "file": "src/components/RankVerificationRequests.tsx",
      "line": 123,
      "content": "console.error('Error updating rank verification:', error);",
      "context": "121: \n122:       if (error) {\n123:         console.error('Error updating rank verification:', error);\n124:         throw error;\n125:       }"
    },
    {
      "file": "src/components/RankVerificationRequests.tsx",
      "line": 133,
      "content": "console.error('Database function error:', (data as any).error);",
      "context": "131:         !data.success\n132:       ) {\n133:         console.error('Database function error:', (data as any).error);\n134:         throw new Error((data as any).error);\n135:       }"
    },
    {
      "file": "src/components/RankVerificationRequests.tsx",
      "line": 140,
      "content": "console.error('Error updating request:', error);",
      "context": "138:       await fetchRequests();\n139:     } catch (error: any) {\n140:       console.error('Error updating request:', error);\n141:       toast.error(`Lỗi khi cập nhật: ${error.message || 'Unknown error'}`);\n142:     } finally {"
    },
    {
      "file": "src/components/RankVerificationRequests.tsx",
      "line": 189,
      "content": "console.error('Error updating rank verification:', verificationError);",
      "context": "187: \n188:       if (verificationError) {\n189:         console.error('Error updating rank verification:', verificationError);\n190:         throw verificationError;\n191:       }"
    },
    {
      "file": "src/components/RankVerificationRequests.tsx",
      "line": 205,
      "content": "console.error('Error updating profile rank:', profileError);",
      "context": "203: \n204:           if (profileError) {\n205:             console.error('Error updating profile rank:', profileError);\n206:             // Don't throw here, just log the error\n207:             toast.error("
    },
    {
      "file": "src/components/RankVerificationRequests.tsx",
      "line": 247,
      "content": "console.error('Error creating feed post:', postError);",
      "context": "245:               console.log('Feed post created for rank verification');\n246:             } catch (postError) {\n247:               console.error('Error creating feed post:', postError);\n248:               // Don't block the main flow, just log the error\n249:             }"
    },
    {
      "file": "src/components/RankVerificationRequests.tsx",
      "line": 261,
      "content": "console.error('Error updating request:', error);",
      "context": "259:       await fetchRequests();\n260:     } catch (error: any) {\n261:       console.error('Error updating request:', error);\n262:       toast.error(`Lỗi khi xử lý yêu cầu: ${error.message || 'Unknown error'}`);\n263:     } finally {"
    },
    {
      "file": "src/components/RegisterForm.tsx",
      "line": 107,
      "content": "console.error('Error fetching clubs:', error);",
      "context": "105: \n106:         if (error) {\n107:           console.error('Error fetching clubs:', error);\n108:         } else if (data) {\n109:           setClubs(data.map(club => ({ id: club.id, name: club.club_name })));"
    },
    {
      "file": "src/components/RegisterForm.tsx",
      "line": 112,
      "content": "console.error('Error fetching clubs:', error);",
      "context": "110:         }\n111:       } catch (error) {\n112:         console.error('Error fetching clubs:', error);\n113:       }\n114:     };"
    },
    {
      "file": "src/components/RegisterForm.tsx",
      "line": 154,
      "content": "console.error('Profile check error:', profileError);",
      "context": "152: \n153:     if (profileError) {\n154:       console.error('Profile check error:', profileError);\n155:     }\n156: "
    },
    {
      "file": "src/components/RegisterForm.tsx",
      "line": 180,
      "content": "console.error('Registration error:', error);",
      "context": "178: \n179:       if (error) {\n180:         console.error('Registration error:', error);\n181:         const errorMessage =\n182:           (error as any)?.message || 'Unknown error occurred';"
    },
    {
      "file": "src/components/RegisterForm.tsx",
      "line": 197,
      "content": "console.error('Registration error:', error);",
      "context": "195:       }\n196:     } catch (error) {\n197:       console.error('Registration error:', error);\n198:       const errorMessage =\n199:         error instanceof Error ? error.message : 'Unknown error occurred';"
    },
    {
      "file": "src/components/RoleSelector.tsx",
      "line": 44,
      "content": "console.error('Error updating role:', error);",
      "context": "42:       );\n43:     } catch (error: any) {\n44:       console.error('Error updating role:', error);\n45:       toast.error('Lỗi khi chuyển chế độ: ' + error.message);\n46:     }"
    },
    {
      "file": "src/components/SeasonHistoryTab.tsx",
      "line": 88,
      "content": "console.error('Error loading season history:', err);",
      "context": "86:       setStats(response.stats);\n87:     } catch (err) {\n88:       console.error('Error loading season history:', err);\n89:     }\n90:   };"
    },
    {
      "file": "src/components/SimpleLegacySearch.tsx",
      "line": 26,
      "content": "console.log('Full error:', error);",
      "context": "24:       if (error) {\n25:         setError(`Lỗi: ${error.message}`);\n26:         console.log('Full error:', error);\n27:       } else {\n28:         setResults(data || []);"
    },
    {
      "file": "src/components/SimpleTournamentPaymentManager.tsx",
      "line": 51,
      "content": "console.error('Error fetching tournaments:', error);",
      "context": "49:       }\n50:     } catch (error) {\n51:       console.error('Error fetching tournaments:', error);\n52:       toast.error('Lỗi khi tải danh sách giải đấu');\n53:     }"
    },
    {
      "file": "src/components/SocialLoginButtons.tsx",
      "line": 20,
      "content": "console.error('Google login error:', error);",
      "context": "18: \n19:       if (error) {\n20:         console.error('Google login error:', error);\n21: \n22:         if (error.message.includes('provider is not enabled')) {"
    },
    {
      "file": "src/components/SocialLoginButtons.tsx",
      "line": 42,
      "content": "console.error('Google login error:', error);",
      "context": "40:       }\n41:     } catch (error) {\n42:       console.error('Google login error:', error);\n43:       const errorMessage =\n44:         error instanceof Error ? error.message : 'Unknown error occurred';"
    },
    {
      "file": "src/components/SocialLoginButtons.tsx",
      "line": 64,
      "content": "console.error('Facebook login error:', error);",
      "context": "62: \n63:       if (error) {\n64:         console.error('Facebook login error:', error);\n65: \n66:         if (error.message.includes('provider is not enabled')) {"
    },
    {
      "file": "src/components/SocialLoginButtons.tsx",
      "line": 86,
      "content": "console.error('Facebook login error:', error);",
      "context": "84:       }\n85:     } catch (error) {\n86:       console.error('Facebook login error:', error);\n87:       const errorMessage =\n88:         error instanceof Error ? error.message : 'Unknown error occurred';"
    },
    {
      "file": "src/components/TableBookingForm.tsx",
      "line": 102,
      "content": "console.error('Error booking table:', error);",
      "context": "100:       setDuration(1);\n101:     } catch (error) {\n102:       console.error('Error booking table:', error);\n103:       const errorMessage =\n104:         error instanceof Error ? error.message : 'Unknown error occurred';"
    },
    {
      "file": "src/components/UserProfileHeader.tsx",
      "line": 47,
      "content": "console.error('❌ Profile error:', profileResult.error);",
      "context": "45: \n46:       if (profileResult.error) {\n47:         console.error('❌ Profile error:', profileResult.error);\n48:         throw profileResult.error;\n49:       }"
    },
    {
      "file": "src/components/UserProfileHeader.tsx",
      "line": 59,
      "content": "console.error('❌ Error loading profile data:', error);",
      "context": "57:       setWallet(walletResult.data);\n58:     } catch (error) {\n59:       console.error('❌ Error loading profile data:', error);\n60:     } finally {\n61:       setLoading(false);"
    },
    {
      "file": "src/components/WalletBalance.tsx",
      "line": 51,
      "content": "console.error('Error fetching wallet:', walletError);",
      "context": "49: \n50:         if (walletError && walletError.code !== 'PGRST116') {\n51:           console.error('Error fetching wallet:', walletError);\n52:         } else if (walletData) {\n53:           setWalletData({"
    },
    {
      "file": "src/components/WalletBalance.tsx",
      "line": 64,
      "content": "console.error('Error fetching wallet data:', error);",
      "context": "62:         setRecentTransactions([]);\n63:       } catch (error) {\n64:         console.error('Error fetching wallet data:', error);\n65:       } finally {\n66:         setLoading(false);"
    },
    {
      "file": "src/components/WalletPage.tsx",
      "line": 110,
      "content": "console.error('Error fetching wallet data:', error);",
      "context": "108:       setTransactions(mockTransactions);\n109:     } catch (error) {\n110:       console.error('Error fetching wallet data:', error);\n111:       toast.error('Không thể tải thông tin ví');\n112:     } finally {"
    },
    {
      "file": "src/components/WithdrawModal.tsx",
      "line": 82,
      "content": "console.error('Error creating withdrawal:', error);",
      "context": "80:       handleReset();\n81:     } catch (error) {\n82:       console.error('Error creating withdrawal:', error);\n83:       toast.error('Có lỗi xảy ra khi tạo yêu cầu rút tiền');\n84:     } finally {"
    },
    {
      "file": "src/components/alerts/AlertAnalysisDashboard.tsx",
      "line": 171,
      "content": "console.error('Error analyzing alert:', error);",
      "context": "169:       toast.success('Phân tích alert hoàn tất!');\n170:     } catch (error: any) {\n171:       console.error('Error analyzing alert:', error);\n172:       toast.error('Lỗi phân tích alert: ' + error.message);\n173:     } finally {"
    },
    {
      "file": "src/components/alerts/AlertAnalysisDashboard.tsx",
      "line": 205,
      "content": "console.error('Error chatting with AI:', error);",
      "context": "203:       setChatQuery('');\n204:     } catch (error: any) {\n205:       console.error('Error chatting with AI:', error);\n206:       toast.error('Lỗi chat với AI: ' + error.message);\n207:     } finally {"
    },
    {
      "file": "src/components/alerts/AlertAnalysisDashboard.tsx",
      "line": 240,
      "content": "console.error('Error generating predictions:', error);",
      "context": "238:       toast.success('Dự đoán incidents đã được tạo!');\n239:     } catch (error: any) {\n240:       console.error('Error generating predictions:', error);\n241:       toast.error('Lỗi tạo dự đoán: ' + error.message);\n242:     } finally {"
    },
    {
      "file": "src/components/alerts/AutomatedReporting.tsx",
      "line": 167,
      "content": "console.error('Error generating report:', error);",
      "context": "165:       toast.success('Report đã được tạo thành công!');\n166:     } catch (error: any) {\n167:       console.error('Error generating report:', error);\n168:       toast.error('Lỗi tạo report: ' + error.message);\n169:     } finally {"
    },
    {
      "file": "src/components/alerts/ConversationalAlerts.tsx",
      "line": 160,
      "content": "console.error('Error sending message:', error);",
      "context": "158:       setMessages(prev => [...prev, assistantMessage]);\n159:     } catch (error: any) {\n160:       console.error('Error sending message:', error);\n161:       toast.error('Lỗi gửi tin nhắn: ' + error.message);\n162: "
    },
    {
      "file": "src/components/analytics/AdvancedAnalyticsDashboard.tsx",
      "line": 129,
      "content": "console.error('Error fetching analytics data:', error);",
      "context": "127:       setAnalyticsData(processedData);\n128:     } catch (error) {\n129:       console.error('Error fetching analytics data:', error);\n130:     } finally {\n131:       setLoading(false);"
    },
    {
      "file": "src/components/analytics/AnalyticsDashboard.tsx",
      "line": 133,
      "content": "console.error('Failed to fetch analytics:', error);",
      "context": "131:       });\n132:     } catch (error) {\n133:       console.error('Failed to fetch analytics:', error);\n134:     } finally {\n135:       setIsLoading(false);"
    },
    {
      "file": "src/components/analytics/UserBehaviorAnalytics.tsx",
      "line": 110,
      "content": "console.error('Error fetching user behavior data:', error);",
      "context": "108:       }\n109:     } catch (error) {\n110:       console.error('Error fetching user behavior data:', error);\n111:     } finally {\n112:       setLoading(false);"
    },
    {
      "file": "src/components/auth/AuthErrorBoundary.tsx",
      "line": 35,
      "content": "console.error('Auth Error Boundary caught an error:', error, errorInfo);",
      "context": "33: \n34:   componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n35:     console.error('Auth Error Boundary caught an error:', error, errorInfo);\n36: \n37:     this.setState({"
    },
    {
      "file": "src/components/auth/AuthErrorBoundary.tsx",
      "line": 93,
      "content": "console.error('Failed to log auth error:', loggingError);",
      "context": "91:       localStorage.setItem('auth_error_logs', JSON.stringify(limitedLogs));\n92:     } catch (loggingError) {\n93:       console.error('Failed to log auth error:', loggingError);\n94:     }\n95:   };"
    },
    {
      "file": "src/components/auth/FacebookLoginButton.tsx",
      "line": 18,
      "content": "console.error('Facebook login error details:', {",
      "context": "16: \n17:       if (error) {\n18:         console.error('Facebook login error details:', {\n19:           message: error.message,\n20:           code: error.code || 'No code',"
    },
    {
      "file": "src/components/auth/FacebookLoginButton.tsx",
      "line": 42,
      "content": "console.error('Facebook login catch error:', error);",
      "context": "40:       }\n41:     } catch (error) {\n42:       console.error('Facebook login catch error:', error);\n43:       const errorMessage =\n44:         error instanceof Error ? error.message : 'Đã xảy ra lỗi không xác định';"
    },
    {
      "file": "src/components/auth/GoogleLoginButton.tsx",
      "line": 18,
      "content": "console.error('Google login error details:', {",
      "context": "16: \n17:       if (error) {\n18:         console.error('Google login error details:', {\n19:           message: error.message,\n20:           code: error.code || 'No code',"
    },
    {
      "file": "src/components/auth/GoogleLoginButton.tsx",
      "line": 42,
      "content": "console.error('Google login catch error:', error);",
      "context": "40:       }\n41:     } catch (error) {\n42:       console.error('Google login catch error:', error);\n43:       const errorMessage =\n44:         error instanceof Error ? error.message : 'Đã xảy ra lỗi không xác định';"
    },
    {
      "file": "src/components/challenges/ChallengeConversationModal.tsx",
      "line": 51,
      "content": "console.error('Error sending message:', error);",
      "context": "49:       setMessage('');\n50:     } catch (error) {\n51:       console.error('Error sending message:', error);\n52:     }\n53:   };"
    },
    {
      "file": "src/components/challenges/ClubApprovalCard.tsx",
      "line": 94,
      "content": "console.error('Club approval error:', error);",
      "context": "92:       onApprovalComplete?.();\n93:     } catch (error) {\n94:       console.error('Club approval error:', error);\n95:       setApprovalAction(null);\n96:     }"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 80,
      "content": "console.error('🎯 [DEBUG] acceptChallenge error:', error);",
      "context": "78:       toast.success('🎯 Tham gia thách đấu thành công!');\n79:     } catch (error) {\n80:       console.error('🎯 [DEBUG] acceptChallenge error:', error);\n81:       const errorMessage = error instanceof Error ? error.message : 'Lỗi khi tham gia thách đấu';\n82:       toast.error(errorMessage);"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 113,
      "content": "console.error('🎯 [ERROR] Challenge status update failed:', error);",
      "context": "111: \n112:       if (error) {\n113:         console.error('🎯 [ERROR] Challenge status update failed:', error);\n114:         toast.error('Lỗi khi bắt đầu trận đấu');\n115:         return;"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 126,
      "content": "console.error('🎯 [DEBUG] handleStartMatch error:', error);",
      "context": "124:       }, 1000);\n125:     } catch (error) {\n126:       console.error('🎯 [DEBUG] handleStartMatch error:', error);\n127:       const errorMessage = error instanceof Error ? error.message : 'Lỗi khi bắt đầu trận đấu';\n128:       toast.error(errorMessage);"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 235,
      "content": "console.warn('Error calculating live handicap:', error);",
      "context": "233:       // Only log errors in development\n234:       if (process.env.NODE_ENV === 'development') {\n235:         console.warn('Error calculating live handicap:', error);\n236:       }\n237:     }"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 683,
      "content": "console.error('Match update error:', matchError);",
      "context": "681: \n682:                   if (matchError) {\n683:                     console.error('Match update error:', matchError);\n684:                     throw matchError;\n685:                   }"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 698,
      "content": "console.error('Challenge update error:', challengeError);",
      "context": "696: \n697:                   if (challengeError) {\n698:                     console.error('Challenge update error:', challengeError);\n699:                     throw challengeError;\n700:                   }"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCompletion.tsx",
      "line": 100,
      "content": "console.error('Error completing challenge:', error);",
      "context": "98:       onComplete();\n99:     } catch (error) {\n100:       console.error('Error completing challenge:', error);\n101:       toast.error('Lỗi khi hoàn thành thách đấu');\n102:     }"
    },
    {
      "file": "src/components/challenges/IntegratedScoreManager.tsx",
      "line": 75,
      "content": "console.error('Score update error:', error);",
      "context": "73:       \n74:     } catch (error) {\n75:       console.error('Score update error:', error);\n76:       toast.error('Lỗi khi cập nhật tỷ số');\n77:     }"
    },
    {
      "file": "src/components/challenges/IntegratedScoreManager.tsx",
      "line": 116,
      "content": "console.error('Step 1 complete challenge error:', step1Error);",
      "context": "114: \n115:       if (step1Error) {\n116:         console.error('Step 1 complete challenge error:', step1Error);\n117:         throw step1Error;\n118:       }"
    },
    {
      "file": "src/components/challenges/IntegratedScoreManager.tsx",
      "line": 133,
      "content": "console.warn('Step 2 non-critical error:', step2Error);",
      "context": "131:       // Don't throw error if step 2 fails - challenge is still completed\n132:       if (step2Error) {\n133:         console.warn('Step 2 non-critical error:', step2Error);\n134:       }\n135: "
    },
    {
      "file": "src/components/challenges/IntegratedScoreManager.tsx",
      "line": 146,
      "content": "console.error('Complete challenge error:', error);",
      "context": "144:       \n145:     } catch (error) {\n146:       console.error('Complete challenge error:', error);\n147:       toast.error(`Lỗi khi hoàn tất trận đấu: ${error.message || 'Unknown error'}`);\n148:     }"
    },
    {
      "file": "src/components/challenges/LiveActivityFeed.tsx",
      "line": 51,
      "content": "console.error('Error refreshing:', error);",
      "context": "49:       toast.success('Đã cập nhật dữ liệu mới nhất');\n50:     } catch (error) {\n51:       console.error('Error refreshing:', error);\n52:       toast.error('Lỗi khi cập nhật dữ liệu');\n53:     } finally {"
    },
    {
      "file": "src/components/challenges/MatchScoreModal.tsx",
      "line": 66,
      "content": "console.error('Error submitting score:', error);",
      "context": "64:       setOpponentScore(0);\n65:     } catch (error) {\n66:       console.error('Error submitting score:', error);\n67:     }\n68:   };"
    },
    {
      "file": "src/components/challenges/ScheduleMatchModal.tsx",
      "line": 48,
      "content": "console.error('Error scheduling challenge:', error);",
      "context": "46:       onOpenChange(false);\n47:     } catch (error) {\n48:       console.error('Error scheduling challenge:', error);\n49:     }\n50:   };"
    },
    {
      "file": "src/components/challenges/ScoreSubmissionCard.tsx",
      "line": 137,
      "content": "console.error('Submit score error:', error);",
      "context": "135:       onScoreSubmitted?.();\n136:     } catch (error) {\n137:       console.error('Submit score error:', error);\n138:     }\n139:   };"
    },
    {
      "file": "src/components/challenges/ScoreSubmissionCard.tsx",
      "line": 151,
      "content": "console.error('Confirm score error:', error);",
      "context": "149:       onScoreSubmitted?.();\n150:     } catch (error) {\n151:       console.error('Confirm score error:', error);\n152:     }\n153:   };"
    },
    {
      "file": "src/components/chat/ChatList.tsx",
      "line": 148,
      "content": "console.error('Failed to fetch conversations:', error);",
      "context": "146:         ]);\n147:       } catch (error) {\n148:         console.error('Failed to fetch conversations:', error);\n149:       } finally {\n150:         setIsLoading(false);"
    },
    {
      "file": "src/components/chat/ChatWindow.tsx",
      "line": 62,
      "content": "console.error('Error sending message:', error);",
      "context": "60:       setNewMessage('');\n61:     } catch (error) {\n62:       console.error('Error sending message:', error);\n63:     } finally {\n64:       setLoading(false);"
    },
    {
      "file": "src/components/chat/CreateChatModal.tsx",
      "line": 97,
      "content": "console.error('Failed to fetch users:', error);",
      "context": "95:       ]);\n96:     } catch (error) {\n97:       console.error('Failed to fetch users:', error);\n98:     } finally {\n99:       setIsLoading(false);"
    },
    {
      "file": "src/components/chat/CreateChatModal.tsx",
      "line": 131,
      "content": "console.error('Failed to create chat:', error);",
      "context": "129:       handleClose();\n130:     } catch (error) {\n131:       console.error('Failed to create chat:', error);\n132:     }\n133:   };"
    },
    {
      "file": "src/components/cloud/CloudStorageManager.tsx",
      "line": 162,
      "content": "console.error('Upload error:', error);",
      "context": "160:           });\n161:         } catch (error) {\n162:           console.error('Upload error:', error);\n163:           toast({\n164:             title: 'Lỗi upload',"
    },
    {
      "file": "src/components/club/ClubBracketManagementTab.tsx",
      "line": 49,
      "content": "console.error('Error loading tournaments:', error);",
      "context": "47:       setTournaments(data || []);\n48:     } catch (error) {\n49:       console.error('Error loading tournaments:', error);\n50:       toast.error('Lỗi tải danh sách giải đấu');\n51:     } finally {"
    },
    {
      "file": "src/components/club/ClubManagement.tsx",
      "line": 137,
      "content": "console.error('Error updating club:', error);",
      "context": "135:     },\n136:     onError: error => {\n137:       console.error('Error updating club:', error);\n138:       toast.error('Lỗi khi cập nhật thông tin');\n139:     },"
    },
    {
      "file": "src/components/club/ClubManagement.tsx",
      "line": 158,
      "content": "console.error('Error deleting club:', error);",
      "context": "156:     },\n157:     onError: error => {\n158:       console.error('Error deleting club:', error);\n159:       toast.error('Lỗi khi xóa câu lạc bộ');\n160:     },"
    },
    {
      "file": "src/components/club/ClubRankVerificationTab.tsx",
      "line": 122,
      "content": "console.error('Error loading rank requests:', error);",
      "context": "120:       setRequests(requestsWithProfiles as RankRequest[]);\n121:     } catch (error: any) {\n122:       console.error('Error loading rank requests:', error);\n123:       toast.error('Lỗi khi tải danh sách xác thực hạng: ' + error.message);\n124:     } finally {"
    },
    {
      "file": "src/components/club/ClubRankVerificationTab.tsx",
      "line": 193,
      "content": "console.error('Error updating player_rankings:', playerRankingError);",
      "context": "191: \n192:           if (playerRankingError) {\n193:             console.error('Error updating player_rankings:', playerRankingError);\n194:           }\n195: "
    },
    {
      "file": "src/components/club/ClubRankVerificationTab.tsx",
      "line": 207,
      "content": "console.error('Error updating profiles:', profileError);",
      "context": "205: \n206:           if (profileError) {\n207:             console.error('Error updating profiles:', profileError);\n208:           }\n209: "
    },
    {
      "file": "src/components/club/ClubRankVerificationTab.tsx",
      "line": 229,
      "content": "console.error('Error sending notification:', notificationError);",
      "context": "227: \n228:           if (notificationError) {\n229:             console.error('Error sending notification:', notificationError);\n230:           }\n231: "
    },
    {
      "file": "src/components/club/ClubRankVerificationTab.tsx",
      "line": 239,
      "content": "console.error('Error syncing rank data:', syncError);",
      "context": "237:           toast.success(`✅ Rank ${request.requested_rank} approved! +${spaBonus} SPA bonus awarded!`);\n238:         } catch (syncError) {\n239:           console.error('Error syncing rank data:', syncError);\n240:           toast.warning('Rank request approved but some data may not be synced properly');\n241:         }"
    },
    {
      "file": "src/components/club/ClubRankVerificationTab.tsx",
      "line": 248,
      "content": "console.error('Error updating rank request:', error);",
      "context": "246:       loadRankRequests();\n247:     } catch (error: any) {\n248:       console.error('Error updating rank request:', error);\n249:       toast.error('Lỗi khi cập nhật yêu cầu: ' + error.message);\n250:     } finally {"
    },
    {
      "file": "src/components/club/ClubTournamentManagement.tsx",
      "line": 147,
      "content": "console.error('🚨 Error in ClubTournamentManagement:', error);",
      "context": "145:     );\n146:   } catch (error) {\n147:     console.error('🚨 Error in ClubTournamentManagement:', error);\n148:     return <div>Error loading tournament management: {String(error)}</div>;\n149:   }"
    },
    {
      "file": "src/components/club/ImprovedRankVerificationTab.tsx",
      "line": 82,
      "content": "console.error('Error fetching profiles:', profileError);",
      "context": "80: \n81:         if (profileError) {\n82:           console.error('Error fetching profiles:', profileError);\n83:         } else {\n84:           profiles = profileData || [];"
    },
    {
      "file": "src/components/club/ImprovedRankVerificationTab.tsx",
      "line": 106,
      "content": "console.error('Error loading rank requests:', error);",
      "context": "104:       setRequests(requestsWithProfiles);\n105:     } catch (error) {\n106:       console.error('Error loading rank requests:', error);\n107:       toast.error('Lỗi tải danh sách yêu cầu xác minh');\n108:     } finally {"
    },
    {
      "file": "src/components/club/ImprovedRankVerificationTab.tsx",
      "line": 127,
      "content": "console.error('Error approving request:', error);",
      "context": "125:       await loadRankRequests();\n126:     } catch (error) {\n127:       console.error('Error approving request:', error);\n128:       toast.error('Lỗi phê duyệt yêu cầu');\n129:     } finally {"
    },
    {
      "file": "src/components/club/ImprovedRankVerificationTab.tsx",
      "line": 148,
      "content": "console.error('Error rejecting request:', error);",
      "context": "146:       await loadRankRequests();\n147:     } catch (error) {\n148:       console.error('Error rejecting request:', error);\n149:       toast.error('Lỗi từ chối yêu cầu');\n150:     } finally {"
    },
    {
      "file": "src/components/club/RankVerificationTab.tsx",
      "line": 81,
      "content": "console.error('Error loading rank requests:', error);",
      "context": "79:       setRequests([]);\n80:     } catch (error) {\n81:       console.error('Error loading rank requests:', error);\n82:       toast.error(\n83:         'Lỗi khi tải danh sách xác thực hạng: ' + (error as any)?.message"
    },
    {
      "file": "src/components/club/RankVerificationTab.tsx",
      "line": 106,
      "content": "console.error('Error updating status:', error);",
      "context": "104:       toast.success(`Đã cập nhật trạng thái thành \"${newStatus}\"`);\n105:     } catch (error) {\n106:       console.error('Error updating status:', error);\n107:       toast.error('Lỗi khi cập nhật trạng thái');\n108:     } finally {"
    },
    {
      "file": "src/components/club/optimized/ClubMembersOptimized.tsx",
      "line": 121,
      "content": "console.error('Error loading club members:', membersError);",
      "context": "119: \n120:       if (membersError) {\n121:         console.error('Error loading club members:', membersError);\n122:         // Fallback: load some sample profiles for demo\n123:         const { data: profilesData, error: profilesError } = await supabase"
    },
    {
      "file": "src/components/club/optimized/ClubMembersOptimized.tsx",
      "line": 229,
      "content": "console.error('Error loading members:', error);",
      "context": "227:       setMembers(membersWithRequests);\n228:     } catch (error) {\n229:       console.error('Error loading members:', error);\n230:       toast.error('Lỗi khi tải danh sách thành viên');\n231:     }"
    },
    {
      "file": "src/components/club/optimized/ClubMembersOptimized.tsx",
      "line": 262,
      "content": "console.error('Error loading rank requests:', error);",
      "context": "260:       setRankRequests(requestsWithProfiles);\n261:     } catch (error) {\n262:       console.error('Error loading rank requests:', error);\n263:     }\n264:   };"
    },
    {
      "file": "src/components/club/optimized/ClubMembersOptimized.tsx",
      "line": 298,
      "content": "console.error('Error loading notifications:', error);",
      "context": "296:       setNotifications(transformedNotifications);\n297:     } catch (error) {\n298:       console.error('Error loading notifications:', error);\n299:     }\n300:   };"
    },
    {
      "file": "src/components/club/optimized/ClubMembersOptimized.tsx",
      "line": 338,
      "content": "console.error('❌ Error calling approval function:', approvalError);",
      "context": "336: \n337:       if (approvalError) {\n338:         console.error('❌ Error calling approval function:', approvalError);\n339:         throw new Error('Lỗi khi gọi function duyệt: ' + approvalError.message);\n340:       }"
    },
    {
      "file": "src/components/club/optimized/ClubMembersOptimized.tsx",
      "line": 343,
      "content": "console.error('❌ Approval function failed:', approvalResult);",
      "context": "341: \n342:       if (!approvalResult?.success) {\n343:         console.error('❌ Approval function failed:', approvalResult);\n344:         throw new Error(approvalResult?.error || 'Function approval thất bại');\n345:       }"
    },
    {
      "file": "src/components/club/optimized/ClubMembersOptimized.tsx",
      "line": 356,
      "content": "console.error('❌ Error in handleApproveRequest:', error);",
      "context": "354:       \n355:     } catch (error) {\n356:       console.error('❌ Error in handleApproveRequest:', error);\n357:       \n358:       let errorMessage = 'Có lỗi xảy ra khi duyệt yêu cầu';"
    },
    {
      "file": "src/components/club/optimized/ClubMembersOptimized.tsx",
      "line": 391,
      "content": "console.error('Error rejecting request:', error);",
      "context": "389:       await loadAllData();\n390:     } catch (error) {\n391:       console.error('Error rejecting request:', error);\n392:       toast.error('Lỗi khi từ chối yêu cầu');\n393:     } finally {"
    },
    {
      "file": "src/components/club/optimized/ClubMembersOptimized.tsx",
      "line": 411,
      "content": "console.error('Error marking notification as read:', error);",
      "context": "409:       );\n410:     } catch (error) {\n411:       console.error('Error marking notification as read:', error);\n412:     }\n413:   };"
    },
    {
      "file": "src/components/club-management/MemberManagementTab.tsx",
      "line": 154,
      "content": "console.error('Error fetching members:', error);",
      "context": "152:       setMembers(validMembers);\n153:     } catch (error) {\n154:       console.error('Error fetching members:', error);\n155:       toast({\n156:         title: 'Lỗi',"
    },
    {
      "file": "src/components/club-management/MemberManagementTab.tsx",
      "line": 183,
      "content": "console.error('Error fetching available users:', error);",
      "context": "181:       setAvailableUsers(data || []);\n182:     } catch (error) {\n183:       console.error('Error fetching available users:', error);\n184:     }\n185:   };"
    },
    {
      "file": "src/components/club-management/MemberManagementTab.tsx",
      "line": 221,
      "content": "console.error('Authorization check error:', error);",
      "context": "219:       setIsAuthorized(isSaboClubOwner || false);\n220:     } catch (error) {\n221:       console.error('Authorization check error:', error);\n222:       setIsAuthorized(false);\n223:     }"
    },
    {
      "file": "src/components/club-management/MemberManagementTab.tsx",
      "line": 261,
      "content": "console.error('Error adding member:', error);",
      "context": "259:       fetchMembers();\n260:     } catch (error) {\n261:       console.error('Error adding member:', error);\n262:       toast({\n263:         title: 'Lỗi',"
    },
    {
      "file": "src/components/club-management/MemberManagementTab.tsx",
      "line": 289,
      "content": "console.error('Error updating member status:', error);",
      "context": "287:       fetchMembers();\n288:     } catch (error) {\n289:       console.error('Error updating member status:', error);\n290:       toast({\n291:         title: 'Lỗi',"
    },
    {
      "file": "src/components/club-management/RankVerificationTab.tsx",
      "line": 168,
      "content": "console.error('Error fetching verifications:', error);",
      "context": "166:       setVerifications(validVerifications);\n167:     } catch (error) {\n168:       console.error('Error fetching verifications:', error);\n169:       toast({\n170:         title: 'Lỗi',"
    },
    {
      "file": "src/components/club-management/RankVerificationTab.tsx",
      "line": 234,
      "content": "console.error('Error updating verification:', error);",
      "context": "232:       fetchVerifications();\n233:     } catch (error) {\n234:       console.error('Error updating verification:', error);\n235:       toast({\n236:         title: 'Lỗi',"
    },
    {
      "file": "src/components/club-management/ScheduleManagementTab.tsx",
      "line": 134,
      "content": "console.error('Error fetching schedules:', error);",
      "context": "132:       setSchedules(data || []);\n133:     } catch (error) {\n134:       console.error('Error fetching schedules:', error);\n135:       toast({\n136:         title: 'Lỗi',"
    },
    {
      "file": "src/components/club-management/ScheduleManagementTab.tsx",
      "line": 158,
      "content": "console.error('Error fetching instructors:', error);",
      "context": "156:       setInstructors(data || []);\n157:     } catch (error) {\n158:       console.error('Error fetching instructors:', error);\n159:     }\n160:   };"
    },
    {
      "file": "src/components/club-management/ScheduleManagementTab.tsx",
      "line": 223,
      "content": "console.error('Error creating schedule:', error);",
      "context": "221:       fetchSchedules();\n222:     } catch (error) {\n223:       console.error('Error creating schedule:', error);\n224:       toast({\n225:         title: 'Lỗi',"
    },
    {
      "file": "src/components/club-management/ScheduleManagementTab.tsx",
      "line": 251,
      "content": "console.error('Error updating schedule status:', error);",
      "context": "249:       fetchSchedules();\n250:     } catch (error) {\n251:       console.error('Error updating schedule status:', error);\n252:       toast({\n253:         title: 'Lỗi',"
    },
    {
      "file": "src/components/debug/DebugTournamentComponent.tsx",
      "line": 12,
      "content": "console.log('Error:', error?.message || null);",
      "context": "10:     console.log('Tournament ID:', tournamentId);\n11:     console.log('Loading:', isLoading);\n12:     console.log('Error:', error?.message || null);\n13:     console.log('Matches count:', matches?.length || 0);\n14:     "
    },
    {
      "file": "src/components/desktop/UserDesktopHeader.tsx",
      "line": 37,
      "content": "console.error('Sign out error:', error);",
      "context": "35:       await signOut();\n36:     } catch (error) {\n37:       console.error('Sign out error:', error);\n38:     }\n39:   };"
    },
    {
      "file": "src/components/desktop/UserDesktopHeaderSynchronized.tsx",
      "line": 141,
      "content": "console.error('Sign out error:', error);",
      "context": "139:       await signOut();\n140:     } catch (error) {\n141:       console.error('Sign out error:', error);\n142:     }\n143:   };"
    },
    {
      "file": "src/components/error/AppErrorBoundary.tsx",
      "line": 79,
      "content": "console.error('App Error Boundary caught error:', error);",
      "context": "77:       FallbackComponent={ErrorFallback}\n78:       onError={(error, errorInfo) => {\n79:         console.error('App Error Boundary caught error:', error);\n80:         console.error('Error Info:', errorInfo);\n81:       }}"
    },
    {
      "file": "src/components/error/AppErrorBoundary.tsx",
      "line": 80,
      "content": "console.error('Error Info:', errorInfo);",
      "context": "78:       onError={(error, errorInfo) => {\n79:         console.error('App Error Boundary caught error:', error);\n80:         console.error('Error Info:', errorInfo);\n81:       }}\n82:     >"
    },
    {
      "file": "src/components/error/AuthErrorBoundary.tsx",
      "line": 90,
      "content": "console.error('Auth Error Boundary caught error:', error);",
      "context": "88:       FallbackComponent={AuthErrorFallback}\n89:       onError={(error, errorInfo) => {\n90:         console.error('Auth Error Boundary caught error:', error);\n91:         console.error('Error Info:', errorInfo);\n92:       }}"
    },
    {
      "file": "src/components/error/AuthErrorBoundary.tsx",
      "line": 91,
      "content": "console.error('Error Info:', errorInfo);",
      "context": "89:       onError={(error, errorInfo) => {\n90:         console.error('Auth Error Boundary caught error:', error);\n91:         console.error('Error Info:', errorInfo);\n92:       }}\n93:     >"
    },
    {
      "file": "src/components/error/ResponsiveErrorBoundary.tsx",
      "line": 61,
      "content": "console.error('Error caught:', error);",
      "context": "59: \n60:     console.group(`🔧 Responsive Error Boundary - ${this.state.errorId}`);\n61:     console.error('Error caught:', error);\n62:     console.error('Error info:', errorInfo);\n63:     console.log('Screen dimensions:', {"
    },
    {
      "file": "src/components/error/ResponsiveErrorBoundary.tsx",
      "line": 62,
      "content": "console.error('Error info:', errorInfo);",
      "context": "60:     console.group(`🔧 Responsive Error Boundary - ${this.state.errorId}`);\n61:     console.error('Error caught:', error);\n62:     console.error('Error info:', errorInfo);\n63:     console.log('Screen dimensions:', {\n64:       width: window.innerWidth,"
    },
    {
      "file": "src/components/error/ResponsiveErrorBoundary.tsx",
      "line": 68,
      "content": "console.log('Is responsive-related:', isResponsiveError);",
      "context": "66:       userAgent: navigator.userAgent,\n67:     });\n68:     console.log('Is responsive-related:', isResponsiveError);\n69:     console.groupEnd();\n70:   };"
    },
    {
      "file": "src/components/error/ResponsiveErrorBoundary.tsx",
      "line": 110,
      "content": "console.log('Error report prepared for monitoring:', errorReport);",
      "context": "108:       };\n109: \n110:       console.log('Error report prepared for monitoring:', errorReport);\n111: \n112:       // Example API call to monitoring service"
    },
    {
      "file": "src/components/error/ResponsiveErrorBoundary.tsx",
      "line": 119,
      "content": "console.error(",
      "context": "117:       // });\n118:     } catch (reportingError) {\n119:       console.error(\n120:         'Failed to report error to monitoring service:',\n121:         reportingError"
    },
    {
      "file": "src/components/error-boundary/SectionErrorBoundary.tsx",
      "line": 31,
      "content": "console.error(`[${this.props.section}] Error caught:`, error, errorInfo);",
      "context": "29: \n30:   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n31:     console.error(`[${this.props.section}] Error caught:`, error, errorInfo);\n32:     this.props.onError?.(error);\n33:   }"
    },
    {
      "file": "src/components/error-boundary/SectionWrappers.tsx",
      "line": 13,
      "content": "console.error('[Tournament Section] Error:', error);",
      "context": "11: }) => {\n12:   const handleError = (error: Error) => {\n13:     console.error('[Tournament Section] Error:', error);\n14:   };\n15: "
    },
    {
      "file": "src/components/error-boundary/SectionWrappers.tsx",
      "line": 28,
      "content": "console.error('[Challenge Section] Error:', error);",
      "context": "26: }) => {\n27:   const handleError = (error: Error) => {\n28:     console.error('[Challenge Section] Error:', error);\n29:   };\n30: "
    },
    {
      "file": "src/components/error-boundary/SectionWrappers.tsx",
      "line": 41,
      "content": "console.error('[Profile Section] Error:', error);",
      "context": "39: export const ProfileSection: React.FC<SectionWrapperProps> = ({ children }) => {\n40:   const handleError = (error: Error) => {\n41:     console.error('[Profile Section] Error:', error);\n42:   };\n43: "
    },
    {
      "file": "src/components/error-boundary/SectionWrappers.tsx",
      "line": 54,
      "content": "console.error('[Club Section] Error:', error);",
      "context": "52: export const ClubSection: React.FC<SectionWrapperProps> = ({ children }) => {\n53:   const handleError = (error: Error) => {\n54:     console.error('[Club Section] Error:', error);\n55:   };\n56: "
    },
    {
      "file": "src/components/external/ExternalAPIManager.tsx",
      "line": 254,
      "content": "console.error('Sync error:', error);",
      "context": "252:       });\n253:     } catch (error) {\n254:       console.error('Sync error:', error);\n255: \n256:       const errorLog: SyncLog = {"
    },
    {
      "file": "src/components/feed/JoinEventModal.tsx",
      "line": 51,
      "content": "console.error('Failed to join:', error);",
      "context": "49:       onClose();\n50:     } catch (error) {\n51:       console.error('Failed to join:', error);\n52:     } finally {\n53:       setIsLoading(false);"
    },
    {
      "file": "src/components/feed/ShareModal.tsx",
      "line": 105,
      "content": "console.error('Failed to copy link:', err);",
      "context": "103:       setTimeout(() => setCopied(false), 2000);\n104:     } catch (err) {\n105:       console.error('Failed to copy link:', err);\n106:     }\n107:   };"
    },
    {
      "file": "src/components/forms/Form.tsx",
      "line": 34,
      "content": "console.error('Form submission error:', error);",
      "context": "32:       await onSubmit(data);\n33:     } catch (error) {\n34:       console.error('Form submission error:', error);\n35:     }\n36:   };"
    },
    {
      "file": "src/components/legacy/CombinedSPALeaderboard.tsx",
      "line": 141,
      "content": "console.error('Error loading leaderboard:', error);",
      "context": "139: \n140:     } catch (error) {\n141:       console.error('Error loading leaderboard:', error);\n142:     }\n143:   };"
    },
    {
      "file": "src/components/legacy/LegacyClaimForm.tsx",
      "line": 57,
      "content": "console.error('❌ Submit error:', error);",
      "context": "55: \n56:       if (error) {\n57:         console.error('❌ Submit error:', error);\n58:         alert(`Lỗi: ${error.message}`);\n59:       } else {"
    },
    {
      "file": "src/components/legacy/LegacyClaimForm.tsx",
      "line": 74,
      "content": "console.error('❌ Network error:', err);",
      "context": "72:       }\n73:     } catch (err) {\n74:       console.error('❌ Network error:', err);\n75:       alert(`Lỗi: ${err}`);\n76:     } finally {"
    },
    {
      "file": "src/components/legacy/LegacyCodeClaimModal.tsx",
      "line": 62,
      "content": "console.error('Error claiming legacy SPA:', error);",
      "context": "60: \n61:       if (error) {\n62:         console.error('Error claiming legacy SPA:', error);\n63:         setResult({\n64:           success: false,"
    },
    {
      "file": "src/components/legacy/LegacyCodeClaimModal.tsx",
      "line": 94,
      "content": "console.error('Unexpected error:', error);",
      "context": "92: \n93:     } catch (error) {\n94:       console.error('Unexpected error:', error);\n95:       setResult({\n96:         success: false,"
    },
    {
      "file": "src/components/legacy/LegacyGiftCodeModal.tsx",
      "line": 94,
      "content": "console.error('Error claiming legacy SPA:', claimError);",
      "context": "92: \n93:       if (claimError) {\n94:         console.error('Error claiming legacy SPA:', claimError);\n95:         setResult({\n96:           success: false,"
    },
    {
      "file": "src/components/legacy/LegacyGiftCodeModal.tsx",
      "line": 119,
      "content": "console.error('Unexpected error:', error);",
      "context": "117: \n118:     } catch (error) {\n119:       console.error('Unexpected error:', error);\n120:       setResult({\n121:         success: false,"
    },
    {
      "file": "src/components/legacy/LegacySPADashboard.tsx",
      "line": 42,
      "content": "console.error('Error loading legacy stats:', error);",
      "context": "40:       });\n41:     } catch (error) {\n42:       console.error('Error loading legacy stats:', error);\n43:     } finally {\n44:       setLoading(false);"
    },
    {
      "file": "src/components/legacy/SimpleCodeClaim.tsx",
      "line": 94,
      "content": "console.error('Error claiming code:', updateError);",
      "context": "92: \n93:       if (updateError) {\n94:         console.error('Error claiming code:', updateError);\n95:         setLastClaimResult({\n96:           success: false,"
    },
    {
      "file": "src/components/legacy/SimpleCodeClaim.tsx",
      "line": 113,
      "content": "console.error('Unexpected error:', error);",
      "context": "111: \n112:     } catch (error) {\n113:       console.error('Unexpected error:', error);\n114:       setLastClaimResult({\n115:         success: false,"
    },
    {
      "file": "src/components/matches/MatchCompletionHandler.tsx",
      "line": 95,
      "content": "console.error('Error completing match:', error);",
      "context": "93:       onComplete();\n94:     } catch (error) {\n95:       console.error('Error completing match:', error);\n96:       toast.error('Lỗi khi hoàn thành trận đấu');\n97:     } finally {"
    },
    {
      "file": "src/components/matches/MatchResultInputForm.tsx",
      "line": 177,
      "content": "console.error('Error fetching players:', error);",
      "context": "175:       setPlayers(data || []);\n176:     } catch (error) {\n177:       console.error('Error fetching players:', error);\n178:     }\n179:   };"
    },
    {
      "file": "src/components/matches/MatchResultInputForm.tsx",
      "line": 191,
      "content": "console.error('Error fetching clubs:', error);",
      "context": "189:       setClubs(data || []);\n190:     } catch (error) {\n191:       console.error('Error fetching clubs:', error);\n192:     }\n193:   };"
    },
    {
      "file": "src/components/matches/MatchResultInputForm.tsx",
      "line": 206,
      "content": "console.error('Error fetching tournaments:', error);",
      "context": "204:       setTournaments(data || []);\n205:     } catch (error) {\n206:       console.error('Error fetching tournaments:', error);\n207:     }\n208:   };"
    },
    {
      "file": "src/components/matches/MatchResultInputForm.tsx",
      "line": 274,
      "content": "console.error('Error submitting form:', error);",
      "context": "272:       }\n273:     } catch (error) {\n274:       console.error('Error submitting form:', error);\n275:     }\n276:   };"
    },
    {
      "file": "src/components/messages/ComposeMessage.tsx",
      "line": 95,
      "content": "console.error('Error searching users:', error);",
      "context": "93:       setSearchResults(users);\n94:     } catch (error) {\n95:       console.error('Error searching users:', error);\n96:       setSearchResults([]);\n97:     } finally {"
    },
    {
      "file": "src/components/messages/ComposeMessage.tsx",
      "line": 179,
      "content": "console.error('Error sending message:', error);",
      "context": "177:       }\n178:     } catch (error) {\n179:       console.error('Error sending message:', error);\n180:     } finally {\n181:       setIsSending(false);"
    },
    {
      "file": "src/components/messages/MessageSearch.tsx",
      "line": 79,
      "content": "console.error('Search error:', error);",
      "context": "77:       setSearchResults(results);\n78:     } catch (error) {\n79:       console.error('Search error:', error);\n80:       setSearchResults([]);\n81:     } finally {"
    },
    {
      "file": "src/components/milestones/MilestonesList.tsx",
      "line": 67,
      "content": "console.error('Error fetching milestones:', error);",
      "context": "65: \n66:       if (error) {\n67:         console.error('Error fetching milestones:', error);\n68:         toast.error('Không thể tải milestones');\n69:         return [];"
    },
    {
      "file": "src/components/mobile/MobileHeader.tsx",
      "line": 112,
      "content": "console.error('Error signing out:', error);",
      "context": "110:       navigate('/');\n111:     } catch (error) {\n112:       console.error('Error signing out:', error);\n113:       toast.error('Lỗi khi đăng xuất');\n114:     }"
    },
    {
      "file": "src/components/mobile/SocialProfileCard.tsx",
      "line": 117,
      "content": "console.error('Error fetching profile:', profileError);",
      "context": "115: \n116:       if (profileError) {\n117:         console.error('Error fetching profile:', profileError);\n118:         toast.error('Không tìm thấy người chơi này');\n119:         navigate('/');"
    },
    {
      "file": "src/components/mobile/SocialProfileCard.tsx",
      "line": 131,
      "content": "console.log('No stats found, using defaults:', statsError);",
      "context": "129: \n130:       if (statsError) {\n131:         console.log('No stats found, using defaults:', statsError);\n132:       }\n133: "
    },
    {
      "file": "src/components/mobile/SocialProfileCard.tsx",
      "line": 143,
      "content": "console.error('Error fetching data:', error);",
      "context": "141: \n142:     } catch (error) {\n143:       console.error('Error fetching data:', error);\n144:       toast.error('Có lỗi xảy ra khi tải thông tin');\n145:     } finally {"
    },
    {
      "file": "src/components/mobile/UserMobileHeader.tsx",
      "line": 108,
      "content": "console.error('Error signing out:', error);",
      "context": "106:       navigate('/');\n107:     } catch (error) {\n108:       console.error('Error signing out:', error);\n109:       toast.error('Lỗi khi đăng xuất');\n110:     }"
    },
    {
      "file": "src/components/modals/ImprovedCreateChallengeModal.tsx",
      "line": 132,
      "content": "console.error('Error fetching current user profile:', error);",
      "context": "130:         if (process.env.NODE_ENV !== 'production') {\n131:           // eslint-disable-next-line no-console\n132:           console.error('Error fetching current user profile:', error);\n133:         }\n134:       }"
    },
    {
      "file": "src/components/modals/ImprovedCreateChallengeModal.tsx",
      "line": 161,
      "content": "console.error('Error fetching clubs:', error);",
      "context": "159:         if (process.env.NODE_ENV !== 'production') {\n160:           // eslint-disable-next-line no-console\n161:           console.error('Error fetching clubs:', error);\n162:         }\n163:       }"
    },
    {
      "file": "src/components/modals/ImprovedCreateChallengeModal.tsx",
      "line": 190,
      "content": "console.error('Error searching players:', error);",
      "context": "188:       if (process.env.NODE_ENV !== 'production') {\n189:         // eslint-disable-next-line no-console\n190:         console.error('Error searching players:', error);\n191:       }\n192:       setSearchResults([]);"
    },
    {
      "file": "src/components/modals/ImprovedCreateChallengeModal.tsx",
      "line": 222,
      "content": "console.error('Error calculating handicap:', error);",
      "context": "220:       if (process.env.NODE_ENV !== 'production') {\n221:         // eslint-disable-next-line no-console\n222:         console.error('Error calculating handicap:', error);\n223:       }\n224:       return null;"
    },
    {
      "file": "src/components/modals/ImprovedCreateChallengeModal.tsx",
      "line": 309,
      "content": "console.error('Error creating challenge:', error);",
      "context": "307:       if (process.env.NODE_ENV !== 'production') {\n308:         // eslint-disable-next-line no-console\n309:         console.error('Error creating challenge:', error);\n310:       }\n311:       toast.error('Không thể tạo thách đấu. Vui lòng thử lại.');"
    },
    {
      "file": "src/components/notifications/ChallengeNotificationBell.tsx",
      "line": 52,
      "content": "console.error('Error fetching notifications:', error);",
      "context": "50: \n51:       if (error) {\n52:         console.error('Error fetching notifications:', error);\n53:         return;\n54:       }"
    },
    {
      "file": "src/components/notifications/ChallengeNotificationBell.tsx",
      "line": 59,
      "content": "console.error('Error fetching notifications:', error);",
      "context": "57:       setUnreadCount((data || []).filter(n => !n.is_read).length);\n58:     } catch (error) {\n59:       console.error('Error fetching notifications:', error);\n60:     } finally {\n61:       setLoading(false);"
    },
    {
      "file": "src/components/notifications/ChallengeNotificationBell.tsx",
      "line": 75,
      "content": "console.error('Error marking notification as read:', error);",
      "context": "73: \n74:       if (error) {\n75:         console.error('Error marking notification as read:', error);\n76:         return;\n77:       }"
    },
    {
      "file": "src/components/notifications/ChallengeNotificationBell.tsx",
      "line": 87,
      "content": "console.error('Error marking notification as read:', error);",
      "context": "85:       setUnreadCount(prev => Math.max(0, prev - 1));\n86:     } catch (error) {\n87:       console.error('Error marking notification as read:', error);\n88:     }\n89:   };"
    },
    {
      "file": "src/components/notifications/ChallengeNotificationBell.tsx",
      "line": 101,
      "content": "console.error('Error marking all notifications as read:', error);",
      "context": "99: \n100:       if (error) {\n101:         console.error('Error marking all notifications as read:', error);\n102:         return;\n103:       }"
    },
    {
      "file": "src/components/notifications/ChallengeNotificationBell.tsx",
      "line": 109,
      "content": "console.error('Error marking all notifications as read:', error);",
      "context": "107:       toast.success('Đã đánh dấu tất cả thông báo là đã đọc');\n108:     } catch (error) {\n109:       console.error('Error marking all notifications as read:', error);\n110:     }\n111:   };"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 85,
      "content": "console.error('Notification component error:', error);",
      "context": "83:         return fn(...args);\n84:       } catch (error) {\n85:         console.error('Notification component error:', error);\n86:         setHasError(true);\n87:         setIsOpen(false);"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 100,
      "content": "console.error('Error in click outside handler:', error);",
      "context": "98:         }\n99:       } catch (error) {\n100:         console.error('Error in click outside handler:', error);\n101:         setIsOpen(false);\n102:       }"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 113,
      "content": "console.error('Error removing event listener:', error);",
      "context": "111:         document.removeEventListener('mousedown', handleClickOutside);\n112:       } catch (error) {\n113:         console.error('Error removing event listener:', error);\n114:       }\n115:     };"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 126,
      "content": "console.error('Error in cleanup:', error);",
      "context": "124:         setUnreadCount(0);\n125:       } catch (error) {\n126:         console.error('Error in cleanup:', error);\n127:       }\n128:     };"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 165,
      "content": "console.error('Error fetching notifications:', error);",
      "context": "163: \n164:       if (error) {\n165:         console.error('Error fetching notifications:', error);\n166:         \n167:         if (forceRefresh) {"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 168,
      "content": "console.log('🔧 Force refresh detected error - checking auth state...');",
      "context": "166:         \n167:         if (forceRefresh) {\n168:           console.log('🔧 Force refresh detected error - checking auth state...');\n169:           // Check if user is properly authenticated\n170:           const { data: authData } = await supabase.auth.getUser();"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 192,
      "content": "console.error('Error fetching notifications:', error);",
      "context": "190:       \n191:     } catch (error) {\n192:       console.error('Error fetching notifications:', error);\n193:       \n194:       if (forceRefresh) {"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 195,
      "content": "console.log('🔧 Force refresh caught error - resetting state');",
      "context": "193:       \n194:       if (forceRefresh) {\n195:         console.log('🔧 Force refresh caught error - resetting state');\n196:         setNotifications([]);\n197:         setUnreadCount(0);"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 223,
      "content": "console.error('Error marking notification as read:', error);",
      "context": "221: \n222:       if (error) {\n223:         console.error('Error marking notification as read:', error);\n224:         // Revert optimistic update on error\n225:         await fetchNotifications(true);"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 231,
      "content": "console.error('Error marking notification as read:', error);",
      "context": "229:       console.log(`✅ Marked notification ${notificationId.slice(0,8)}... as read`);\n230:     } catch (error) {\n231:       console.error('Error marking notification as read:', error);\n232:       // Revert by refetching\n233:       await fetchNotifications(true);"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 252,
      "content": "console.error('Error marking all notifications as read:', error);",
      "context": "250: \n251:       if (error) {\n252:         console.error('Error marking all notifications as read:', error);\n253:         // Revert optimistic update\n254:         await fetchNotifications(true);"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 262,
      "content": "console.error('Error marking all notifications as read:', error);",
      "context": "260:       toast.success('Đã đánh dấu tất cả thông báo là đã đọc');\n261:     } catch (error) {\n262:       console.error('Error marking all notifications as read:', error);\n263:       // Revert by refetching\n264:       await fetchNotifications(true);"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 285,
      "content": "console.error('Error navigating:', error);",
      "context": "283:           window.location.href = notification.action_url!;\n284:         } catch (error) {\n285:           console.error('Error navigating:', error);\n286:         }\n287:       }, 100);"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 365,
      "content": "console.error('Error handling real-time notification:', error);",
      "context": "363:                 }\n364:               } catch (error) {\n365:                 console.error('Error handling real-time notification:', error);\n366:               }\n367:             }"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 400,
      "content": "console.error('Error handling notification update:', error);",
      "context": "398:                 });\n399:               } catch (error) {\n400:                 console.error('Error handling notification update:', error);\n401:               }\n402:             }"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 406,
      "content": "console.error('Error setting up notification subscription:', error);",
      "context": "404:           .subscribe();\n405:       } catch (error) {\n406:         console.error('Error setting up notification subscription:', error);\n407:       }\n408:     };"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 418,
      "content": "console.error('Error unsubscribing:', error);",
      "context": "416:         }\n417:       } catch (error) {\n418:         console.error('Error unsubscribing:', error);\n419:       }\n420:     };"
    },
    {
      "file": "src/components/payment/RefundManager.tsx",
      "line": 62,
      "content": "console.error('Refund error:', error);",
      "context": "60:       onRefundProcessed?.();\n61:     } catch (error) {\n62:       console.error('Refund error:', error);\n63:       toast.error('Có lỗi khi xử lý hoàn tiền');\n64:     } finally {"
    },
    {
      "file": "src/components/profile/DesktopProfilePage.tsx",
      "line": 142,
      "content": "console.error(e);",
      "context": "140:       await refetch();\n141:     } catch (e: any) {\n142:       console.error(e);\n143:       toast.error('Lỗi cập nhật avatar');\n144:     } finally {"
    },
    {
      "file": "src/components/profile/DesktopProfilePage.tsx",
      "line": 205,
      "content": "console.error('❌ [DesktopProfile] Save error:', e);",
      "context": "203:       setActiveTab('basic');\n204:     } catch (e: any) {\n205:       console.error('❌ [DesktopProfile] Save error:', e);\n206:       toast.error(`Lỗi lưu hồ sơ: ${e.message}`);\n207:     } finally {"
    },
    {
      "file": "src/components/profile/EditableProfileForm.tsx",
      "line": 153,
      "content": "console.error('❌ No user ID found');",
      "context": "151:     e.preventDefault();\n152:     if (!user?.id) {\n153:       console.error('❌ No user ID found');\n154:       toast.error('Vui lòng đăng nhập lại');\n155:       return;"
    },
    {
      "file": "src/components/profile/EditableProfileForm.tsx",
      "line": 174,
      "content": "console.error('❌ Supabase update error:', error);",
      "context": "172: \n173:       if (error) {\n174:         console.error('❌ Supabase update error:', error);\n175:         throw error;\n176:       }"
    },
    {
      "file": "src/components/profile/EditableProfileForm.tsx",
      "line": 182,
      "content": "console.error('❌ Profile update failed:', {",
      "context": "180:       onProfileUpdate?.();\n181:     } catch (error: any) {\n182:       console.error('❌ Profile update failed:', {\n183:         error,\n184:         message: error?.message,"
    },
    {
      "file": "src/components/profile/ProfileErrorBoundary.tsx",
      "line": 38,
      "content": "console.error('Profile Error Boundary caught an error:', error, errorInfo);",
      "context": "36: \n37:   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n38:     console.error('Profile Error Boundary caught an error:', error, errorInfo);\n39: \n40:     // Log error for monitoring"
    },
    {
      "file": "src/components/profile/ProfileErrorBoundary.tsx",
      "line": 78,
      "content": "console.warn('onRecover error', e);",
      "context": "76:         this.props.onRecover();\n77:       } catch (e) {\n78:         console.warn('onRecover error', e);\n79:       }\n80:     }"
    },
    {
      "file": "src/components/profile/responsive/ProfileHeader.tsx",
      "line": 54,
      "content": "console.error('Upload error:', error);",
      "context": "52:         window.location.reload();\n53:       } catch (error) {\n54:         console.error('Upload error:', error);\n55:         toast.error('Lỗi khi tải ảnh bìa lên');\n56:       } finally {"
    },
    {
      "file": "src/components/pwa/PWAFeatures.tsx",
      "line": 82,
      "content": "console.error('❌ PWA: Install prompt failed:', error);",
      "context": "80:       setShowPrompt(false);\n81:     } catch (error) {\n82:       console.error('❌ PWA: Install prompt failed:', error);\n83:     }\n84:   };"
    },
    {
      "file": "src/components/pwa/PWAFeatures.tsx",
      "line": 191,
      "content": "console.error('❌ PWA: Service Worker registration failed:', error);",
      "context": "189:         })\n190:         .catch((error) => {\n191:           console.error('❌ PWA: Service Worker registration failed:', error);\n192:         });\n193:     }"
    },
    {
      "file": "src/components/ranking/ELOHistoryChart.tsx",
      "line": 82,
      "content": "console.error('Failed to fetch ELO history:', error);",
      "context": "80:       setEloHistory(transformedData);\n81:     } catch (error) {\n82:       console.error('Failed to fetch ELO history:', error);\n83:     } finally {\n84:       setLoading(false);"
    },
    {
      "file": "src/components/ranking/RankingLeaderboard.tsx",
      "line": 147,
      "content": "console.error('Failed to fetch leaderboard:', error);",
      "context": "145:       setPlayers(mockData);\n146:     } catch (error) {\n147:       console.error('Failed to fetch leaderboard:', error);\n148:     } finally {\n149:       setLoading(false);"
    },
    {
      "file": "src/components/ranking/SPAPointsCard.tsx",
      "line": 86,
      "content": "console.error(",
      "context": "84: \n85:         if (error) {\n86:           console.error(\n87:             '❌ [SPAPointsCard] Error fetching transactions:',\n88:             error"
    },
    {
      "file": "src/components/ranking/SPAPointsCard.tsx",
      "line": 112,
      "content": "console.error(",
      "context": "110:         setRecentTransactions(transformedData);\n111:       } catch (error) {\n112:         console.error(\n113:           '❌ [SPAPointsCard] Failed to fetch SPA transactions:',\n114:           error"
    },
    {
      "file": "src/components/security/CSRFProtection.tsx",
      "line": 54,
      "content": "console.error('CSRF token refresh failed:', error);",
      "context": "52:       }\n53:     } catch (error) {\n54:       console.error('CSRF token refresh failed:', error);\n55:       setIsValid(false);\n56:     }"
    },
    {
      "file": "src/components/test/TestCopyTemplate.tsx",
      "line": 183,
      "content": "console.error('Copy template failed');",
      "context": "181:       } else {\n182:         toast.error('❌ Lỗi khi copy template');\n183:         console.error('Copy template failed');\n184:       }\n185:     } catch (error) {"
    },
    {
      "file": "src/components/test/TestCopyTemplate.tsx",
      "line": 186,
      "content": "console.error('Error copying template:', error);",
      "context": "184:       }\n185:     } catch (error) {\n186:       console.error('Error copying template:', error);\n187:       toast.error('❌ Lỗi: ' + error);\n188:     }"
    },
    {
      "file": "src/components/testing/PerformanceProfiler.tsx",
      "line": 102,
      "content": "console.error('Performance profiling failed:', error);",
      "context": "100:       setLastRun(new Date());\n101:     } catch (error) {\n102:       console.error('Performance profiling failed:', error);\n103:     }\n104: "
    },
    {
      "file": "src/components/testing/TournamentEndToEndTest.tsx",
      "line": 296,
      "content": "console.error('E2E test failed:', error);",
      "context": "294:       setOverallResult('success');\n295:     } catch (error) {\n296:       console.error('E2E test failed:', error);\n297:       const currentStep = testSteps.findIndex(\n298:         step => step.status === 'running'"
    },
    {
      "file": "src/components/testing/TournamentIntegrityChecker.tsx",
      "line": 167,
      "content": "console.error('Integrity check failed:', error);",
      "context": "165:       setLastCheck(new Date());\n166:     } catch (error) {\n167:       console.error('Integrity check failed:', error);\n168:       setIssues([\n169:         {"
    },
    {
      "file": "src/components/tournament/AutoFillButton.tsx",
      "line": 56,
      "content": "console.error('Error fetching club profile:', clubError);",
      "context": "54: \n55:       if (clubError && clubError.code !== 'PGRST116') {\n56:         console.error('Error fetching club profile:', clubError);\n57:       }\n58: "
    },
    {
      "file": "src/components/tournament/AutoFillButton.tsx",
      "line": 67,
      "content": "console.error('Error fetching user profile:', profileError);",
      "context": "65: \n66:       if (profileError) {\n67:         console.error('Error fetching user profile:', profileError);\n68:       }\n69: "
    },
    {
      "file": "src/components/tournament/AutoFillButton.tsx",
      "line": 125,
      "content": "console.error('Auto-fill error:', error);",
      "context": "123:       });\n124:     } catch (error) {\n125:       console.error('Auto-fill error:', error);\n126:       toast({\n127:         title: 'Lỗi tự động điền',"
    },
    {
      "file": "src/components/tournament/BracketMatch.tsx",
      "line": 90,
      "content": "console.error('Error updating score:', error);",
      "context": "88:       onUpdate?.();\n89:     } catch (error: any) {\n90:       console.error('Error updating score:', error);\n91:       toast.error('Không thể cập nhật tỷ số: ' + error.message);\n92:     } finally {"
    },
    {
      "file": "src/components/tournament/BracketVisualization.tsx",
      "line": 130,
      "content": "console.error('Error fetching registrations:', regError);",
      "context": "128: \n129:       if (regError) {\n130:         console.error('Error fetching registrations:', regError);\n131:       }\n132: "
    },
    {
      "file": "src/components/tournament/BracketVisualization.tsx",
      "line": 144,
      "content": "console.error('Error fetching profiles:', profileError);",
      "context": "142: \n143:         if (profileError) {\n144:           console.error('Error fetching profiles:', profileError);\n145:         } else {\n146:           profiles = profileData || [];"
    },
    {
      "file": "src/components/tournament/BracketVisualization.tsx",
      "line": 183,
      "content": "console.error('Error fetching matches:', matchesError);",
      "context": "181: \n182:       if (matchesError) {\n183:         console.error('Error fetching matches:', matchesError);\n184:       }\n185: "
    },
    {
      "file": "src/components/tournament/BracketVisualization.tsx",
      "line": 212,
      "content": "console.error('Error fetching bracket:', bracketError);",
      "context": "210: \n211:       if (bracketError && bracketError.code !== 'PGRST116') {\n212:         console.error('Error fetching bracket:', bracketError);\n213:       }\n214: "
    },
    {
      "file": "src/components/tournament/BracketVisualization.tsx",
      "line": 238,
      "content": "console.error('Error fetching bracket data:', error);",
      "context": "236:       console.log('✅ Matches loaded:', enhancedMatches.length);\n237:     } catch (error) {\n238:       console.error('Error fetching bracket data:', error);\n239:     } finally {\n240:       setLoading(false);"
    },
    {
      "file": "src/components/tournament/DoubleEliminationMatchCard.tsx",
      "line": 452,
      "content": "console.error(",
      "context": "450: \n451:                   if (error) {\n452:                     console.error(\n453:                       '❌ [DoubleEliminationMatchCard] RPC Error:',\n454:                       error"
    },
    {
      "file": "src/components/tournament/DoubleEliminationMatchCard.tsx",
      "line": 470,
      "content": "console.error(",
      "context": "468:                     data.error\n469:                   ) {\n470:                     console.error(\n471:                       '❌ [DoubleEliminationMatchCard] RPC returned error:',\n472:                       data.error"
    },
    {
      "file": "src/components/tournament/DoubleEliminationMatchCard.tsx",
      "line": 509,
      "content": "console.error('Error updating score:', error);",
      "context": "507:                   }, 500);\n508:                 } catch (error) {\n509:                   console.error('Error updating score:', error);\n510:                   toast.error('Có lỗi khi cập nhật tỷ số. Vui lòng thử lại.');\n511:                 } finally {"
    },
    {
      "file": "src/components/tournament/EditScoreModal.tsx",
      "line": 80,
      "content": "console.error('Edit score error:', error);",
      "context": "78:       setShowConfirmation(false);\n79:     } catch (error) {\n80:       console.error('Edit score error:', error);\n81:     }\n82:   };"
    },
    {
      "file": "src/components/tournament/EditTournamentModal.tsx",
      "line": 207,
      "content": "console.error('Error fetching prize tiers:', error);",
      "context": "205:       setPrizeTiers(data || []);\n206:     } catch (error) {\n207:       console.error('Error fetching prize tiers:', error);\n208:       toast.error('Failed to load prize tiers');\n209:     }"
    },
    {
      "file": "src/components/tournament/EditTournamentModal.tsx",
      "line": 253,
      "content": "console.error('Error updating tournament:', error);",
      "context": "251:       toast.success('Tournament updated successfully!');\n252:     } catch (error) {\n253:       console.error('Error updating tournament:', error);\n254:       toast.error('Failed to update tournament');\n255:     } finally {"
    },
    {
      "file": "src/components/tournament/EditTournamentModal.tsx",
      "line": 287,
      "content": "console.error('Error adding prize tier:', error);",
      "context": "285:       toast.success('Prize tier added!');\n286:     } catch (error) {\n287:       console.error('Error adding prize tier:', error);\n288:       toast.error('Failed to add prize tier');\n289:     }"
    },
    {
      "file": "src/components/tournament/EditTournamentModal.tsx",
      "line": 303,
      "content": "console.error('Error updating prize tier:', error);",
      "context": "301:       toast.success('Prize tier updated!');\n302:     } catch (error) {\n303:       console.error('Error updating prize tier:', error);\n304:       toast.error('Failed to update prize tier');\n305:     }"
    },
    {
      "file": "src/components/tournament/EditTournamentModal.tsx",
      "line": 319,
      "content": "console.error('Error deleting prize tier:', error);",
      "context": "317:       toast.success('Prize tier deleted!');\n318:     } catch (error) {\n319:       console.error('Error deleting prize tier:', error);\n320:       toast.error('Failed to delete prize tier');\n321:     }"
    },
    {
      "file": "src/components/tournament/EmergencyMatchCompletion.tsx",
      "line": 105,
      "content": "console.error('Emergency completion error:', error);",
      "context": "103:       }\n104:     } catch (error: any) {\n105:       console.error('Emergency completion error:', error);\n106:       toast.error(error.message || 'Có lỗi xảy ra khi hoàn thành trận đấu');\n107:     } finally {"
    },
    {
      "file": "src/components/tournament/EnhancedBracketViewer.tsx",
      "line": 153,
      "content": "console.error('Error loading bracket:', error);",
      "context": "151:       setMatches(transformedMatches);\n152:     } catch (error) {\n153:       console.error('Error loading bracket:', error);\n154:       toast.error('Không thể tải dữ liệu bảng đấu');\n155:     } finally {"
    },
    {
      "file": "src/components/tournament/EnhancedMatchCard.tsx",
      "line": 446,
      "content": "console.error(",
      "context": "444: \n445:                   if (error) {\n446:                     console.error(\n447:                       '❌ [EnhancedMatchCard] Error calling submit_match_score RPC:',\n448:                       error"
    },
    {
      "file": "src/components/tournament/EnhancedMatchCard.tsx",
      "line": 477,
      "content": "console.error('Error updating score:', error);",
      "context": "475:                   }\n476:                 } catch (error) {\n477:                   console.error('Error updating score:', error);\n478:                   toast.error('Có lỗi khi cập nhật tỷ số. Vui lòng thử lại.');\n479:                 } finally {"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 141,
      "content": "console.error('Error fetching tournaments:', error);",
      "context": "139:       setTournaments(data || []);\n140:     } catch (error) {\n141:       console.error('Error fetching tournaments:', error);\n142:       toast.error('Không thể tải danh sách giải đấu');\n143:     } finally {"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 160,
      "content": "console.error('Error fetching club ID:', error);",
      "context": "158:       }\n159:     } catch (error) {\n160:       console.error('Error fetching club ID:', error);\n161:     }\n162:   };"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 277,
      "content": "console.error('Error fetching tables:', error);",
      "context": "275:       setTables(enhancedTables);\n276:     } catch (error) {\n277:       console.error('Error fetching tables:', error);\n278:       toast.error('Không thể tải danh sách bàn');\n279:     } finally {"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 393,
      "content": "console.error('Error fetching pending matches:', error);",
      "context": "391:       setPendingMatches(enhancedMatches);\n392:     } catch (error) {\n393:       console.error('Error fetching pending matches:', error);\n394:     }\n395:   };"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 422,
      "content": "console.error('Error assigning match to table:', error);",
      "context": "420:       }\n421:     } catch (error) {\n422:       console.error('Error assigning match to table:', error);\n423:       toast.error('Không thể gán trận đấu vào bàn');\n424:     } finally {"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 469,
      "content": "console.log('📋 Assignment response:', { data, error });",
      "context": "467:       );\n468: \n469:       console.log('📋 Assignment response:', { data, error });\n470: \n471:       if (error) throw error;"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 505,
      "content": "console.error('❌ Error auto-assigning matches:', error);",
      "context": "503:       }\n504:     } catch (error) {\n505:       console.error('❌ Error auto-assigning matches:', error);\n506:       toast.error(`Không thể tự động gán trận đấu: ${error.message}`);\n507:     } finally {"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 542,
      "content": "console.error('Error initializing tables:', error);",
      "context": "540:       }\n541:     } catch (error) {\n542:       console.error('Error initializing tables:', error);\n543:       toast.error('Không thể khởi tạo bàn');\n544:     } finally {"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentBracket.tsx",
      "line": 236,
      "content": "console.error('Error loading profiles:', profilesError);",
      "context": "234: \n235:           if (profilesError) {\n236:             console.error('Error loading profiles:', profilesError);\n237:           } else {\n238:             participantProfiles = profilesData || [];"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentBracket.tsx",
      "line": 262,
      "content": "console.error('Error fetching tournament data:', error);",
      "context": "260:       setParticipants(transformedParticipants);\n261:     } catch (error) {\n262:       console.error('Error fetching tournament data:', error);\n263:       toast({\n264:         title: 'Lỗi',"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentBracket.tsx",
      "line": 324,
      "content": "console.error('Error generating bracket:', error);",
      "context": "322:       fetchTournamentData();\n323:     } catch (error) {\n324:       console.error('Error generating bracket:', error);\n325:       toast({\n326:         title: 'Lỗi',"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentBracket.tsx",
      "line": 367,
      "content": "console.error('Error updating match result:', error);",
      "context": "365:       fetchTournamentData();\n366:     } catch (error) {\n367:       console.error('Error updating match result:', error);\n368:       toast({\n369:         title: 'Lỗi',"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentBracket.tsx",
      "line": 393,
      "content": "console.error('Error starting match:', error);",
      "context": "391:       });\n392:     } catch (error) {\n393:       console.error('Error starting match:', error);\n394:       toast({\n395:         title: 'Lỗi',"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 130,
      "content": "console.error('❌ Error parsing saved draft:', err);",
      "context": "128:         console.log('📋 Restored form draft from localStorage');\n129:       } catch (err) {\n130:         console.error('❌ Error parsing saved draft:', err);\n131:         localStorage.removeItem('tournament-form-draft');\n132:       }"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 246,
      "content": "console.error('❌ Validation failed');",
      "context": "244: \n245:       if (!validationResult) {\n246:         console.error('❌ Validation failed');\n247:         console.error('❌ Validation errors:', validationErrors);\n248:         console.error('❌ Tournament data:', tournament);"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 247,
      "content": "console.error('❌ Validation errors:', validationErrors);",
      "context": "245:       if (!validationResult) {\n246:         console.error('❌ Validation failed');\n247:         console.error('❌ Validation errors:', validationErrors);\n248:         console.error('❌ Tournament data:', tournament);\n249: "
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 248,
      "content": "console.error('❌ Tournament data:', tournament);",
      "context": "246:         console.error('❌ Validation failed');\n247:         console.error('❌ Validation errors:', validationErrors);\n248:         console.error('❌ Tournament data:', tournament);\n249: \n250:         // Display specific validation errors"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 306,
      "content": "console.error(",
      "context": "304: \n305:             if (templateError) {\n306:               console.error(\n307:                 '❌ Error creating tournament results template:',\n308:                 templateError"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 318,
      "content": "console.error(",
      "context": "316:             }\n317:           } catch (templateErr) {\n318:             console.error(\n319:               '❌ Error creating tournament results template:',\n320:               templateErr"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 345,
      "content": "console.error('❌ createTournament returned null');",
      "context": "343:         onSuccess?.(result);\n344:       } else {\n345:         console.error('❌ createTournament returned null');\n346:         toast.error('Không thể tạo giải đấu - vui lòng thử lại');\n347:       }"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 349,
      "content": "console.error('💥 Error in handleSubmit:', error);",
      "context": "347:       }\n348:     } catch (error) {\n349:       console.error('💥 Error in handleSubmit:', error);\n350:       const errorMessage =\n351:         error instanceof Error"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1089,
      "content": "console.error('❌ Tournament creation error:', error);",
      "context": "1087: \n1088:                   if (error) {\n1089:                     console.error('❌ Tournament creation error:', error);\n1090:                     toast.error('Lỗi tạo giải đấu: ' + error.message);\n1091:                     return;"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1095,
      "content": "console.error('❌ No tournament data returned');",
      "context": "1093: \n1094:                   if (!data || !data[0]) {\n1095:                     console.error('❌ No tournament data returned');\n1096:                     toast.error('Không thể tạo giải đấu');\n1097:                     return;"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1187,
      "content": "console.error('❌ Prize creation failed:', errorText);",
      "context": "1185:                   if (!response.ok) {\n1186:                     const errorText = await response.text();\n1187:                     console.error('❌ Prize creation failed:', errorText);\n1188:                     toast.warning(`Giải đấu đã tạo nhưng có lỗi khi tạo phần thưởng: ${errorText}`);\n1189:                   } else {"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1205,
      "content": "console.error('❌ Unexpected error:', err);",
      "context": "1203: \n1204:                 } catch (err) {\n1205:                   console.error('❌ Unexpected error:', err);\n1206:                   toast.error('Lỗi không mong muốn: ' + (err as Error).message);\n1207:                 }"
    },
    {
      "file": "src/components/tournament/ForceCompleteTournamentButton.tsx",
      "line": 57,
      "content": "console.error('❌ Error calculating tournament results:', error);",
      "context": "55: \n56:       if (error) {\n57:         console.error('❌ Error calculating tournament results:', error);\n58:         throw error;\n59:       }"
    },
    {
      "file": "src/components/tournament/ForceCompleteTournamentButton.tsx",
      "line": 82,
      "content": "console.error('💥 Error calculating tournament results:', error);",
      "context": "80:       }\n81:     } catch (error) {\n82:       console.error('💥 Error calculating tournament results:', error);\n83:       toast.error('Lỗi khi tính toán kết quả giải đấu');\n84:       throw error;"
    },
    {
      "file": "src/components/tournament/ForceCompleteTournamentButton.tsx",
      "line": 112,
      "content": "console.error('💥 Error completing tournament:', error);",
      "context": "110:       }, 2000);\n111:     } catch (error) {\n112:       console.error('💥 Error completing tournament:', error);\n113:       toast.error('Lỗi hệ thống khi hoàn thành giải đấu');\n114:     } finally {"
    },
    {
      "file": "src/components/tournament/ForceStartTournamentButton.tsx",
      "line": 74,
      "content": "console.error('Failed to force start tournament:', error);",
      "context": "72:       onStatusChanged?.();\n73:     } catch (error) {\n74:       console.error('Failed to force start tournament:', error);\n75:       toast.error('Có lỗi xảy ra khi bắt đầu giải đấu');\n76:     } finally {"
    },
    {
      "file": "src/components/tournament/ManualResultsGenerator.tsx",
      "line": 57,
      "content": "console.error('Error generating tournament results:', error);",
      "context": "55:       }\n56:     } catch (error: any) {\n57:       console.error('Error generating tournament results:', error);\n58:       toast({\n59:         variant: 'destructive',"
    },
    {
      "file": "src/components/tournament/MatchManagement.tsx",
      "line": 66,
      "content": "console.error('Error fetching matches:', error);",
      "context": "64:       setMatches((data as any[]) || []);\n65:     } catch (error) {\n66:       console.error('Error fetching matches:', error);\n67:       toast.error('Lỗi khi tải danh sách trận đấu');\n68:     } finally {"
    },
    {
      "file": "src/components/tournament/MatchManagement.tsx",
      "line": 133,
      "content": "console.error('Error updating match:', error);",
      "context": "131:       }, 1000); // Small delay to allow database triggers to complete\n132:     } catch (error) {\n133:       console.error('Error updating match:', error);\n134:       toast.error('Lỗi khi cập nhật kết quả trận đấu');\n135:     } finally {"
    },
    {
      "file": "src/components/tournament/OptimizedTournamentCard.tsx",
      "line": 68,
      "content": "console.error('Error getting participant count:', countError);",
      "context": "66: \n67:         if (countError) {\n68:           console.error('Error getting participant count:', countError);\n69:         } else {\n70:           setCurrentParticipants(allRegistrations?.length || 0);"
    },
    {
      "file": "src/components/tournament/OptimizedTournamentCard.tsx",
      "line": 83,
      "content": "console.error('Error checking registration:', error);",
      "context": "81: \n82:           if (error && error.code !== 'PGRST116') {\n83:             console.error('Error checking registration:', error);\n84:             return;\n85:           }"
    },
    {
      "file": "src/components/tournament/OptimizedTournamentCard.tsx",
      "line": 92,
      "content": "console.error('Error checking registration:', error);",
      "context": "90:         }\n91:       } catch (error) {\n92:         console.error('Error checking registration:', error);\n93:       } finally {\n94:         setCheckingRegistration(false);"
    },
    {
      "file": "src/components/tournament/OptimizedTournamentCard.tsx",
      "line": 175,
      "content": "console.error('Error fetching tournament rewards:', error);",
      "context": "173:         });\n174:       } catch (error) {\n175:         console.error('Error fetching tournament rewards:', error);\n176:         // Use fallback calculation\n177:         const fallbackInfo = calculatePrizeInfo();"
    },
    {
      "file": "src/components/tournament/OptimizedTournamentCard.tsx",
      "line": 237,
      "content": "if (spaError) console.error('SPA penalty error:', spaError);",
      "context": "235:         .eq('user_id', user.id);\n236: \n237:       if (spaError) console.error('SPA penalty error:', spaError);\n238: \n239:       // Log the penalty"
    },
    {
      "file": "src/components/tournament/OptimizedTournamentCard.tsx",
      "line": 252,
      "content": "console.error('Unregister error:', error);",
      "context": "250:       toast.success('Đã hủy đăng ký thành công. Bạn bị trừ 20 điểm SPA.');\n251:     } catch (error: any) {\n252:       console.error('Unregister error:', error);\n253:       toast.error('Có lỗi xảy ra khi hủy đăng ký: ' + error.message);\n254:     } finally {"
    },
    {
      "file": "src/components/tournament/PendingRegistrationsPanel.tsx",
      "line": 45,
      "content": "console.error('Error loading pending registrations:', error);",
      "context": "43:       setPendingRegistrations(data || []);\n44:     } catch (error) {\n45:       console.error('Error loading pending registrations:', error);\n46:       toast.error('Không thể tải danh sách đăng ký chờ xác nhận');\n47:     } finally {"
    },
    {
      "file": "src/components/tournament/RewardsEditModal.tsx",
      "line": 238,
      "content": "console.error('Failed to save rewards:', error);",
      "context": "236:       console.log('🔍 RewardsEditModal - Save successful');\n237:     } catch (error) {\n238:       console.error('Failed to save rewards:', error);\n239:       // Error handled by parent component\n240:     } finally {"
    },
    {
      "file": "src/components/tournament/SABO32BracketViewer.tsx",
      "line": 98,
      "content": "console.error('Error during refresh:', error);",
      "context": "96:       \n97:     } catch (error) {\n98:       console.error('Error during refresh:', error);\n99:       // Still restore scroll even on error\n100:       restoreScrollState(scrollState);"
    },
    {
      "file": "src/components/tournament/SABO32BracketViewer.tsx",
      "line": 150,
      "content": "console.error('Error fetching SABO-32 matches:', err);",
      "context": "148:       setMatches(matchesWithProfiles);\n149:     } catch (err) {\n150:       console.error('Error fetching SABO-32 matches:', err);\n151:       setError(err instanceof Error ? err.message : 'Unknown error');\n152:     } finally {"
    },
    {
      "file": "src/components/tournament/SimpleRegistrationModal.tsx",
      "line": 60,
      "content": "console.error('Error checking existing registration:', checkError);",
      "context": "58: \n59:       if (checkError) {\n60:         console.error('Error checking existing registration:', checkError);\n61:         throw checkError;\n62:       }"
    },
    {
      "file": "src/components/tournament/SimpleRegistrationModal.tsx",
      "line": 110,
      "content": "console.error('❌ Registration error:', error);",
      "context": "108:       onClose();\n109:     } catch (error: any) {\n110:       console.error('❌ Registration error:', error);\n111:       toast.error('Lỗi đăng ký: ' + error.message);\n112:     } finally {"
    },
    {
      "file": "src/components/tournament/SingleEliminationMatchCard.tsx",
      "line": 346,
      "content": "console.error(",
      "context": "344: \n345:                   if (error) {\n346:                     console.error(\n347:                       '❌ Error calling update_match_score_safe:',\n348:                       error"
    },
    {
      "file": "src/components/tournament/SingleEliminationMatchCard.tsx",
      "line": 359,
      "content": "console.error('❌ Function returned error:', data.error);",
      "context": "357:                     data.error\n358:                   ) {\n359:                     console.error('❌ Function returned error:', data.error);\n360:                     throw new Error(data.error as string);\n361:                   }"
    },
    {
      "file": "src/components/tournament/SingleEliminationMatchCard.tsx",
      "line": 369,
      "content": "console.error('Error updating score:', error);",
      "context": "367:                   console.log('🔄 Trusting real-time updates to refresh UI');\n368:                 } catch (error) {\n369:                   console.error('Error updating score:', error);\n370:                   toast.error('Có lỗi khi cập nhật tỷ số. Vui lòng thử lại.');\n371:                 } finally {"
    },
    {
      "file": "src/components/tournament/TableAssignmentDisplay.tsx",
      "line": 101,
      "content": "console.error('Error fetching table status:', error);",
      "context": "99:       setTables((data as any[]) || []);\n100:     } catch (error) {\n101:       console.error('Error fetching table status:', error);\n102:       toast.error('Lỗi khi tải trạng thái bàn chơi');\n103:     } finally {"
    },
    {
      "file": "src/components/tournament/TableAssignmentDisplay.tsx",
      "line": 136,
      "content": "console.error('Error fetching available matches:', error);",
      "context": "134:       setAvailableMatches(data || []);\n135:     } catch (error) {\n136:       console.error('Error fetching available matches:', error);\n137:     }\n138:   };"
    },
    {
      "file": "src/components/tournament/TableAssignmentDisplay.tsx",
      "line": 159,
      "content": "console.error('Error initializing tables:', error);",
      "context": "157:       await fetchTableStatus();\n158:     } catch (error) {\n159:       console.error('Error initializing tables:', error);\n160:       toast.error('Lỗi khi khởi tạo bàn chơi');\n161:     } finally {"
    },
    {
      "file": "src/components/tournament/TableAssignmentDisplay.tsx",
      "line": 190,
      "content": "console.error('Error auto-assigning tables:', error);",
      "context": "188:       await fetchAvailableMatches();\n189:     } catch (error) {\n190:       console.error('Error auto-assigning tables:', error);\n191:       toast.error('Lỗi khi tự động phân bàn');\n192:     } finally {"
    },
    {
      "file": "src/components/tournament/TableAssignmentDisplay.tsx",
      "line": 222,
      "content": "console.error('Error manually assigning table:', error);",
      "context": "220:       setSelectedTable('');\n221:     } catch (error) {\n222:       console.error('Error manually assigning table:', error);\n223:       toast.error('Lỗi khi phân bàn thủ công');\n224:     } finally {"
    },
    {
      "file": "src/components/tournament/TableAssignmentDisplay.tsx",
      "line": 248,
      "content": "console.error('Error releasing table:', error);",
      "context": "246:       await fetchTableStatus();\n247:     } catch (error) {\n248:       console.error('Error releasing table:', error);\n249:       toast.error('Lỗi khi giải phóng bàn');\n250:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentAutomationStatus.tsx",
      "line": 107,
      "content": "console.error('Error fetching match status:', error);",
      "context": "105:       }\n106:     } catch (error) {\n107:       console.error('Error fetching match status:', error);\n108:       toast.error('Lỗi khi tải trạng thái trận đấu');\n109:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentAutomationTest.tsx",
      "line": 116,
      "content": "console.error('Test automation error:', error);",
      "context": "114:       }, 2000);\n115:     } catch (error) {\n116:       console.error('Test automation error:', error);\n117:       setTestResults(prev => [...prev, `❌ Error: ${error.message}`]);\n118:       toast.error('Lỗi khi test automation');"
    },
    {
      "file": "src/components/tournament/TournamentAutomationTest.tsx",
      "line": 144,
      "content": "console.error('Reset error:', error);",
      "context": "142:       toast.success('✅ Test data đã được reset');\n143:     } catch (error) {\n144:       console.error('Reset error:', error);\n145:       toast.error('Lỗi khi reset test data');\n146:     }"
    },
    {
      "file": "src/components/tournament/TournamentBracketDisplay.tsx",
      "line": 64,
      "content": "console.error('Error fetching matches:', error);",
      "context": "62:       setMatches((data || []) as unknown as Match[]);\n63:     } catch (error) {\n64:       console.error('Error fetching matches:', error);\n65:     } finally {\n66:       setLoading(false);"
    },
    {
      "file": "src/components/tournament/TournamentBracketFlow.tsx",
      "line": 56,
      "content": "console.error('Error loading bracket info:', error);",
      "context": "54:       setSeeding(seedingData);\n55:     } catch (error) {\n56:       console.error('Error loading bracket info:', error);\n57:     } finally {\n58:       setLoading(false);"
    },
    {
      "file": "src/components/tournament/TournamentBracketFlow.tsx",
      "line": 86,
      "content": "console.error('Error starting tournament:', error);",
      "context": "84:       window.location.reload(); // Refresh to update tournament status\n85:     } catch (error) {\n86:       console.error('Error starting tournament:', error);\n87:       toast.error('Lỗi khi bắt đầu giải đấu');\n88:     }"
    },
    {
      "file": "src/components/tournament/TournamentBroadcasting.tsx",
      "line": 108,
      "content": "console.error('Error fetching live tournaments:', error);",
      "context": "106:       }\n107:     } catch (error) {\n108:       console.error('Error fetching live tournaments:', error);\n109:       toast.error('Lỗi khi tải giải đấu trực tiếp');\n110:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentCompletionButton.tsx",
      "line": 52,
      "content": "console.error('❌ Tournament completion failed:', error);",
      "context": "50: \n51:       if (error) {\n52:         console.error('❌ Tournament completion failed:', error);\n53:         toast.error(`Lỗi hoàn thành giải đấu: ${error.message}`);\n54:         return;"
    },
    {
      "file": "src/components/tournament/TournamentCompletionButton.tsx",
      "line": 80,
      "content": "console.error('💥 Error completing tournament:', error);",
      "context": "78:       }\n79:     } catch (error) {\n80:       console.error('💥 Error completing tournament:', error);\n81:       toast.error('Lỗi hệ thống khi hoàn thành giải đấu');\n82:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentControlPanel.tsx",
      "line": 96,
      "content": "console.error('Error starting tournament:', error);",
      "context": "94:       refetchMatches();\n95:     } catch (error: any) {\n96:       console.error('Error starting tournament:', error);\n97:       toast.error('Lỗi bắt đầu giải đấu: ' + error.message);\n98:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentControlPanel.tsx",
      "line": 120,
      "content": "console.error('Error recovering automation:', error);",
      "context": "118:       refetchMatches();\n119:     } catch (error: any) {\n120:       console.error('Error recovering automation:', error);\n121:       toast.error('Lỗi khôi phục automation: ' + error.message);\n122:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentDataSyncButton.tsx",
      "line": 63,
      "content": "console.error('❌ Tournament sync error:', error);",
      "context": "61:       }\n62:     } catch (error) {\n63:       console.error('❌ Tournament sync error:', error);\n64:       toast.error(`Lỗi đồng bộ dữ liệu: ${error.message}`);\n65:       setSyncResult({ success: false, error: error.message });"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 169,
      "content": "console.error('Error loading club data:', error);",
      "context": "167:       }\n168:     } catch (error) {\n169:       console.error('Error loading club data:', error);\n170:     } finally {\n171:       setLoading(false);"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 185,
      "content": "console.error('Error fetching club ID:', error);",
      "context": "183: \n184:       if (error) {\n185:         console.error('Error fetching club ID:', error);\n186:         return null;\n187:       }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 190,
      "content": "console.error('Error fetching club ID:', error);",
      "context": "188:       return data?.id || null;\n189:     } catch (error) {\n190:       console.error('Error fetching club ID:', error);\n191:       return null;\n192:     }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 234,
      "content": "console.error('Error loading tournaments:', error);",
      "context": "232: \n233:     } catch (error) {\n234:       console.error('Error loading tournaments:', error);\n235:       toast.error('Không thể tải danh sách giải đấu');\n236:     }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 346,
      "content": "console.error('Error loading participants:', error);",
      "context": "344:       \n345:     } catch (error) {\n346:       console.error('Error loading participants:', error);\n347:       toast.error('Lỗi khi tải danh sách người tham gia');\n348:     }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 413,
      "content": "console.error('Error loading tournament matches:', error);",
      "context": "411:       setExistingMatches(enhancedMatches);\n412:     } catch (error) {\n413:       console.error('Error loading tournament matches:', error);\n414:       toast.error('Lỗi khi tải dữ liệu bảng đấu');\n415:     }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 447,
      "content": "console.error('Error auto-assigning tables:', error);",
      "context": "445:       }\n446:     } catch (error) {\n447:       console.error('Error auto-assigning tables:', error);\n448:       toast.error('Không thể tự động phân bàn');\n449:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 523,
      "content": "console.error('Error submitting score:', error);",
      "context": "521:       }\n522:     } catch (error) {\n523:       console.error('Error submitting score:', error);\n524:       toast.error('Lỗi khi gửi tỷ số: ' + (error as any)?.message);\n525:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 583,
      "content": "console.error('Error in SABO tournament advancement:', error);",
      "context": "581:         }\n582:       } catch (error) {\n583:         console.error('Error in SABO tournament advancement:', error);\n584:       }\n585:       "
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 591,
      "content": "console.error('Error confirming score:', error);",
      "context": "589:       }\n590:     } catch (error) {\n591:       console.error('Error confirming score:', error);\n592:       toast.error('Lỗi khi xác nhận tỷ số');\n593:     }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 617,
      "content": "console.error('Error disputing score:', error);",
      "context": "615:       }\n616:     } catch (error) {\n617:       console.error('Error disputing score:', error);\n618:       toast.error('Lỗi khi phản đối tỷ số');\n619:     }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 650,
      "content": "console.error('Supabase error:', registrationsError);",
      "context": "648: \n649:       if (registrationsError) {\n650:         console.error('Supabase error:', registrationsError);\n651:         throw registrationsError;\n652:       }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 675,
      "content": "console.error('Error loading profiles:', profilesError);",
      "context": "673: \n674:         if (profilesError) {\n675:           console.error('Error loading profiles:', profilesError);\n676:         }\n677: "
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 686,
      "content": "console.error('Error loading tournament:', tournamentError);",
      "context": "684: \n685:         if (tournamentError) {\n686:           console.error('Error loading tournament:', tournamentError);\n687:         }\n688: "
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 701,
      "content": "console.error('Error loading participants:', error);",
      "context": "699:       setParticipantsModalOpen(true);\n700:     } catch (error) {\n701:       console.error('Error loading participants:', error);\n702:       toast.error('Lỗi khi tải danh sách thành viên: ' + (error as any)?.message);\n703:     }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 730,
      "content": "console.error('Error confirming participant:', error);",
      "context": "728:       }\n729:     } catch (error) {\n730:       console.error('Error confirming participant:', error);\n731:       toast.error('Lỗi khi xác nhận thành viên');\n732:     }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 753,
      "content": "console.error('Error confirming payment:', error);",
      "context": "751:       }\n752:     } catch (error) {\n753:       console.error('Error confirming payment:', error);\n754:       toast.error('Lỗi khi xác nhận thanh toán');\n755:     }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 773,
      "content": "console.error('Error closing registration:', error);",
      "context": "771:       await loadTournaments();\n772:     } catch (error) {\n773:       console.error('Error closing registration:', error);\n774:       toast.error('Lỗi khi đóng đăng ký');\n775:     }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 793,
      "content": "console.error('Error opening registration:', error);",
      "context": "791:       await loadTournaments();\n792:     } catch (error) {\n793:       console.error('Error opening registration:', error);\n794:       toast.error('Lỗi khi mở đăng ký');\n795:     }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 1029,
      "content": "console.error('Direct bracket generation failed:', error);",
      "context": "1027:                         }\n1028:                       } catch (error) {\n1029:                         console.error('Direct bracket generation failed:', error);\n1030:                         // Fallback to generator form\n1031:                         handleGenerateBracket(tournament);"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 1579,
      "content": "console.log('Edge function failed, using fallback:', edgeError);",
      "context": "1577:                                          error = edgeResponse.error;\n1578:                                        } catch (edgeError) {\n1579:                                          console.log('Edge function failed, using fallback:', edgeError);\n1580:                                          // Use fallback function\n1581:                                          const { generateBracketFallback } = await import('@/utils/bracketFallback');"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 1587,
      "content": "console.error('Edge function error:', error);",
      "context": "1585:                                        \n1586:                                        if (error) {\n1587:                                          console.error('Edge function error:', error);\n1588:                                          // Try fallback\n1589:                                          console.log('Trying fallback bracket generation...');"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 1595,
      "content": "console.error('Bracket generation error:', result.error);",
      "context": "1593:                                        \n1594:                                        if (result?.error) {\n1595:                                          console.error('Bracket generation error:', result.error);\n1596:                                          toast.error(`Lỗi tạo bảng đấu: ${result.error}`);\n1597:                                          return;"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 1609,
      "content": "console.error('Error generating double elimination bracket:', error);",
      "context": "1607:                                        }\n1608:                                      } catch (error) {\n1609:                                        console.error('Error generating double elimination bracket:', error);\n1610:                                        toast.error('Lỗi khi tạo bảng đấu Double Elimination');\n1611:                                      } finally {"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 1653,
      "content": "console.error('Repair function error:', error);",
      "context": "1651:                                        \n1652:                                        if (error) {\n1653:                                          console.error('Repair function error:', error);\n1654:                                          toast.error('Lỗi khi sửa chữa bảng đấu');\n1655:                                          return;"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 1659,
      "content": "console.error('Repair error:', result.error);",
      "context": "1657:                                        \n1658:                                        if (result?.error) {\n1659:                                          console.error('Repair error:', result.error);\n1660:                                          toast.error(result.error);\n1661:                                          return;"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 1669,
      "content": "console.error('Error repairing double elimination:', error);",
      "context": "1667:                                        }\n1668:                                      } catch (error) {\n1669:                                        console.error('Error repairing double elimination:', error);\n1670:                                        toast.error('Lỗi khi sửa chữa bảng đấu');\n1671:                                      } finally {"
    },
    {
      "file": "src/components/tournament/TournamentParticipantsList.tsx",
      "line": 84,
      "content": "console.error('Error fetching profiles:', profilesError);",
      "context": "82: \n83:         if (profilesError) {\n84:           console.error('Error fetching profiles:', profilesError);\n85:         } else {\n86:           profilesData = profiles || [];"
    },
    {
      "file": "src/components/tournament/TournamentParticipantsList.tsx",
      "line": 110,
      "content": "console.error('Error fetching participants:', error);",
      "context": "108:       setParticipants(transformedParticipants);\n109:     } catch (error) {\n110:       console.error('Error fetching participants:', error);\n111:       toast.error('Không thể tải danh sách người tham gia');\n112:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentParticipantsList.tsx",
      "line": 195,
      "content": "console.error('Error confirming payment:', error);",
      "context": "193:       fetchParticipants(); // Refresh data\n194:     } catch (error) {\n195:       console.error('Error confirming payment:', error);\n196:       toast.error('Có lỗi khi xác nhận thanh toán');\n197:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentParticipantsList.tsx",
      "line": 274,
      "content": "console.error('Error finalizing registration:', error);",
      "context": "272:       fetchParticipants();\n273:     } catch (error) {\n274:       console.error('Error finalizing registration:', error);\n275:       toast.error('Có lỗi khi chốt sổ');\n276:     }"
    },
    {
      "file": "src/components/tournament/TournamentPlayerAvatar.tsx",
      "line": 53,
      "content": "console.error('❌ Profile fetch error:', profileError);",
      "context": "51: \n52:       if (profileError) {\n53:         console.error('❌ Profile fetch error:', profileError);\n54:         throw profileError;\n55:       }"
    },
    {
      "file": "src/components/tournament/TournamentPlayerAvatar.tsx",
      "line": 67,
      "content": "console.warn('⚠️ Ranking fetch error (this is OK):', rankingError);",
      "context": "65: \n66:       if (rankingError) {\n67:         console.warn('⚠️ Ranking fetch error (this is OK):', rankingError);\n68:       }\n69: "
    },
    {
      "file": "src/components/tournament/TournamentPlayerAvatar.tsx",
      "line": 88,
      "content": "console.error('🚨 Query error for player', playerId, ':', error);",
      "context": "86:   // Log any errors\n87:   if (error) {\n88:     console.error('🚨 Query error for player', playerId, ':', error);\n89:   }\n90: "
    },
    {
      "file": "src/components/tournament/TournamentPlayerAvatar.tsx",
      "line": 171,
      "content": "console.error('❌ Error loading player:', playerId, error);",
      "context": "169:   // Error state\n170:   if (error) {\n171:     console.error('❌ Error loading player:', playerId, error);\n172:     return (\n173:       <div"
    },
    {
      "file": "src/components/tournament/TournamentRealTimeSync.tsx",
      "line": 165,
      "content": "console.error('❌ Real-time sync connection error');",
      "context": "163:           console.log('✅ Real-time sync connected successfully');\n164:         } else if (status === 'CHANNEL_ERROR') {\n165:           console.error('❌ Real-time sync connection error');\n166:           toast.error('❌ Lỗi kết nối realtime');\n167:         }"
    },
    {
      "file": "src/components/tournament/TournamentRegistration.tsx",
      "line": 253,
      "content": "console.error('Payment creation error:', error);",
      "context": "251:       }\n252:     } catch (error) {\n253:       console.error('Payment creation error:', error);\n254:       toast.error('Lỗi tạo thanh toán: ' + (error as Error).message);\n255:       return null;"
    },
    {
      "file": "src/components/tournament/TournamentRegistration.tsx",
      "line": 313,
      "content": "console.error('Registration error:', error);",
      "context": "311:       }\n312:     } catch (error) {\n313:       console.error('Registration error:', error);\n314:       toast.error('Lỗi đăng ký: ' + (error as Error).message);\n315:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentRegistrationDashboard.tsx",
      "line": 103,
      "content": "console.error('Error loading profiles:', profilesError);",
      "context": "101: \n102:         if (profilesError) {\n103:           console.error('Error loading profiles:', profilesError);\n104:         }\n105: "
    },
    {
      "file": "src/components/tournament/TournamentRegistrationDashboard.tsx",
      "line": 134,
      "content": "console.error('Error fetching registrations:', error);",
      "context": "132:       setRegistrations(transformedRegistrations);\n133:     } catch (error) {\n134:       console.error('Error fetching registrations:', error);\n135:       toast.error('Không thể tải danh sách đăng ký');\n136:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentRegistrationDashboard.tsx",
      "line": 156,
      "content": "console.error('Error confirming registration:', error);",
      "context": "154:       fetchRegistrations();\n155:     } catch (error) {\n156:       console.error('Error confirming registration:', error);\n157:       toast.error('Có lỗi khi xác nhận đăng ký');\n158:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentRegistrationDashboard.tsx",
      "line": 178,
      "content": "console.error('Error rejecting registration:', error);",
      "context": "176:       fetchRegistrations();\n177:     } catch (error) {\n178:       console.error('Error rejecting registration:', error);\n179:       toast.error('Có lỗi khi từ chối đăng ký');\n180:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentRegistrationModal.tsx",
      "line": 57,
      "content": "console.error('Check registration error:', checkError);",
      "context": "55: \n56:       if (checkError && checkError.code !== 'PGRST116') {\n57:         console.error('Check registration error:', checkError);\n58:         throw checkError;\n59:       }"
    },
    {
      "file": "src/components/tournament/TournamentRegistrationModal.tsx",
      "line": 97,
      "content": "console.error('Cash registration error:', error);",
      "context": "95:       onClose();\n96:     } catch (error) {\n97:       console.error('Cash registration error:', error);\n98:       toast.error('Có lỗi xảy ra khi đăng ký');\n99:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentRegistrationModal.tsx",
      "line": 121,
      "content": "console.error('Check registration error:', checkError);",
      "context": "119: \n120:       if (checkError && checkError.code !== 'PGRST116') {\n121:         console.error('Check registration error:', checkError);\n122:         throw checkError;\n123:       }"
    },
    {
      "file": "src/components/tournament/TournamentRegistrationModal.tsx",
      "line": 181,
      "content": "console.error('VNPay payment error:', error);",
      "context": "179:       }\n180:     } catch (error) {\n181:       console.error('VNPay payment error:', error);\n182:       toast.error('Có lỗi xảy ra khi tạo thanh toán');\n183: "
    },
    {
      "file": "src/components/tournament/TournamentRewardsPreview.tsx",
      "line": 62,
      "content": "console.error('Error fetching rewards preview:', error);",
      "context": "60:       setRewardsData(data as unknown as RewardsResponse);\n61:     } catch (error) {\n62:       console.error('Error fetching rewards preview:', error);\n63:     } finally {\n64:       setLoading(false);"
    },
    {
      "file": "src/components/tournament/TournamentStatusControlButton.tsx",
      "line": 85,
      "content": "console.error('❌ Failed to close registration:', error);",
      "context": "83: \n84:         if (error) {\n85:           console.error('❌ Failed to close registration:', error);\n86:           toast.error(`Lỗi đóng đăng ký: ${error.message}`);\n87:           return;"
    },
    {
      "file": "src/components/tournament/TournamentStatusControlButton.tsx",
      "line": 108,
      "content": "console.error('❌ Failed to update tournament status:', error);",
      "context": "106: \n107:         if (error) {\n108:           console.error('❌ Failed to update tournament status:', error);\n109:           toast.error(`Lỗi cập nhật trạng thái: ${error.message}`);\n110:           return;"
    },
    {
      "file": "src/components/tournament/TournamentStatusControlButton.tsx",
      "line": 127,
      "content": "console.error('❌ Tournament completion failed:', error);",
      "context": "125: \n126:         if (error) {\n127:           console.error('❌ Tournament completion failed:', error);\n128:           toast.error(`Lỗi hoàn thành giải đấu: ${error.message}`);\n129:           return;"
    },
    {
      "file": "src/components/tournament/TournamentStatusControlButton.tsx",
      "line": 147,
      "content": "console.error('💥 Error updating tournament status:', error);",
      "context": "145:       }\n146:     } catch (error) {\n147:       console.error('💥 Error updating tournament status:', error);\n148:       toast.error('Lỗi hệ thống khi cập nhật trạng thái giải đấu');\n149:     } finally {"
    },
    {
      "file": "src/components/tournament/TournamentTemplateDropdown.tsx",
      "line": 36,
      "content": "console.error('Failed to load tournaments:', err);",
      "context": "34:     if (isOpen && tournaments.length === 0) {\n35:       loadRecentTournaments(10).catch(err => {\n36:         console.error('Failed to load tournaments:', err);\n37:         // UI already shows error via toast, so just log it\n38:       });"
    },
    {
      "file": "src/components/tournament/TournamentTemplateDropdown.tsx",
      "line": 68,
      "content": "console.error('Error selecting tournament template:', error);",
      "context": "66:       }\n67:     } catch (error) {\n68:       console.error('Error selecting tournament template:', error);\n69:     } finally {\n70:       setIsOpen(false);"
    },
    {
      "file": "src/components/tournament/templates/DoubleEliminationTemplate.tsx",
      "line": 106,
      "content": "console.error(",
      "context": "104:         })\n105:         .catch(error => {\n106:           console.error(\n107:             '❌ [DoubleEliminationTemplate] Error loading SABO data:',\n108:             error"
    },
    {
      "file": "src/components/tournament/templates/SingleEliminationTemplate.tsx",
      "line": 98,
      "content": "console.error(",
      "context": "96:           }\n97:         } catch (error) {\n98:           console.error(\n99:             '❌ [SingleEliminationTemplate] Error loading live bracket:',\n100:             error"
    },
    {
      "file": "src/components/tournament/templates/SingleEliminationTemplate.tsx",
      "line": 130,
      "content": "console.error(",
      "context": "128:         })\n129:         .catch(error => {\n130:           console.error(\n131:             '❌ [SingleEliminationTemplate] Error loading data:',\n132:             error"
    },
    {
      "file": "src/components/tournament/templates/SingleEliminationTemplate.tsx",
      "line": 349,
      "content": "console.error('❌ Validation failed:', {",
      "context": "347:         typeof scores.player2 !== 'number'\n348:       ) {\n349:         console.error('❌ Validation failed:', {\n350:           matchId: !!matchId,\n351:           player1: { value: scores.player1, type: typeof scores.player1 },"
    },
    {
      "file": "src/components/tournament/templates/SingleEliminationTemplate.tsx",
      "line": 382,
      "content": "console.error('❌ Emergency completion error:', error);",
      "context": "380: \n381:       if (error) {\n382:         console.error('❌ Emergency completion error:', error);\n383:         throw error;\n384:       }"
    },
    {
      "file": "src/components/tournament/templates/SingleEliminationTemplate.tsx",
      "line": 433,
      "content": "console.error('❌ Error updating match score:', error);",
      "context": "431:       }\n432:     } catch (error) {\n433:       console.error('❌ Error updating match score:', error);\n434:       toast.error('Lỗi khi cập nhật tỷ số: ' + (error as any)?.message);\n435:     } finally {"
    },
    {
      "file": "src/components/tournaments/BracketFixButton.tsx",
      "line": 38,
      "content": "console.error('❌ Error fixing bracket:', error);",
      "context": "36:       }\n37:     } catch (error: any) {\n38:       console.error('❌ Error fixing bracket:', error);\n39:       toast.error('❌ Lỗi khi sửa bracket: ' + error.message);\n40:     } finally {"
    },
    {
      "file": "src/components/tournaments/MatchScoreInput.tsx",
      "line": 70,
      "content": "console.error('❌ Error calling update_match_score_safe:', error);",
      "context": "68: \n69:       if (error) {\n70:         console.error('❌ Error calling update_match_score_safe:', error);\n71:         throw error;\n72:       }"
    },
    {
      "file": "src/components/tournaments/MatchScoreInput.tsx",
      "line": 75,
      "content": "console.error('❌ Function returned error:', data.error);",
      "context": "73: \n74:       if (data && typeof data === 'object' && 'error' in data && data.error) {\n75:         console.error('❌ Function returned error:', data.error);\n76:         toast({\n77:           title: 'Score Submission Failed',"
    },
    {
      "file": "src/components/tournaments/MatchScoreInput.tsx",
      "line": 98,
      "content": "console.error('❌ Error submitting score:', error);",
      "context": "96:       }, 1000);\n97:     } catch (error) {\n98:       console.error('❌ Error submitting score:', error);\n99:       toast({\n100:         title: 'Error',"
    },
    {
      "file": "src/components/tournaments/PlayerSelectionModal.tsx",
      "line": 76,
      "content": "console.error('Error selecting player:', error);",
      "context": "74:       toast.success('Đã chọn người chơi thành công!');\n75:     } catch (error: any) {\n76:       console.error('Error selecting player:', error);\n77:       toast.error('Lỗi khi chọn người chơi: ' + error.message);\n78:     } finally {"
    },
    {
      "file": "src/components/tournaments/SABO32AdvancementFix.tsx",
      "line": 75,
      "content": "console.error('Analysis failed:', error);",
      "context": "73: \n74:     } catch (error) {\n75:       console.error('Analysis failed:', error);\n76:       toast.error(`Lỗi phân tích: ${error.message}`);\n77:     } finally {"
    },
    {
      "file": "src/components/tournaments/SABO32AdvancementFix.tsx",
      "line": 104,
      "content": "console.error('Fix failed:', error);",
      "context": "102: \n103:     } catch (error) {\n104:       console.error('Fix failed:', error);\n105:       toast.error(`Lỗi sửa advancement: ${error.message}`);\n106:     } finally {"
    },
    {
      "file": "src/components/tournaments/SABO32AdvancementFix.tsx",
      "line": 185,
      "content": "console.error('Manual fix failed:', error);",
      "context": "183: \n184:     } catch (error) {\n185:       console.error('Manual fix failed:', error);\n186:       toast.error(`Lỗi sửa thủ công: ${error.message}`);\n187:     } finally {"
    },
    {
      "file": "src/components/tournaments/SABO32AdvancementFixer.tsx",
      "line": 40,
      "content": "console.error('❌ Fix advancement error:', error);",
      "context": "38: \n39:       if (error) {\n40:         console.error('❌ Fix advancement error:', error);\n41:         toast.error(`Lỗi fix advancement: ${error.message}`);\n42:         return;"
    },
    {
      "file": "src/components/tournaments/SABO32AdvancementFixer.tsx",
      "line": 57,
      "content": "console.error('❌ Unexpected error fixing advancement:', error);",
      "context": "55:       \n56:     } catch (error: any) {\n57:       console.error('❌ Unexpected error fixing advancement:', error);\n58:       toast.error(`Lỗi không mong muốn: ${error.message}`);\n59:     } finally {"
    },
    {
      "file": "src/components/tournaments/SABO32ManualFix.tsx",
      "line": 175,
      "content": "console.error('Error in manual fix:', error);",
      "context": "173: \n174:     } catch (error) {\n175:       console.error('Error in manual fix:', error);\n176:       toast.error('Failed to apply manual fixes: ' + (error as any)?.message);\n177:     } finally {"
    },
    {
      "file": "src/components/tournaments/SABO32MatchCard.tsx",
      "line": 132,
      "content": "console.error('Failed to submit score:', error);",
      "context": "130:       }\n131:     } catch (error) {\n132:       console.error('Failed to submit score:', error);\n133:       // Revert optimistic update\n134:       setOptimisticMatch(match);"
    },
    {
      "file": "src/components/tournaments/SABO32ProgressTracker.tsx",
      "line": 129,
      "content": "console.error('Error fetching progress stats:', error);",
      "context": "127: \n128:     } catch (error) {\n129:       console.error('Error fetching progress stats:', error);\n130:     } finally {\n131:       setLoading(false);"
    },
    {
      "file": "src/components/tournaments/SABO32QuickActions.tsx",
      "line": 94,
      "content": "console.error('Auto advancement error:', error);",
      "context": "92: \n93:     } catch (error) {\n94:       console.error('Auto advancement error:', error);\n95:       toast.error('Error during auto advancement');\n96:     } finally {"
    },
    {
      "file": "src/components/tournaments/SABO32QuickActions.tsx",
      "line": 147,
      "content": "console.error('Random fill error:', error);",
      "context": "145: \n146:     } catch (error) {\n147:       console.error('Random fill error:', error);\n148:       toast.error('Error filling matches');\n149:     } finally {"
    },
    {
      "file": "src/components/tournaments/SABO32QuickActions.tsx",
      "line": 175,
      "content": "console.error('Reset error:', error);",
      "context": "173: \n174:     } catch (error) {\n175:       console.error('Reset error:', error);\n176:       toast.error('Error resetting tournament');\n177:     } finally {"
    },
    {
      "file": "src/components/tournaments/SABO32TournamentDashboard.tsx",
      "line": 96,
      "content": "console.error('Error fetching tournament data:', error);",
      "context": "94: \n95:     } catch (error) {\n96:       console.error('Error fetching tournament data:', error);\n97:       toast.error('Error loading tournament data');\n98:     } finally {"
    },
    {
      "file": "src/components/tournaments/SABO32TournamentResults.tsx",
      "line": 193,
      "content": "console.error('Error fetching tournament results:', error);",
      "context": "191: \n192:     } catch (error) {\n193:       console.error('Error fetching tournament results:', error);\n194:     } finally {\n195:       setLoading(false);"
    },
    {
      "file": "src/components/tournaments/SABOBracketGenerator.tsx",
      "line": 49,
      "content": "console.error('Validation error:', error);",
      "context": "47:         setValidationResult(result);\n48:       } catch (error) {\n49:         console.error('Validation error:', error);\n50:       }\n51:     };"
    },
    {
      "file": "src/components/tournaments/SABOBracketGenerator.tsx",
      "line": 88,
      "content": "console.error('Error generating SABO bracket:', error);",
      "context": "86:       }\n87:     } catch (error) {\n88:       console.error('Error generating SABO bracket:', error);\n89:       toast({\n90:         title: 'Error',"
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 37,
      "content": "console.error('❌ Missing match or user data');",
      "context": "35:   const handleSubmit = async () => {\n36:     if (!match || !user) {\n37:       console.error('❌ Missing match or user data');\n38:       return;\n39:     }"
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 73,
      "content": "console.error('❌ Error submitting score:', scoreError);",
      "context": "71: \n72:       if (scoreError) {\n73:         console.error('❌ Error submitting score:', scoreError);\n74:         toast.error('Lỗi khi cập nhật tỷ số: ' + scoreError.message);\n75:         return;"
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 84,
      "content": "console.error('❌ Function returned error:', scoreResult.error);",
      "context": "82:         scoreResult.error\n83:       ) {\n84:         console.error('❌ Function returned error:', scoreResult.error);\n85:         toast.error('Lỗi khi cập nhật tỷ số: ' + scoreResult.error);\n86:         return;"
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 114,
      "content": "console.error('❌ Error advancing winner:', advanceError);",
      "context": "112: \n113:         if (advanceError) {\n114:           console.error('❌ Error advancing winner:', advanceError);\n115:           toast.error(\n116:             'Đã cập nhật tỷ số nhưng không thể chuyển vòng: ' +"
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 137,
      "content": "console.error(",
      "context": "135: \n136:         if (advanceError) {\n137:           console.error(\n138:             '❌ Error advancing in double elimination:',\n139:             advanceError"
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 167,
      "content": "console.error('❌ Error in handleSubmit:', error);",
      "context": "165:       onClose();\n166:     } catch (error: any) {\n167:       console.error('❌ Error in handleSubmit:', error);\n168:       toast.error(\n169:         'Lỗi khi cập nhật tỷ số: ' + (error.message || 'Unknown error')"
    },
    {
      "file": "src/components/tournaments/SingleEliminationBracket.tsx",
      "line": 73,
      "content": "console.error('Error fetching matches:', error);",
      "context": "71:       setMatches(processedMatches);\n72:     } catch (error) {\n73:       console.error('Error fetching matches:', error);\n74:     } finally {\n75:       setIsLoading(false);"
    },
    {
      "file": "src/components/tournaments/TournamentBracketGenerator.tsx",
      "line": 114,
      "content": "console.error('Error generating bracket:', error);",
      "context": "112:       });\n113:     } catch (error) {\n114:       console.error('Error generating bracket:', error);\n115:       toast({\n116:         title: 'Error',"
    },
    {
      "file": "src/components/tournaments/TournamentBracketGenerator.tsx",
      "line": 160,
      "content": "console.error('Error generating seeded bracket:', error);",
      "context": "158:       });\n159:     } catch (error) {\n160:       console.error('Error generating seeded bracket:', error);\n161:       toast({\n162:         title: 'Error',"
    },
    {
      "file": "src/components/tournaments/TournamentBracketGenerator.tsx",
      "line": 205,
      "content": "console.error('Error saving bracket:', error);",
      "context": "203:       setGeneratedBracket([]);\n204:     } catch (error) {\n205:       console.error('Error saving bracket:', error);\n206:       toast({\n207:         title: 'Error',"
    },
    {
      "file": "src/components/tournaments/TournamentBracketGenerator.tsx",
      "line": 306,
      "content": "console.error('Error generating bracket:', error);",
      "context": "304:       }\n305:     } catch (error) {\n306:       console.error('Error generating bracket:', error);\n307:       toast({\n308:         title: 'Error',"
    },
    {
      "file": "src/components/tournaments/TournamentPerformanceMonitor.tsx",
      "line": 66,
      "content": "const originalError = console.error;",
      "context": "64:   // Monitor console errors related to tournament\n65:   useEffect(() => {\n66:     const originalError = console.error;\n67:     const originalWarn = console.warn;\n68: "
    },
    {
      "file": "src/components/tournaments/TournamentPerformanceMonitor.tsx",
      "line": 69,
      "content": "console.error = (...args) => {",
      "context": "67:     const originalWarn = console.warn;\n68: \n69:     console.error = (...args) => {\n70:       const message = args.join(' ');\n71:       if (message.includes(tournamentId) || message.includes('tournament')) {"
    },
    {
      "file": "src/components/tournaments/TournamentPerformanceMonitor.tsx",
      "line": 92,
      "content": "console.error = originalError;",
      "context": "90: \n91:     return () => {\n92:       console.error = originalError;\n93:       console.warn = originalWarn;\n94:     };"
    },
    {
      "file": "src/components/tournaments/automation/TournamentStateManager.tsx",
      "line": 110,
      "content": "console.error('❌ Error updating tournament status:', error);",
      "context": "108:       onStateChange?.();\n109:     } catch (error) {\n110:       console.error('❌ Error updating tournament status:', error);\n111:       toast.error(`❌ Failed to update tournament status`);\n112:     } finally {"
    },
    {
      "file": "src/components/tournaments/monitoring/SystemHealthDashboard.tsx",
      "line": 59,
      "content": "console.error('❌ Error fetching system health:', error);",
      "context": "57:       setLastUpdate(new Date());\n58:     } catch (error) {\n59:       console.error('❌ Error fetching system health:', error);\n60:       toast.error('Failed to fetch system health data');\n61:     } finally {"
    },
    {
      "file": "src/components/tournaments/monitoring/SystemHealthDashboard.tsx",
      "line": 83,
      "content": "console.error('❌ Error running auto-recovery:', error);",
      "context": "81:       await fetchSystemHealth(); // Refresh stats\n82:     } catch (error) {\n83:       console.error('❌ Error running auto-recovery:', error);\n84:       toast.error('Failed to run auto-recovery');\n85:     } finally {"
    },
    {
      "file": "src/components/ui/card-avatar.tsx",
      "line": 110,
      "content": "console.error('❌ Avatar load error:', currentAvatar);",
      "context": "108:                 className='avatar-image'\n109:                 onError={(e) => {\n110:                   console.error('❌ Avatar load error:', currentAvatar);\n111:                   // Hide the broken image and show placeholder\n112:                   const target = e.currentTarget;"
    },
    {
      "file": "src/components/ui/error-boundary.tsx",
      "line": 38,
      "content": "console.error('ErrorBoundary caught an error:', error, errorInfo);",
      "context": "36:     // Log error to console in development\n37:     if (process.env.NODE_ENV === 'development') {\n38:       console.error('ErrorBoundary caught an error:', error, errorInfo);\n39:     }\n40:   }"
    },
    {
      "file": "src/components/ui/lazy-components.tsx",
      "line": 120,
      "content": "console.error('Lazy component error:', error, errorInfo);",
      "context": "118: \n119:   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n120:     console.error('Lazy component error:', error, errorInfo);\n121:     performanceMonitor.trackWebVitals({\n122:       name: 'lazy-component-error',"
    },
    {
      "file": "src/components/ui/mobile-image-cropper.tsx",
      "line": 341,
      "content": "console.error('Crop error:', error);",
      "context": "339:       );\n340:     } catch (error) {\n341:       console.error('Crop error:', error);\n342:       toast.error('Lỗi khi cắt ảnh: ' + (error instanceof Error ? error.message : 'Không xác định'));\n343:       setIsCropping(false);"
    },
    {
      "file": "src/components/user/UserOnboardingFlow.tsx",
      "line": 94,
      "content": "console.error('Error fetching profile:', error);",
      "context": "92:       }\n93:     } catch (error) {\n94:       console.error('Error fetching profile:', error);\n95:     }\n96:   };"
    },
    {
      "file": "src/components/user/UserOnboardingFlow.tsx",
      "line": 484,
      "content": "console.error('Error saving profile:', error);",
      "context": "482:       setCurrentStep(4);\n483:     } catch (error) {\n484:       console.error('Error saving profile:', error);\n485:       toast.error('Lỗi khi lưu hồ sơ');\n486:     }"
    },
    {
      "file": "src/components/wallet/TransactionHistory.tsx",
      "line": 80,
      "content": "console.error('Failed to fetch SPA transactions:', error);",
      "context": "78:         setTransactions(mappedData);\n79:       } catch (error) {\n80:         console.error('Failed to fetch SPA transactions:', error);\n81:       } finally {\n82:         setIsLoading(false);"
    },
    {
      "file": "src/components/wallet/TransferModal.tsx",
      "line": 99,
      "content": "console.error('Search failed:', error);",
      "context": "97:       setSearchResults(filtered);\n98:     } catch (error) {\n99:       console.error('Search failed:', error);\n100:     } finally {\n101:       setIsSearching(false);"
    },
    {
      "file": "src/components/wallet/TransferModal.tsx",
      "line": 129,
      "content": "console.error('Transfer failed:', error);",
      "context": "127:       handleClose();\n128:     } catch (error) {\n129:       console.error('Transfer failed:', error);\n130:     } finally {\n131:       setIsTransferring(false);"
    },
    {
      "file": "src/contexts/AvatarContext.tsx",
      "line": 41,
      "content": "console.error('Error fetching avatar:', error);",
      "context": "39: \n40:       if (error) {\n41:         console.error('Error fetching avatar:', error);\n42:         return;\n43:       }"
    },
    {
      "file": "src/contexts/AvatarContext.tsx",
      "line": 47,
      "content": "console.error('Error fetching avatar:', error);",
      "context": "45:       setAvatarUrl(data?.avatar_url || null);\n46:     } catch (error) {\n47:       console.error('Error fetching avatar:', error);\n48:     }\n49:   };"
    },
    {
      "file": "src/contexts/FeatureFlagsContext.tsx",
      "line": 106,
      "content": "console.error('Failed to load production feature flags:', error);",
      "context": "104:       }\n105:     } catch (error) {\n106:       console.error('Failed to load production feature flags:', error);\n107:     }\n108:   };"
    },
    {
      "file": "src/contexts/ProfileContext.tsx",
      "line": 92,
      "content": "console.error('Error fetching profiles:', error);",
      "context": "90:       }\n91:     } catch (error) {\n92:       console.error('Error fetching profiles:', error);\n93:     } finally {\n94:       setIsLoading(false);"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 65,
      "content": "console.error('[SimpleProfileContext] Error fetching profile:', error);",
      "context": "63: \n64:       if (error && error.code !== 'PGRST116') {\n65:         console.error('[SimpleProfileContext] Error fetching profile:', error);\n66:         throw error;\n67:       }"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 77,
      "content": "console.error('[SimpleProfileContext] Error fetching profile:', error);",
      "context": "75:       setProfile(data);\n76:     } catch (error) {\n77:       console.error('[SimpleProfileContext] Error fetching profile:', error);\n78:     } finally {\n79:       setIsLoading(false);"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 99,
      "content": "console.error('Error updating profile:', error);",
      "context": "97:         return true;\n98:       } catch (error) {\n99:         console.error('Error updating profile:', error);\n100:         return false;\n101:       }"
    },
    {
      "file": "src/contexts/SimpleTournamentContext.tsx",
      "line": 113,
      "content": "console.error('Error fetching tournaments:', err);",
      "context": "111:       setTournaments(processedTournaments);\n112:     } catch (err) {\n113:       console.error('Error fetching tournaments:', err);\n114:       setError(\n115:         err instanceof Error ? err.message : 'Failed to fetch tournaments'"
    },
    {
      "file": "src/contexts/SimpleTournamentContext.tsx",
      "line": 200,
      "content": "console.error('❌ Invalid rewards data:', rewards);",
      "context": "198:         // Simple validation\n199:         if (!rewards || typeof rewards !== 'object') {\n200:           console.error('❌ Invalid rewards data:', rewards);\n201:           toast.error('Dữ liệu phần thưởng không hợp lệ');\n202:           return false;"
    },
    {
      "file": "src/contexts/SimpleTournamentContext.tsx",
      "line": 217,
      "content": "console.error('❌ Database update error:', error);",
      "context": "215: \n216:         if (error) {\n217:           console.error('❌ Database update error:', error);\n218:           throw error;\n219:         }"
    },
    {
      "file": "src/contexts/SimpleTournamentContext.tsx",
      "line": 241,
      "content": "console.error('❌ Error saving tournament rewards:', error);",
      "context": "239:         return true;\n240:       } catch (error) {\n241:         console.error('❌ Error saving tournament rewards:', error);\n242:         toast.error('Lỗi khi lưu phần thưởng giải đấu');\n243:         return false;"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 100,
      "content": "console.error('❌ Error loading rewards from database:', error);",
      "context": "98:         );\n99:       } catch (error) {\n100:         console.error('❌ Error loading rewards from database:', error);\n101:         // Return fallback rewards\n102:         return {"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 205,
      "content": "console.error('Error fetching tournament:', fetchError);",
      "context": "203: \n204:         if (fetchError) {\n205:           console.error('Error fetching tournament:', fetchError);\n206:           throw fetchError;\n207:         }"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 220,
      "content": "console.error('❌ Error loading tournament:', err);",
      "context": "218:         setRewards(rewardsData);\n219:       } catch (err) {\n220:         console.error('❌ Error loading tournament:', err);\n221:         const errorMessage =\n222:           err instanceof Error ? err.message : 'Lỗi không xác định';"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 264,
      "content": "console.error('❌ Error saving tournament rewards:', error);",
      "context": "262:         toast.success('Đã lưu phần thưởng giải đấu');\n263:       } catch (error) {\n264:         console.error('❌ Error saving tournament rewards:', error);\n265:         const errorMessage =\n266:           error instanceof Error ? error.message : 'Lỗi khi lưu phần thưởng';"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 288,
      "content": "console.error('❌ Database error:', error);",
      "context": "286: \n287:         if (error) {\n288:           console.error('❌ Database error:', error);\n289:           throw error;\n290:         }"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 299,
      "content": "console.error('❌ Error loading rewards:', error);",
      "context": "297:         return await loadRewardsFromDatabase(data, rank);\n298:       } catch (error) {\n299:         console.error('❌ Error loading rewards:', error);\n300:         return null;\n301:       }"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 346,
      "content": "console.error('Error fetching latest tournament:', fetchError);",
      "context": "344: \n345:       if (fetchError) {\n346:         console.error('Error fetching latest tournament:', fetchError);\n347:         throw fetchError;\n348:       }"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 384,
      "content": "console.error('❌ Error loading latest tournament:', err);",
      "context": "382:       return templateData;\n383:     } catch (err) {\n384:       console.error('❌ Error loading latest tournament:', err);\n385:       const errorMessage =\n386:         err instanceof Error ? err.message : 'Lỗi không xác định';"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 517,
      "content": "console.error('❌ Failed to save prizes:', response.status, errorText);",
      "context": "515:       if (!response.ok) {\n516:         const errorText = await response.text();\n517:         console.error('❌ Failed to save prizes:', response.status, errorText);\n518:         throw new Error(`Failed to save prizes: ${response.status} ${errorText}`);\n519:       }"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 523,
      "content": "console.error('❌ Error in saveTournamentPrizes:', error);",
      "context": "521:       console.log('✅ Tournament prizes saved successfully:', prizes.length, 'entries');\n522:     } catch (error) {\n523:       console.error('❌ Error in saveTournamentPrizes:', error);\n524:       // Don't throw error - prizes are not critical for tournament creation\n525:       console.log('⚠️ Continuing without saving prizes to tournament_prizes table');"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 622,
      "content": "console.error('❌ [ERROR] Prize template is empty! Creating fallback...');",
      "context": "620:       \n621:       if (prizeTemplate.length === 0) {\n622:         console.error('❌ [ERROR] Prize template is empty! Creating fallback...');\n623:         // Create fallback prize template\n624:         for (let i = 1; i <= 16; i++) {"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 676,
      "content": "console.error('❌ Authentication required for tournament creation:', authError);",
      "context": "674:       \n675:       if (authError || !authUser) {\n676:         console.error('❌ Authentication required for tournament creation:', authError);\n677:         setLoading(false);\n678:         throw new Error('Bạn cần đăng nhập để tạo giải đấu');"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 740,
      "content": "console.error('❌ [ERROR] tournament_start is null/undefined!');",
      "context": "738:       // Ensure tournament_start is not null/undefined\n739:       if (!tournamentData.tournament_start) {\n740:         console.error('❌ [ERROR] tournament_start is null/undefined!');\n741:         tournamentData.tournament_start = new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString();\n742:         console.log('🔧 [FIX] Set tournament_start to:', tournamentData.tournament_start);"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 767,
      "content": "console.error('❌ [DEBUG] Database INSERT error:', tournamentError);",
      "context": "765: \n766:       if (tournamentError) {\n767:         console.error('❌ [DEBUG] Database INSERT error:', tournamentError);\n768:         throw tournamentError;\n769:       }"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 799,
      "content": "console.error('⚠️ Failed to save tournament prizes:', prizeError);",
      "context": "797:         console.log('✅ Tournament prizes saved successfully');\n798:       } catch (prizeError) {\n799:         console.error('⚠️ Failed to save tournament prizes:', prizeError);\n800:         // Non-critical error - tournament is already created\n801:       }"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 806,
      "content": "console.error('❌ Error creating tournament:', err);",
      "context": "804:       return newTournament;\n805:     } catch (err) {\n806:       console.error('❌ Error creating tournament:', err);\n807:       const errorMessage =\n808:         err instanceof Error ? err.message : 'Lỗi không xác định';"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 882,
      "content": "console.error('❌ Error updating tournament:', err);",
      "context": "880:         return updatedTournament;\n881:       } catch (err) {\n882:         console.error('❌ Error updating tournament:', err);\n883:         const errorMessage =\n884:           err instanceof Error ? err.message : 'Lỗi không xác định';"
    },
    {
      "file": "src/contexts/TournamentGlobalContext.tsx",
      "line": 202,
      "content": "console.error('Error fetching tournaments:', err);",
      "context": "200:       setTournaments(enhancedTournaments);\n201:     } catch (err) {\n202:       console.error('Error fetching tournaments:', err);\n203:       setError(\n204:         err instanceof Error ? err.message : 'Failed to fetch tournaments'"
    },
    {
      "file": "src/contexts/TournamentGlobalContext.tsx",
      "line": 222,
      "content": "console.error(",
      "context": "220:       );\n221:     } catch (error) {\n222:       console.error(\n223:         '❌ [TournamentGlobal] Error in refreshTournaments:',\n224:         error"
    },
    {
      "file": "src/contexts/UnifiedProfileContext.tsx",
      "line": 153,
      "content": "console.error('Error loading profile:', error);",
      "context": "151:       setStats(formattedStats);\n152:     } catch (error) {\n153:       console.error('Error loading profile:', error);\n154:       toast.error('Lỗi khi tải thông tin hồ sơ');\n155:     } finally {"
    },
    {
      "file": "src/contexts/UnifiedProfileContext.tsx",
      "line": 183,
      "content": "console.error('Error updating profile:', error);",
      "context": "181:         toast.success('Cập nhật thông tin thành công!');\n182:       } catch (error) {\n183:         console.error('Error updating profile:', error);\n184:         toast.error('Lỗi khi cập nhật thông tin');\n185:       } finally {"
    },
    {
      "file": "src/contexts/UnifiedProfileContext.tsx",
      "line": 215,
      "content": "console.error('Error uploading avatar:', error);",
      "context": "213:         await updateProfile({ avatar_url: avatarUrl });\n214:       } catch (error) {\n215:         console.error('Error uploading avatar:', error);\n216:         toast.error('Lỗi khi tải ảnh đại diện');\n217:       } finally {"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 129,
      "content": "console.error('Error fetching tournaments:', error);",
      "context": "127:       }\n128:     } catch (error) {\n129:       console.error('Error fetching tournaments:', error);\n130:       toast.error('Lỗi khi tải danh sách giải đấu');\n131:     } finally {"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 187,
      "content": "console.error('❌ Database error:', error);",
      "context": "185: \n186:         if (error) {\n187:           console.error('❌ Database error:', error);\n188:           console.error('❌ Error details:', error.details);\n189:           console.error('❌ Error hint:', error.hint);"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 188,
      "content": "console.error('❌ Error details:', error.details);",
      "context": "186:         if (error) {\n187:           console.error('❌ Database error:', error);\n188:           console.error('❌ Error details:', error.details);\n189:           console.error('❌ Error hint:', error.hint);\n190:           throw error;"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 189,
      "content": "console.error('❌ Error hint:', error.hint);",
      "context": "187:           console.error('❌ Database error:', error);\n188:           console.error('❌ Error details:', error.details);\n189:           console.error('❌ Error hint:', error.hint);\n190:           throw error;\n191:         }"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 210,
      "content": "console.error(",
      "context": "208: \n209:           if (notificationError) {\n210:             console.error(\n211:               '⚠️ Notification failed but tournament created:',\n212:               notificationError"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 219,
      "content": "console.error(",
      "context": "217:           }\n218:         } catch (notificationError) {\n219:           console.error(\n220:             '⚠️ Notification failed but tournament created:',\n221:             notificationError"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 230,
      "content": "console.error('❌ Error creating tournament:', error);",
      "context": "228:         setCurrentTournament(defaultTournament);\n229:       } catch (error: any) {\n230:         console.error('❌ Error creating tournament:', error);\n231: \n232:         // Enhanced error handling"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 278,
      "content": "console.error('Error registering for tournament:', error);",
      "context": "276:         await fetchTournaments();\n277:       } catch (error) {\n278:         console.error('Error registering for tournament:', error);\n279:         toast.error('Lỗi khi đăng ký giải đấu');\n280:       } finally {"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 305,
      "content": "console.error('Error canceling registration:', error);",
      "context": "303:         await fetchTournaments();\n304:       } catch (error) {\n305:         console.error('Error canceling registration:', error);\n306:         toast.error('Lỗi khi hủy đăng ký');\n307:       } finally {"
    },
    {
      "file": "src/hooks/club/useClubRole.ts",
      "line": 68,
      "content": "console.warn('[useIsClubOwner] club_profiles query error', clubError);",
      "context": "66: \n67:       if (clubError) {\n68:         console.warn('[useIsClubOwner] club_profiles query error', clubError);\n69:         return false;\n70:       }"
    },
    {
      "file": "src/hooks/marketplace/useMarketplaceItems.tsx",
      "line": 144,
      "content": "console.error('Failed to increment views:', err);",
      "context": "142:       );\n143:     } catch (err) {\n144:       console.error('Failed to increment views:', err);\n145:     }\n146:   };"
    },
    {
      "file": "src/hooks/useAdvancedSPAPoints.tsx",
      "line": 53,
      "content": "console.error('Error fetching SPA rules:', error);",
      "context": "51:       setLoading(false);\n52:     } catch (error) {\n53:       console.error('Error fetching SPA rules:', error);\n54:       setRules([]);\n55:       setLoading(false);"
    },
    {
      "file": "src/hooks/useAdvancedSPAPoints.tsx",
      "line": 183,
      "content": "console.error('Error completing challenge:', error);",
      "context": "181:       return data;\n182:     } catch (error) {\n183:       console.error('Error completing challenge:', error);\n184:       throw error;\n185:     }"
    },
    {
      "file": "src/hooks/useAdvancedTournamentActions.ts",
      "line": 21,
      "content": "console.error('Bulk update error:', error);",
      "context": "19:         return { success: true };\n20:       } catch (error) {\n21:         console.error('Bulk update error:', error);\n22:         toast.error('Lỗi khi cập nhật hàng loạt');\n23:         return { success: false, error };"
    },
    {
      "file": "src/hooks/useAdvancedTournamentActions.ts",
      "line": 50,
      "content": "console.error('Smart bracket generation error:', error);",
      "context": "48:         };\n49:       } catch (error) {\n50:         console.error('Smart bracket generation error:', error);\n51:         return { success: false, error };\n52:       }"
    },
    {
      "file": "src/hooks/useAdvancedTournamentActions.ts",
      "line": 92,
      "content": "console.error('Auto schedule error:', error);",
      "context": "90:         return { success: true };\n91:       } catch (error) {\n92:         console.error('Auto schedule error:', error);\n93:         toast.error('Lỗi khi tự động lên lịch');\n94:         return { success: false, error };"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 113,
      "content": "console.error(`🔧 Auth Error [${context}]:`, error);",
      "context": "111:   const handleAuthError = useCallback(\n112:     (error: any, context = 'Authentication'): string => {\n113:       console.error(`🔧 Auth Error [${context}]:`, error);\n114: \n115:       if (!error) return 'Lỗi không xác định';"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 276,
      "content": "console.error('❌ Failed to grant admin role in profiles:', error);",
      "context": "274:             .then(({ error }) => {\n275:               if (error && !error.message.includes('check constraint')) {\n276:                 console.error('❌ Failed to grant admin role in profiles:', error);\n277:               } else if (!error) {\n278:                 console.log('✅ Admin role granted in profiles table');"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 294,
      "content": "console.error('❌ Failed to add admin role to user_roles:', error);",
      "context": "292:             .then(({ error }) => {\n293:               if (error && !error.message.includes('does not exist')) {\n294:                 console.error('❌ Failed to add admin role to user_roles:', error);\n295:               } else if (!error) {\n296:                 console.log('✅ Admin role added to user_roles table');"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 324,
      "content": "console.error('🔧 Error handling milestone for new user:', error);",
      "context": "322:             })\n323:             .catch(error => {\n324:               console.error('🔧 Error handling milestone for new user:', error);\n325:             });\n326:           */"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 340,
      "content": "console.error('🔧 Auth: Error getting session:', error);",
      "context": "338: \n339:         if (error) {\n340:           console.error('🔧 Auth: Error getting session:', error);\n341:           // Clear corrupted session data\n342:           localStorage.removeItem('supabase.auth.token');"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 375,
      "content": "console.error('🔧 Auth: Session check failed:', error);",
      "context": "373:       })\n374:       .catch(error => {\n375:         console.error('🔧 Auth: Session check failed:', error);\n376:         if (isMounted) {\n377:           setAuthState({"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 429,
      "content": "console.error('🔧 Auth: Sign out error:', error);",
      "context": "427:       window.location.href = '/';\n428:     } catch (error) {\n429:       console.error('🔧 Auth: Sign out error:', error);\n430: \n431:       // Even if sign out fails, clear local state and redirect"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 546,
      "content": "console.error('❌ Phone password login failed:', error.message);",
      "context": "544:       \n545:       if (error) {\n546:         console.error('❌ Phone password login failed:', error.message);\n547:         \n548:         // Check if error is due to missing password for OTP-created account"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 568,
      "content": "console.error('❌ Phone password login exception:', error);",
      "context": "566:       return { data, error };\n567:     } catch (error) {\n568:       console.error('❌ Phone password login exception:', error);\n569:       return { error } as any;\n570:     }"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 628,
      "content": "console.error('🔧 Auth: Session refresh failed:', error);",
      "context": "626:       console.log('🔧 Auth: Session refreshed successfully');\n627:     } catch (error) {\n628:       console.error('🔧 Auth: Session refresh failed:', error);\n629:       const errorMessage = handleAuthError(error, 'Session Refresh');\n630:       setError(errorMessage);"
    },
    {
      "file": "src/hooks/useAuthStateMonitor.ts",
      "line": 50,
      "content": "console.error('🚨 Auth appears stuck, forcing cleanup');",
      "context": "48: \n49:         if (errorCountRef.current > 3) {\n50:           console.error('🚨 Auth appears stuck, forcing cleanup');\n51:           cleanupAuthState();\n52:           window.location.reload();"
    },
    {
      "file": "src/hooks/useAutoAdvancement.ts",
      "line": 57,
      "content": "console.error('❌ Error in advanceToSemifinal:', err);",
      "context": "55:         }\n56:       } catch (err: any) {\n57:         console.error('❌ Error in advanceToSemifinal:', err);\n58:         toast.error('Có lỗi xảy ra khi tự động tạo trận bán kết');\n59:         return { success: false, error: err.message };"
    },
    {
      "file": "src/hooks/useAutoAdvancement.ts",
      "line": 96,
      "content": "console.error('❌ Error in advanceToFinal:', err);",
      "context": "94:         }\n95:       } catch (err: any) {\n96:         console.error('❌ Error in advanceToFinal:', err);\n97:         toast.error('Có lỗi xảy ra khi tự động tạo trận chung kết');\n98:         return { success: false, error: err.message };"
    },
    {
      "file": "src/hooks/useAutoAdvancement.ts",
      "line": 122,
      "content": "console.error('❌ Error in processAutomaticAdvancement:', err);",
      "context": "120:         return result;\n121:       } catch (err: any) {\n122:         console.error('❌ Error in processAutomaticAdvancement:', err);\n123:         return {\n124:           error: err.message,"
    },
    {
      "file": "src/hooks/useAutoMatchNotifications.tsx",
      "line": 95,
      "content": "console.error('Error creating match notification:', error);",
      "context": "93: \n94:         if (error) {\n95:           console.error('Error creating match notification:', error);\n96:           return;\n97:         }"
    },
    {
      "file": "src/hooks/useAutoMatchNotifications.tsx",
      "line": 110,
      "content": "console.error('Error in createMatchNotification:', error);",
      "context": "108:         console.log('✅ Auto match notification created:', notification);\n109:       } catch (error) {\n110:         console.error('Error in createMatchNotification:', error);\n111:       }\n112:     },"
    },
    {
      "file": "src/hooks/useAutoMatchNotifications.tsx",
      "line": 206,
      "content": "console.error('Error checking upcoming matches:', error);",
      "context": "204:         });\n205:       } catch (error) {\n206:         console.error('Error checking upcoming matches:', error);\n207:       }\n208:     };"
    },
    {
      "file": "src/hooks/useAutoPopupNotifications.tsx",
      "line": 106,
      "content": "console.error('Error marking notification as read:', error);",
      "context": "104:       });\n105:     } catch (error) {\n106:       console.error('Error marking notification as read:', error);\n107:     }\n108:   };"
    },
    {
      "file": "src/hooks/useAutoTransitionChallenges.ts",
      "line": 21,
      "content": "console.error('Error fetching accepted challenges:', error);",
      "context": "19: \n20:         if (error) {\n21:           console.error('Error fetching accepted challenges:', error);\n22:           return;\n23:         }"
    },
    {
      "file": "src/hooks/useAutoTransitionChallenges.ts",
      "line": 43,
      "content": "console.error('Error updating challenge status:', updateError);",
      "context": "41: \n42:         if (updateError) {\n43:           console.error('Error updating challenge status:', updateError);\n44:           return;\n45:         }"
    },
    {
      "file": "src/hooks/useAutoTransitionChallenges.ts",
      "line": 50,
      "content": "console.error('Auto transition error:', error);",
      "context": "48: \n49:       } catch (error) {\n50:         console.error('Auto transition error:', error);\n51:       }\n52:     };"
    },
    {
      "file": "src/hooks/useAutoUpdateChallengeStatus.ts",
      "line": 22,
      "content": "console.error('Error fetching accepted challenges:', error);",
      "context": "20: \n21:         if (error) {\n22:           console.error('Error fetching accepted challenges:', error);\n23:           return;\n24:         }"
    },
    {
      "file": "src/hooks/useAutoUpdateChallengeStatus.ts",
      "line": 38,
      "content": "console.error('Error updating challenge status:', updateError);",
      "context": "36: \n37:           if (updateError) {\n38:             console.error('Error updating challenge status:', updateError);\n39:           } else {\n40:             console.log(`✅ Updated ${challenges.length} challenges to ongoing status:`, challengeIds);"
    },
    {
      "file": "src/hooks/useAutoUpdateChallengeStatus.ts",
      "line": 44,
      "content": "console.error('Auto update challenge status error:', error);",
      "context": "42:         }\n43:       } catch (error) {\n44:         console.error('Auto update challenge status error:', error);\n45:       }\n46:     };"
    },
    {
      "file": "src/hooks/useAutoUpdateChallengeStatus.ts",
      "line": 71,
      "content": "console.error('Error updating challenge to ongoing:', error);",
      "context": "69: \n70:     if (error) {\n71:       console.error('Error updating challenge to ongoing:', error);\n72:       return { success: false, error };\n73:     }"
    },
    {
      "file": "src/hooks/useAutoUpdateChallengeStatus.ts",
      "line": 78,
      "content": "console.error('Update challenge status error:', error);",
      "context": "76:     return { success: true, data };\n77:   } catch (error) {\n78:     console.error('Update challenge status error:', error);\n79:     return { success: false, error };\n80:   }"
    },
    {
      "file": "src/hooks/useAutomatedMigration.tsx",
      "line": 67,
      "content": "const originalError = console.error;",
      "context": "65:       // Capture console logs for real-time feedback\n66:       const originalLog = console.log;\n67:       const originalError = console.error;\n68: \n69:       console.log = (...args) => {"
    },
    {
      "file": "src/hooks/useAutomatedMigration.tsx",
      "line": 74,
      "content": "console.error = (...args) => {",
      "context": "72:       };\n73: \n74:       console.error = (...args) => {\n75:         setLogs(prev => [...prev, `[ERROR] ${args.join(' ')}`]);\n76:         originalError(...args);"
    },
    {
      "file": "src/hooks/useAutomatedMigration.tsx",
      "line": 89,
      "content": "console.error = originalError;",
      "context": "87:       // Restore original console functions\n88:       console.log = originalLog;\n89:       console.error = originalError;\n90: \n91:       if (result?.success) {"
    },
    {
      "file": "src/hooks/useAvailableUsers.tsx",
      "line": 37,
      "content": "console.error('❌ Registration error:', regError);",
      "context": "35: \n36:         if (regError) {\n37:           console.error('❌ Registration error:', regError);\n38:           throw regError;\n39:         }"
    },
    {
      "file": "src/hooks/useAvailableUsers.tsx",
      "line": 60,
      "content": "console.error('❌ Demo users error:', demoError);",
      "context": "58: \n59:         if (demoError) {\n60:           console.error('❌ Demo users error:', demoError);\n61:           throw demoError;\n62:         }"
    },
    {
      "file": "src/hooks/useAvailableUsers.tsx",
      "line": 85,
      "content": "console.error('❌ Players error:', playersError);",
      "context": "83: \n84:         if (playersError) {\n85:           console.error('❌ Players error:', playersError);\n86:           throw playersError;\n87:         }"
    },
    {
      "file": "src/hooks/useAvailableUsers.tsx",
      "line": 130,
      "content": "console.error('❌ Error generating users:', error);",
      "context": "128:         return [];\n129:       } catch (error) {\n130:         console.error('❌ Error generating users:', error);\n131:         toast.error('Lỗi khi tạo danh sách người chơi');\n132:         return [];"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 51,
      "content": "console.error('Error validating tournament:', error);",
      "context": "49: \n50:         if (error) {\n51:           console.error('Error validating tournament:', error);\n52:           return { valid: false, reason: error.message || 'Validation failed' };\n53:         }"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 57,
      "content": "console.error('Error in validateTournament:', error);",
      "context": "55:         return data as any as BracketValidation;\n56:       } catch (error) {\n57:         console.error('Error in validateTournament:', error);\n58:         return { valid: false, reason: 'Validation error' };\n59:       } finally {"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 91,
      "content": "console.error('Error fetching tournament:', tournamentError);",
      "context": "89: \n90:         if (tournamentError) {\n91:           console.error('Error fetching tournament:', tournamentError);\n92:           toast.error('Không thể lấy thông tin giải đấu');\n93:           return { error: tournamentError.message };"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 146,
      "content": "console.error('Error inserting SABO-32 matches:', insertError);",
      "context": "144: \n145:               if (insertError) {\n146:                 console.error('Error inserting SABO-32 matches:', insertError);\n147:                 toast.error(`Lỗi tạo matches SABO-32: ${insertError.message}`);\n148:                 return { error: insertError.message };"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 154,
      "content": "console.error('SABO-32 generation failed:', error);",
      "context": "152:               return { success: true, matches_created: 53 };\n153:             } catch (error) {\n154:               console.error('SABO-32 generation failed:', error);\n155:               toast.error(`Lỗi tạo bảng đấu SABO-32: ${error}`);\n156:               return { error: 'SABO-32 generation failed' };"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 179,
      "content": "console.error('SABO bracket generation error:', bracketError);",
      "context": "177: \n178:             if (bracketError) {\n179:               console.error('SABO bracket generation error:', bracketError);\n180:               console.log('🔄 SABO function failed, trying client-side fallback...');\n181:               "
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 195,
      "content": "console.error('Client-side fallback failed:', fallbackError);",
      "context": "193:                 }\n194:               } catch (fallbackError) {\n195:                 console.error('Client-side fallback failed:', fallbackError);\n196:                 toast.error(`Lỗi tạo bảng đấu SABO: ${bracketError.message}`);\n197:                 return { error: bracketError.message };"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 203,
      "content": "console.error('SABO function returned error:', result);",
      "context": "201:             const saboResult = result as { success?: boolean; error?: string };\n202:             if (!saboResult?.success) {\n203:               console.error('SABO function returned error:', result);\n204:               console.log('🔄 SABO function failed, trying client-side fallback...');\n205:               "
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 219,
      "content": "console.error('Client-side fallback failed:', fallbackError);",
      "context": "217:                 }\n218:               } catch (fallbackError) {\n219:                 console.error('Client-side fallback failed:', fallbackError);\n220:                 toast.error(`Lỗi SABO: ${saboResult?.error || 'Unknown error'}`);\n221:                 return { error: saboResult?.error || 'Unknown error' };"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 228,
      "content": "console.error('Exception calling SABO function:', error);",
      "context": "226:             return { success: true };\n227:           } catch (error) {\n228:             console.error('Exception calling SABO function:', error);\n229:             console.log('🔄 SABO function exception, trying client-side fallback...');\n230:             "
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 244,
      "content": "console.error('Client-side fallback failed:', fallbackError);",
      "context": "242:               }\n243:             } catch (fallbackError) {\n244:               console.error('Client-side fallback failed:', fallbackError);\n245:               toast.error('Lỗi khi gọi function SABO');\n246:               return { error: 'Function call failed' };"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 295,
      "content": "console.warn(`❌ ${funcName} failed:`, error.message);",
      "context": "293: \n294:               if (error) {\n295:                 console.warn(`❌ ${funcName} failed:`, error.message);\n296:                 lastError = error;\n297:                 continue;"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 314,
      "content": "console.error('Notification error:', notificationError);",
      "context": "312:                   });\n313:                 } catch (notificationError) {\n314:                   console.error('Notification error:', notificationError);\n315:                 }\n316: "
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 323,
      "content": "console.warn(`❌ ${funcName} exception:`, funcError);",
      "context": "321:               }\n322:             } catch (funcError) {\n323:               console.warn(`❌ ${funcName} exception:`, funcError);\n324:               lastError = funcError;\n325:               continue;"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 330,
      "content": "console.error('All double elimination functions failed:', lastError);",
      "context": "328: \n329:           // If all functions failed\n330:           console.error('All double elimination functions failed:', lastError);\n331:           toast.error(`Không thể tạo bảng đấu Double Elimination: ${lastError?.message || 'Tất cả functions đều thất bại'}`);\n332:           return { error: lastError?.message || 'All double elimination functions failed' };"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 373,
      "content": "console.error('Notification error:', notificationError);",
      "context": "371:               });\n372:             } catch (notificationError) {\n373:               console.error('Notification error:', notificationError);\n374:             }\n375:           }"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 380,
      "content": "console.error('Error in generateBracket:', error);",
      "context": "378:         }\n379:       } catch (error) {\n380:         console.error('Error in generateBracket:', error);\n381:         toast.error('Có lỗi xảy ra khi tạo bảng đấu');\n382:         return { error: 'Generation failed' };"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 413,
      "content": "console.error('Error in reseedTournament:', error);",
      "context": "411:         return result;\n412:       } catch (error) {\n413:         console.error('Error in reseedTournament:', error);\n414:         toast.error('Có lỗi xảy ra khi sắp xếp lại');\n415:         return { error: 'Reseeding failed' };"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 437,
      "content": "console.error('Error fetching bracket data:', error);",
      "context": "435:       return data;\n436:     } catch (error) {\n437:       console.error('Error fetching bracket data:', error);\n438:       return null;\n439:     }"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 475,
      "content": "console.error('Error fetching seeding:', error);",
      "context": "473:       );\n474:     } catch (error) {\n475:       console.error('Error fetching seeding:', error);\n476:       return [];\n477:     }"
    },
    {
      "file": "src/hooks/useBracketManagement.ts",
      "line": 39,
      "content": "console.error('Error loading tournament participants:', error);",
      "context": "37:         setSelectedPlayers(participants); // Auto-select all participants\n38:       } catch (error) {\n39:         console.error('Error loading tournament participants:', error);\n40:         toast.error('Failed to load tournament participants');\n41:       } finally {"
    },
    {
      "file": "src/hooks/useBracketManagement.ts",
      "line": 62,
      "content": "console.error('Error generating random bracket:', error);",
      "context": "60:       toast.success('Đã tạo bảng đấu ngẫu nhiên thành công!');\n61:     } catch (error) {\n62:       console.error('Error generating random bracket:', error);\n63:       toast.error('Lỗi khi tạo bảng đấu ngẫu nhiên');\n64:     } finally {"
    },
    {
      "file": "src/hooks/useBracketManagement.ts",
      "line": 83,
      "content": "console.error('Error generating seeded bracket:', error);",
      "context": "81:       toast.success('Đã tạo bảng đấu theo seeding thành công!');\n82:     } catch (error) {\n83:       console.error('Error generating seeded bracket:', error);\n84:       toast.error('Lỗi khi tạo bảng đấu theo seeding');\n85:     } finally {"
    },
    {
      "file": "src/hooks/useBracketManagement.ts",
      "line": 115,
      "content": "console.error('Error saving bracket:', error);",
      "context": "113:         }\n114:       } catch (error) {\n115:         console.error('Error saving bracket:', error);\n116:         toast.error('Lỗi khi lưu bảng đấu');\n117:         return false;"
    },
    {
      "file": "src/hooks/useBracketManagement.ts",
      "line": 132,
      "content": "console.error('Error loading available players:', error);",
      "context": "130:       setAvailablePlayers(players);\n131:     } catch (error) {\n132:       console.error('Error loading available players:', error);\n133:       toast.error('Failed to load available players');\n134:     } finally {"
    },
    {
      "file": "src/hooks/useBracketRepair.ts",
      "line": 71,
      "content": "console.error('❌ Bracket repair failed:', error);",
      "context": "69:     },\n70:     onError: error => {\n71:       console.error('❌ Bracket repair failed:', error);\n72:       toast.error('Failed to repair bracket: ' + (error as Error).message);\n73:     },"
    },
    {
      "file": "src/hooks/useCachedLeaderboard.ts",
      "line": 128,
      "content": "console.error('Failed to fetch leaderboard:', err);",
      "context": "126:         return leaderboardData;\n127:       } catch (err: any) {\n128:         console.error('Failed to fetch leaderboard:', err);\n129:         setError(err.message || 'Failed to load leaderboard');\n130:         return [];"
    },
    {
      "file": "src/hooks/useChallengeNotifications.tsx",
      "line": 104,
      "content": "console.error('❌ Error fetching notifications:', err);",
      "context": "102:       const errorMessage = err instanceof Error ? err.message : 'Failed to fetch notifications';\n103:       setError(errorMessage);\n104:       console.error('❌ Error fetching notifications:', err);\n105:     } finally {\n106:       setLoading(false);"
    },
    {
      "file": "src/hooks/useChallengeNotifications.tsx",
      "line": 117,
      "content": "console.error('❌ Error refreshing unread count:', err);",
      "context": "115:       setUnreadCount(count);\n116:     } catch (err) {\n117:       console.error('❌ Error refreshing unread count:', err);\n118:     }\n119:   }, [user?.id]);"
    },
    {
      "file": "src/hooks/useChallengeNotifications.tsx",
      "line": 131,
      "content": "console.error('❌ Error refreshing stats:', err);",
      "context": "129:       }\n130:     } catch (err) {\n131:       console.error('❌ Error refreshing stats:', err);\n132:     }\n133:   }, [user?.id]);"
    },
    {
      "file": "src/hooks/useChallengeNotifications.tsx",
      "line": 162,
      "content": "console.error('❌ Error marking notification as read:', err);",
      "context": "160:       }\n161:     } catch (err) {\n162:       console.error('❌ Error marking notification as read:', err);\n163:       toast.error('Không thể đánh dấu thông báo đã đọc');\n164:     }"
    },
    {
      "file": "src/hooks/useChallengeNotifications.tsx",
      "line": 189,
      "content": "console.error('❌ Error marking all notifications as read:', err);",
      "context": "187:       }\n188:     } catch (err) {\n189:       console.error('❌ Error marking all notifications as read:', err);\n190:       toast.error('Không thể đánh dấu tất cả thông báo');\n191:     }"
    },
    {
      "file": "src/hooks/useChallengeNotifications.tsx",
      "line": 215,
      "content": "console.error('❌ Error deleting notification:', err);",
      "context": "213:       }\n214:     } catch (err) {\n215:       console.error('❌ Error deleting notification:', err);\n216:       toast.error('Không thể xóa thông báo');\n217:     }"
    },
    {
      "file": "src/hooks/useChallengeNotifications.tsx",
      "line": 235,
      "content": "console.error('❌ Error creating notification:', err);",
      "context": "233:       }\n234:     } catch (err) {\n235:       console.error('❌ Error creating notification:', err);\n236:     }\n237:   }, [user?.id]);"
    },
    {
      "file": "src/hooks/useChallengeNotifications.tsx",
      "line": 371,
      "content": "console.error('❌ Error getting notification count:', err);",
      "context": "369:       setUnreadCount(count);\n370:     } catch (err) {\n371:       console.error('❌ Error getting notification count:', err);\n372:     } finally {\n373:       setLoading(false);"
    },
    {
      "file": "src/hooks/useChallengeNotifications.tsx",
      "line": 408,
      "content": "console.error('❌ Error fetching challenge notifications:', err);",
      "context": "406:       setNotifications(result.notifications);\n407:     } catch (err) {\n408:       console.error('❌ Error fetching challenge notifications:', err);\n409:     } finally {\n410:       setLoading(false);"
    },
    {
      "file": "src/hooks/useChallengeWorkflow.tsx",
      "line": 103,
      "content": "console.error('Score submission error:', error);",
      "context": "101: \n102:       if (error) {\n103:         console.error('Score submission error:', error);\n104:         throw new Error(error.message || 'Failed to submit score');\n105:       }"
    },
    {
      "file": "src/hooks/useChallengeWorkflow.tsx",
      "line": 126,
      "content": "console.error('Error submitting score:', error);",
      "context": "124:     },\n125:     onError: (error: Error) => {\n126:       console.error('Error submitting score:', error);\n127:       toast.error(`Lỗi: ${error.message}`);\n128:     },"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 202,
      "content": "console.error('❌ Challenge fetch error:', err);",
      "context": "200:         err instanceof Error ? err.message : 'Unknown error occurred';\n201:       setError(errorMessage);\n202:       console.error('❌ Challenge fetch error:', err);\n203:       toast.error(`Error loading challenges: ${errorMessage}`);\n204:     } finally {"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 343,
      "content": "console.warn('Failed to create challenge notification:', notificationError);",
      "context": "341:         console.log('✅ Challenge notification created successfully');\n342:       } catch (notificationError) {\n343:         console.warn('Failed to create challenge notification:', notificationError);\n344:         // Don't throw error - challenge creation should still succeed\n345:       }"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 382,
      "content": "console.error('❌ Error calling accept_open_challenge:', error);",
      "context": "380: \n381:       if (error) {\n382:         console.error('❌ Error calling accept_open_challenge:', error);\n383:         throw new Error(`Không thể tham gia thách đấu: ${error.message}`);\n384:       }"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 396,
      "content": "console.error('❌ Challenge acceptance failed:', errorMsg);",
      "context": "394:             ? String(result.error)\n395:             : 'Không thể tham gia thách đấu';\n396:         console.error('❌ Challenge acceptance failed:', errorMsg);\n397:         throw new Error(errorMsg);\n398:       }"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 435,
      "content": "console.warn('Failed to create challenge accepted notification:', notificationError);",
      "context": "433:         }\n434:       } catch (notificationError) {\n435:         console.warn('Failed to create challenge accepted notification:', notificationError);\n436:       }\n437: "
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 448,
      "content": "console.error('❌ Accept challenge error:', err);",
      "context": "446:       const errorMessage =\n447:         err instanceof Error ? err.message : 'Không thể tham gia thách đấu';\n448:       console.error('❌ Accept challenge error:', err);\n449:       throw new Error(errorMessage);\n450:     }"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 476,
      "content": "console.error('❌ Error fetching challenge:', fetchError);",
      "context": "474: \n475:       if (fetchError) {\n476:         console.error('❌ Error fetching challenge:', fetchError);\n477:         throw new Error(\n478:           `Không thể tải thông tin thách đấu: ${fetchError.message}`"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 483,
      "content": "console.error('❌ Challenge not found:', challengeId);",
      "context": "481: \n482:       if (!challengeData) {\n483:         console.error('❌ Challenge not found:', challengeId);\n484:         throw new Error('Thách đấu không tồn tại hoặc đã được xử lý');\n485:       }"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 540,
      "content": "console.error('❌ Error updating challenge:', error);",
      "context": "538: \n539:       if (error) {\n540:         console.error('❌ Error updating challenge:', error);\n541:         throw new Error(`Không thể tham gia thách đấu: ${error.message}`);\n542:       }"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 545,
      "content": "console.error('❌ No data returned from update');",
      "context": "543: \n544:       if (!data) {\n545:         console.error('❌ No data returned from update');\n546:         throw new Error('Thách đấu đã được người khác tham gia');\n547:       }"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 580,
      "content": "console.error('❌ Error creating match record:', matchError);",
      "context": "578: \n579:       if (matchError) {\n580:         console.error('❌ Error creating match record:', matchError);\n581:         console.error('❌ Match error details:', {\n582:           message: matchError.message,"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 581,
      "content": "console.error('❌ Match error details:', {",
      "context": "579:       if (matchError) {\n580:         console.error('❌ Error creating match record:', matchError);\n581:         console.error('❌ Match error details:', {\n582:           message: matchError.message,\n583:           code: matchError.code,"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 611,
      "content": "console.error('❌ Accept challenge error:', err);",
      "context": "609:       const errorMessage =\n610:         err instanceof Error ? err.message : 'Không thể tham gia thách đấu';\n611:       console.error('❌ Accept challenge error:', err);\n612:       throw new Error(errorMessage);\n613:     }"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 675,
      "content": "console.warn('Failed to create challenge declined notification:', notificationError);",
      "context": "673:         }\n674:       } catch (notificationError) {\n675:         console.warn('Failed to create challenge declined notification:', notificationError);\n676:       }\n677: "
    },
    {
      "file": "src/hooks/useCheckIn.tsx",
      "line": 84,
      "content": "console.error('Check-in error:', error);",
      "context": "82:     },\n83:     onError: error => {\n84:       console.error('Check-in error:', error);\n85:       toast.error('Có lỗi xảy ra khi check-in');\n86:     },"
    },
    {
      "file": "src/hooks/useClubDashboard.tsx",
      "line": 169,
      "content": "console.error('Error setting up realtime:', error);",
      "context": "167:         );\n168:       } catch (error) {\n169:         console.error('Error setting up realtime:', error);\n170:         setData(prev =>\n171:           prev"
    },
    {
      "file": "src/hooks/useClubDashboard.tsx",
      "line": 208,
      "content": "console.log('Club data:', clubData, 'Error:', clubError);",
      "context": "206:         .single();\n207: \n208:       console.log('Club data:', clubData, 'Error:', clubError);\n209: \n210:       if (clubError) throw clubError;"
    },
    {
      "file": "src/hooks/useClubDashboard.tsx",
      "line": 305,
      "content": "console.error('Error fetching dashboard data:', error);",
      "context": "303:       setData(dashboardData);\n304:     } catch (error: any) {\n305:       console.error('Error fetching dashboard data:', error);\n306:       setError(error.message);\n307:       setData(prev =>"
    },
    {
      "file": "src/hooks/useClubOwnership.ts",
      "line": 51,
      "content": "console.error('Error in useClubOwnership:', error);",
      "context": "49:         }\n50:       } catch (error) {\n51:         console.error('Error in useClubOwnership:', error);\n52:         setIsClubOwner(false);\n53:         setClubProfile(null);"
    },
    {
      "file": "src/hooks/useClubOwnershipV2.ts",
      "line": 52,
      "content": "console.error('Error checking club ownership:', error);",
      "context": "50: \n51:         if (error) {\n52:           console.error('Error checking club ownership:', error);\n53:           setData(prev => ({\n54:             ...prev,"
    },
    {
      "file": "src/hooks/useClubOwnershipV2.ts",
      "line": 83,
      "content": "console.error('Error in useClubOwnershipV2:', error);",
      "context": "81:         });\n82:       } catch (error) {\n83:         console.error('Error in useClubOwnershipV2:', error);\n84:         setData(prev => ({\n85:           ...prev,"
    },
    {
      "file": "src/hooks/useClubTrustScore.tsx",
      "line": 101,
      "content": "console.error('Trust score fetch error:', err);",
      "context": "99:         err instanceof Error ? err.message : 'Failed to fetch trust scores';\n100:       setError(errorMessage);\n101:       console.error('Trust score fetch error:', err);\n102:     } finally {\n103:       setLoading(false);"
    },
    {
      "file": "src/hooks/useCompletedChallenges.ts",
      "line": 48,
      "content": "console.error('❌ Error fetching completed challenges:', error);",
      "context": "46: \n47:       if (error) {\n48:         console.error('❌ Error fetching completed challenges:', error);\n49:         throw error;\n50:       }"
    },
    {
      "file": "src/hooks/useCompletedTournamentTemplates.tsx",
      "line": 78,
      "content": "console.error('Error fetching completed tournaments:', error);",
      "context": "76:       setCompletedTournaments(completedData);\n77:     } catch (error) {\n78:       console.error('Error fetching completed tournaments:', error);\n79:       toast.error('Không thể tải dữ liệu giải đấu đã hoàn thành');\n80:     } finally {"
    },
    {
      "file": "src/hooks/useCompletedTournamentTemplates.tsx",
      "line": 144,
      "content": "console.error('Error loading tournament bracket data:', error);",
      "context": "142:       return bracketData;\n143:     } catch (error) {\n144:       console.error('Error loading tournament bracket data:', error);\n145:       toast.error('Không thể tải dữ liệu bracket giải đấu');\n146:       return null;"
    },
    {
      "file": "src/hooks/useComprehensiveTournamentFix.ts",
      "line": 51,
      "content": "console.error('❌ Health check error:', error);",
      "context": "49: \n50:       if (error) {\n51:         console.error('❌ Health check error:', error);\n52:         toast.error('Lỗi khi kiểm tra sức khỏe tournaments');\n53:         return null;"
    },
    {
      "file": "src/hooks/useComprehensiveTournamentFix.ts",
      "line": 70,
      "content": "console.error('❌ Exception in health check:', error);",
      "context": "68:       return result;\n69:     } catch (error) {\n70:       console.error('❌ Exception in health check:', error);\n71:       toast.error('Có lỗi xảy ra khi kiểm tra sức khỏe');\n72:       return null;"
    },
    {
      "file": "src/hooks/useComprehensiveTournamentFix.ts",
      "line": 89,
      "content": "console.error('❌ Fix error:', error);",
      "context": "87: \n88:       if (error) {\n89:         console.error('❌ Fix error:', error);\n90:         toast.error('Lỗi khi sửa chữa tournaments');\n91:         return null;"
    },
    {
      "file": "src/hooks/useComprehensiveTournamentFix.ts",
      "line": 111,
      "content": "console.error('❌ Exception in fix:', error);",
      "context": "109:       return result;\n110:     } catch (error) {\n111:       console.error('❌ Exception in fix:', error);\n112:       toast.error('Có lỗi xảy ra khi sửa chữa');\n113:       return null;"
    },
    {
      "file": "src/hooks/useContent.tsx",
      "line": 119,
      "content": "console.error('Error creating post:', error);",
      "context": "117:     },\n118:     onError: error => {\n119:       console.error('Error creating post:', error);\n120:       toast.error('Có lỗi xảy ra khi tạo bài viết');\n121:     },"
    },
    {
      "file": "src/hooks/useDailyChallenges.tsx",
      "line": 27,
      "content": "console.error('Error fetching daily challenges:', error);",
      "context": "25:       setDailyChallenges(count || 0);\n26:     } catch (error) {\n27:       console.error('Error fetching daily challenges:', error);\n28:     } finally {\n29:       setLoading(false);"
    },
    {
      "file": "src/hooks/useDailyLimits.tsx",
      "line": 101,
      "content": "console.error('Error updating daily stats:', error);",
      "context": "99:     },\n100:     onError: error => {\n101:       console.error('Error updating daily stats:', error);\n102:       toast.error('Failed to update daily stats');\n103:     },"
    },
    {
      "file": "src/hooks/useDatabaseOptimization.tsx",
      "line": 265,
      "content": "console.error(",
      "context": "263:       } catch (error) {\n264:         const duration = performance.now() - startTime;\n265:         console.error(\n266:           `DB operation failed: ${operation} after ${duration.toFixed(2)}ms`,\n267:           error"
    },
    {
      "file": "src/hooks/useDiscovery.tsx",
      "line": 72,
      "content": "console.error('Error getting location:', error);",
      "context": "70:         },\n71:         error => {\n72:           console.error('Error getting location:', error);\n73:         }\n74:       );"
    },
    {
      "file": "src/hooks/useDiscovery.tsx",
      "line": 352,
      "content": "console.error('Error sending challenge:', error);",
      "context": "350:     },\n351:     onError: error => {\n352:       console.error('Error sending challenge:', error);\n353:       toast.error('Có lỗi xảy ra khi gửi thách đấu');\n354:     },"
    },
    {
      "file": "src/hooks/useEloRules.ts",
      "line": 37,
      "content": "console.error('Error fetching ELO rules:', error);",
      "context": "35:       }));\n36:     } catch (error) {\n37:       console.error('Error fetching ELO rules:', error);\n38:       toast({\n39:         title: 'Error',"
    },
    {
      "file": "src/hooks/useEloRules.ts",
      "line": 57,
      "content": "console.error('Error creating ELO rule:', error);",
      "context": "55:       });\n56:     } catch (error) {\n57:       console.error('Error creating ELO rule:', error);\n58:       toast({\n59:         title: 'Error',"
    },
    {
      "file": "src/hooks/useEloRules.ts",
      "line": 75,
      "content": "console.error('Error updating ELO rule:', error);",
      "context": "73:       });\n74:     } catch (error) {\n75:       console.error('Error updating ELO rule:', error);\n76:       toast({\n77:         title: 'Error',"
    },
    {
      "file": "src/hooks/useEloRules.ts",
      "line": 93,
      "content": "console.error('Error deleting ELO rule:', error);",
      "context": "91:       });\n92:     } catch (error) {\n93:       console.error('Error deleting ELO rule:', error);\n94:       toast({\n95:         title: 'Error',"
    },
    {
      "file": "src/hooks/useEloRules.ts",
      "line": 143,
      "content": "console.error('System validation error:', error);",
      "context": "141:       };\n142:     } catch (error) {\n143:       console.error('System validation error:', error);\n144:       throw error;\n145:     }"
    },
    {
      "file": "src/hooks/useEmailNotifications.tsx",
      "line": 20,
      "content": "console.error('Failed to send welcome email:', error);",
      "context": "18:           console.log('Welcome email sent successfully');\n19:         } catch (error) {\n20:           console.error('Failed to send welcome email:', error);\n21:         }\n22:       };"
    },
    {
      "file": "src/hooks/useEmailNotifications.tsx",
      "line": 40,
      "content": "console.error('Failed to send tournament confirmation:', error);",
      "context": "38:       toast.success('Email xác nhận giải đấu đã được gửi!');\n39:     } catch (error) {\n40:       console.error('Failed to send tournament confirmation:', error);\n41:       toast.error('Không thể gửi email xác nhận');\n42:     }"
    },
    {
      "file": "src/hooks/useEmailNotifications.tsx",
      "line": 56,
      "content": "console.error('Failed to send match result notification:', error);",
      "context": "54:       toast.success('Thông báo kết quả trận đấu đã được gửi!');\n55:     } catch (error) {\n56:       console.error('Failed to send match result notification:', error);\n57:     }\n58:   };"
    },
    {
      "file": "src/hooks/useEmailNotifications.tsx",
      "line": 75,
      "content": "console.error('Failed to send ranking update notification:', error);",
      "context": "73:       toast.success('Thông báo thay đổi xếp hạng đã được gửi!');\n74:     } catch (error) {\n75:       console.error('Failed to send ranking update notification:', error);\n76:     }\n77:   };"
    },
    {
      "file": "src/hooks/useEmailNotifications.tsx",
      "line": 90,
      "content": "console.error('Failed to send payment confirmation:', error);",
      "context": "88:       toast.success('Email xác nhận thanh toán đã được gửi!');\n89:     } catch (error) {\n90:       console.error('Failed to send payment confirmation:', error);\n91:     }\n92:   };"
    },
    {
      "file": "src/hooks/useEnhancedChallenges.tsx",
      "line": 126,
      "content": "console.error('Error completing challenge:', error);",
      "context": "124:     },\n125:     onError: error => {\n126:       console.error('Error completing challenge:', error);\n127:       toast.error('Lỗi khi hoàn thành thách đấu');\n128:     },"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 97,
      "content": "console.error('❌ Error auto-expiring challenges:', error);",
      "context": "95: \n96:         if (error) {\n97:           console.error('❌ Error auto-expiring challenges:', error);\n98:         } else {\n99:           console.log('✅ Auto-expired challenges updated in database');"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 115,
      "content": "console.error('Error in auto-expire logic:', error);",
      "context": "113:       }\n114:     } catch (error) {\n115:       console.error('Error in auto-expire logic:', error);\n116:     }\n117:   };"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 312,
      "content": "console.error('❌ Enhanced challenges fetch error:', err);",
      "context": "310:       const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n311:       setError(errorMessage);\n312:       console.error('❌ Enhanced challenges fetch error:', err);\n313:       toast.error(`Error loading challenges: ${errorMessage}`);\n314:     } finally {"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 502,
      "content": "console.log('🎯 accept_open_challenge result:', { result, error });",
      "context": "500:       });\n501: \n502:       console.log('🎯 accept_open_challenge result:', { result, error });\n503: \n504:       if (error) {"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 534,
      "content": "console.log('🚨 Server SPA Error:', {",
      "context": "532:           \n533:           // ✅ Show actual server response for debugging\n534:           console.log('🚨 Server SPA Error:', {\n535:             response,\n536:             requiredSpa,"
    },
    {
      "file": "src/hooks/useEnhancedNotifications.tsx",
      "line": 38,
      "content": "console.error('Error fetching notification summary:', error);",
      "context": "36: \n37:       if (error) {\n38:         console.error('Error fetching notification summary:', error);\n39:         return;\n40:       }"
    },
    {
      "file": "src/hooks/useEnhancedNotifications.tsx",
      "line": 50,
      "content": "console.error('Error in fetchNotificationSummary:', error);",
      "context": "48:       }\n49:     } catch (error) {\n50:       console.error('Error in fetchNotificationSummary:', error);\n51:     } finally {\n52:       setLoading(false);"
    },
    {
      "file": "src/hooks/useEnhancedNotifications.tsx",
      "line": 68,
      "content": "console.error('Error marking notifications as read:', error);",
      "context": "66: \n67:         if (error) {\n68:           console.error('Error marking notifications as read:', error);\n69:           return;\n70:         }"
    },
    {
      "file": "src/hooks/useEnhancedNotifications.tsx",
      "line": 84,
      "content": "console.error('Error in markNotificationsAsRead:', error);",
      "context": "82:         await fetchNotificationSummary();\n83:       } catch (error) {\n84:         console.error('Error in markNotificationsAsRead:', error);\n85:       }\n86:     },"
    },
    {
      "file": "src/hooks/useEnhancedTournamentMatches.ts",
      "line": 85,
      "content": "console.error('❌ Error in enhanced fetchMatches:', err);",
      "context": "83:         console.log('✅ Enhanced matches loaded:', matchesWithProfiles.length);\n84:       } catch (err: any) {\n85:         console.error('❌ Error in enhanced fetchMatches:', err);\n86:         setError(err.message || 'Failed to fetch matches');\n87:       } finally {"
    },
    {
      "file": "src/hooks/useErrorHandler.tsx",
      "line": 12,
      "content": "console.error('[ErrorHandler]', {",
      "context": "10: export const useErrorHandler = () => {\n11:   const handleError = useCallback((error: Error, context?: ErrorContext) => {\n12:     console.error('[ErrorHandler]', {\n13:       error: error.message,\n14:       stack: error.stack,"
    },
    {
      "file": "src/hooks/useFileUpload.tsx",
      "line": 91,
      "content": "console.error('Upload error:', error);",
      "context": "89: \n90:       if (error) {\n91:         console.error('Upload error:', error);\n92:         toast.error(`Lỗi upload: ${error.message}`);\n93:         return { error: error.message };"
    },
    {
      "file": "src/hooks/useFileUpload.tsx",
      "line": 111,
      "content": "console.error('Upload exception:', error);",
      "context": "109:       };\n110:     } catch (error) {\n111:       console.error('Upload exception:', error);\n112:       const errorMessage =\n113:         error instanceof Error ? error.message : 'Unknown error occurred';"
    },
    {
      "file": "src/hooks/useFileUpload.tsx",
      "line": 129,
      "content": "console.error('Delete error:', error);",
      "context": "127: \n128:       if (error) {\n129:         console.error('Delete error:', error);\n130:         toast.error(`Lỗi xóa file: ${error.message}`);\n131:         return false;"
    },
    {
      "file": "src/hooks/useFileUpload.tsx",
      "line": 137,
      "content": "console.error('Delete exception:', error);",
      "context": "135:       return true;\n136:     } catch (error) {\n137:       console.error('Delete exception:', error);\n138:       const errorMessage =\n139:         error instanceof Error ? error.message : 'Unknown error occurred';"
    },
    {
      "file": "src/hooks/useGameConfigStats.ts",
      "line": 95,
      "content": "console.error('Error fetching game config stats:', error);",
      "context": "93:       setInconsistencies(issues);\n94:     } catch (error) {\n95:       console.error('Error fetching game config stats:', error);\n96:     } finally {\n97:       setLoading(false);"
    },
    {
      "file": "src/hooks/useGameConfigSync.ts",
      "line": 55,
      "content": "console.error('Error checking inconsistencies:', error);",
      "context": "53:       return issues;\n54:     } catch (error) {\n55:       console.error('Error checking inconsistencies:', error);\n56:       return [];\n57:     }"
    },
    {
      "file": "src/hooks/useGameConfigSync.ts",
      "line": 74,
      "content": "console.error('Error syncing to constants:', error);",
      "context": "72:       await checkInconsistencies();\n73:     } catch (error) {\n74:       console.error('Error syncing to constants:', error);\n75:       toast.error('Sync Failed', {\n76:         description: 'Failed to update constants',"
    },
    {
      "file": "src/hooks/useGameConfigSync.ts",
      "line": 97,
      "content": "console.error('Error syncing from database:', error);",
      "context": "95:       await checkInconsistencies();\n96:     } catch (error) {\n97:       console.error('Error syncing from database:', error);\n98:       toast.error('Sync Failed', {\n99:         description: 'Failed to update database',"
    },
    {
      "file": "src/hooks/useGameConfigSync.ts",
      "line": 128,
      "content": "console.error('Error exporting config:', error);",
      "context": "126:       });\n127:     } catch (error) {\n128:       console.error('Error exporting config:', error);\n129:       toast.error('Export Failed', {\n130:         description: 'Failed to export configuration',"
    },
    {
      "file": "src/hooks/useLeaderboard.tsx",
      "line": 91,
      "content": "console.log('Player rankings table not available:', tableError.message);",
      "context": "89: \n90:       if (tableError) {\n91:         console.log('Player rankings table not available:', tableError.message);\n92:         setLeaderboard([]);\n93:         setTotalCount(0);"
    },
    {
      "file": "src/hooks/useLeaderboard.tsx",
      "line": 213,
      "content": "console.error('Leaderboard fetch error:', err);",
      "context": "211:       setTotalCount(count || 0);\n212:     } catch (err) {\n213:       console.error('Leaderboard fetch error:', err);\n214:       setError(\n215:         err instanceof Error ? err.message : 'Failed to fetch leaderboard'"
    },
    {
      "file": "src/hooks/useLeaderboard.tsx",
      "line": 256,
      "content": "console.error('Leaderboard stats error:', err);",
      "context": "254:       setStats(calculatedStats);\n255:     } catch (err) {\n256:       console.error('Leaderboard stats error:', err);\n257:       setError(\n258:         err instanceof Error ? err.message : 'Failed to fetch leaderboard stats'"
    },
    {
      "file": "src/hooks/useLoyalty.tsx",
      "line": 150,
      "content": "console.error('Error earning points:', error);",
      "context": "148:     },\n149:     onError: error => {\n150:       console.error('Error earning points:', error);\n151:       toast.error('Có lỗi xảy ra khi cộng điểm');\n152:     },"
    },
    {
      "file": "src/hooks/useLoyalty.tsx",
      "line": 192,
      "content": "console.error('Error spending points:', error);",
      "context": "190:     },\n191:     onError: error => {\n192:       console.error('Error spending points:', error);\n193:       toast.error('Có lỗi xảy ra khi sử dụng điểm');\n194:     },"
    },
    {
      "file": "src/hooks/useLoyalty.tsx",
      "line": 227,
      "content": "console.error('Error redeeming reward:', error);",
      "context": "225:     },\n226:     onError: error => {\n227:       console.error('Error redeeming reward:', error);\n228:       toast.error('Có lỗi xảy ra khi đổi phần thưởng');\n229:     },"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 140,
      "content": "console.error('Match update error:', matchError);",
      "context": "138: \n139:       if (matchError) {\n140:         console.error('Match update error:', matchError);\n141:         throw matchError;\n142:       }"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 162,
      "content": "console.error('Update score error:', error);",
      "context": "160:     },\n161:     onError: (error: any) => {\n162:       console.error('Update score error:', error);\n163:       const errorMessage =\n164:         error?.message || 'Có lỗi không xác định khi cập nhật tỉ số';"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 187,
      "content": "console.error('Restore match error:', error);",
      "context": "185: \n186:       if (error) {\n187:         console.error('Restore match error:', error);\n188:         throw error;\n189:       }"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 199,
      "content": "console.error('Restore match error:', error);",
      "context": "197:     },\n198:     onError: (error: any) => {\n199:       console.error('Restore match error:', error);\n200:       const errorMessage = error?.message || 'Có lỗi khi khôi phục trận đấu';\n201:       toast.error(`Lỗi: ${errorMessage}`);"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 228,
      "content": "console.error('Start match error:', error);",
      "context": "226:     },\n227:     onError: error => {\n228:       console.error('Start match error:', error);\n229:       toast.error('Có lỗi khi bắt đầu trận đấu');\n230:     },"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 255,
      "content": "console.error('Cancel match error:', error);",
      "context": "253:     },\n254:     onError: error => {\n255:       console.error('Cancel match error:', error);\n256:       toast.error('Có lỗi khi hủy trận đấu');\n257:     },"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 286,
      "content": "console.error('Edit score error:', error);",
      "context": "284: \n285:       if (error) {\n286:         console.error('Edit score error:', error);\n287:         throw error;\n288:       }"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 310,
      "content": "console.error('Edit score error:', error);",
      "context": "308:     },\n309:     onError: (error: any) => {\n310:       console.error('Edit score error:', error);\n311:       const errorMessage =\n312:         error?.message || 'Có lỗi không xác định khi sửa tỷ số';"
    },
    {
      "file": "src/hooks/useMatchResults.tsx",
      "line": 56,
      "content": "console.error('Error recording match:', error);",
      "context": "54:       return data;\n55:     } catch (error) {\n56:       console.error('Error recording match:', error);\n57:       toast.error('Failed to record match');\n58:       throw error;"
    },
    {
      "file": "src/hooks/useMatchResults.tsx",
      "line": 79,
      "content": "console.error('Error fetching match results:', error);",
      "context": "77:       return data || [];\n78:     } catch (error) {\n79:       console.error('Error fetching match results:', error);\n80:       return [];\n81:     }"
    },
    {
      "file": "src/hooks/useMatchResults.tsx",
      "line": 100,
      "content": "console.error('Error confirming match result:', error);",
      "context": "98:       return true;\n99:     } catch (error) {\n100:       console.error('Error confirming match result:', error);\n101:       toast.error('Failed to confirm match result');\n102:       return false;"
    },
    {
      "file": "src/hooks/useMatchResults.tsx",
      "line": 126,
      "content": "console.error('Error submitting dispute:', error);",
      "context": "124:       return true;\n125:     } catch (error) {\n126:       console.error('Error submitting dispute:', error);\n127:       toast.error('Failed to submit dispute');\n128:       return false;"
    },
    {
      "file": "src/hooks/useMatchResults.tsx",
      "line": 144,
      "content": "console.error('Error verifying match result:', error);",
      "context": "142:       return data;\n143:     } catch (error) {\n144:       console.error('Error verifying match result:', error);\n145:       toast.error('Failed to verify match result');\n146:       throw error;"
    },
    {
      "file": "src/hooks/useMatchResults.tsx",
      "line": 175,
      "content": "console.error('Error fetching player stats:', error);",
      "context": "173:       );\n174:     } catch (error) {\n175:       console.error('Error fetching player stats:', error);\n176:       return null;\n177:     }"
    },
    {
      "file": "src/hooks/useMatchResults.tsx",
      "line": 193,
      "content": "console.error('Error fetching club stats:', error);",
      "context": "191:       };\n192:     } catch (error) {\n193:       console.error('Error fetching club stats:', error);\n194:       return null;\n195:     }"
    },
    {
      "file": "src/hooks/useMatches.tsx",
      "line": 32,
      "content": "console.error('Error creating match:', err);",
      "context": "30:       return mockMatch;\n31:     } catch (err) {\n32:       console.error('Error creating match:', err);\n33:       setError(err instanceof Error ? err.message : 'Failed to create match');\n34:       return null;"
    },
    {
      "file": "src/hooks/useMessages.ts",
      "line": 272,
      "content": "console.error('Failed to fetch unread count:', err);",
      "context": "270:       setUnreadCount(count);\n271:     } catch (err) {\n272:       console.error('Failed to fetch unread count:', err);\n273:     }\n274:   }, [user?.id]);"
    },
    {
      "file": "src/hooks/useMessages.ts",
      "line": 285,
      "content": "console.error('Failed to fetch message stats:', err);",
      "context": "283:       setUnreadCount(messageStats.unread_count);\n284:     } catch (err) {\n285:       console.error('Failed to fetch message stats:', err);\n286:     }\n287:   }, [user?.id]);"
    },
    {
      "file": "src/hooks/useMilestones.tsx",
      "line": 45,
      "content": "console.error('Error fetching milestones:', error);",
      "context": "43: \n44:       if (error) {\n45:         console.error('Error fetching milestones:', error);\n46:         toast.error('Không thể tải milestones');\n47:         return [];"
    },
    {
      "file": "src/hooks/useMilestones.tsx",
      "line": 101,
      "content": "console.error('Error awarding milestone:', error);",
      "context": "99:     },\n100:     onError: (error) => {\n101:       console.error('Error awarding milestone:', error);\n102:       toast.error('Có lỗi khi cập nhật milestone');\n103:     },"
    },
    {
      "file": "src/hooks/useNotificationSound.ts",
      "line": 23,
      "content": "console.log('Could not play notification sound:', error);",
      "context": "21:     // Play sound with error handling\n22:     audioRef.current.play().catch(error => {\n23:       console.log('Could not play notification sound:', error);\n24:     });\n25:   };"
    },
    {
      "file": "src/hooks/useOpenChallenges.ts",
      "line": 82,
      "content": "console.error('Error fetching open challenges:', error);",
      "context": "80:       setOpenChallenges(enrichedChallenges as unknown as Challenge[]);\n81:     } catch (error) {\n82:       console.error('Error fetching open challenges:', error);\n83:       toast.error('Không thể tải danh sách thách đấu mở');\n84:     } finally {"
    },
    {
      "file": "src/hooks/useOpenChallenges.ts",
      "line": 133,
      "content": "console.error('Error updating challenge:', updateError);",
      "context": "131: \n132:       if (updateError) {\n133:         console.error('Error updating challenge:', updateError);\n134:         throw new Error('Thách đấu đã được người khác tham gia');\n135:       }"
    },
    {
      "file": "src/hooks/useOptimizedAuth.ts",
      "line": 81,
      "content": "console.error('Optimized auth check failed:', error);",
      "context": "79:           resolve(newState);\n80:         } catch (error) {\n81:           console.error('Optimized auth check failed:', error);\n82:           const errorState = {\n83:             user: null,"
    },
    {
      "file": "src/hooks/useOptimizedAuth.ts",
      "line": 109,
      "content": "console.error('Sign out error:', error);",
      "context": "107:       });\n108:     } catch (error) {\n109:       console.error('Sign out error:', error);\n110:     }\n111:   }, []);"
    },
    {
      "file": "src/hooks/useOptimizedAuth.ts",
      "line": 120,
      "content": "console.error('Initial auth check failed:', error);",
      "context": "118:         setAuthState(result);\n119:       } catch (error) {\n120:         console.error('Initial auth check failed:', error);\n121:         setAuthState({\n122:           user: null,"
    },
    {
      "file": "src/hooks/useOptimizedAuth.ts",
      "line": 149,
      "content": "console.error('Auth state change check failed:', error);",
      "context": "147:           setAuthState(result);\n148:         } catch (error) {\n149:           console.error('Auth state change check failed:', error);\n150:           setAuthState({\n151:             user: session.user,"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 377,
      "content": "console.error('❌ Challenge fetch error:', err);",
      "context": "375:           err instanceof Error ? err.message : 'Unknown error occurred';\n376:         setError(errorMessage);\n377:         console.error('❌ Challenge fetch error:', err);\n378:       } finally {\n379:         setLoading(false);"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 601,
      "content": "console.error('❌ Error creating match record:', matchError);",
      "context": "599: \n600:         if (matchError) {\n601:           console.error('❌ Error creating match record:', matchError);\n602:           console.warn(\n603:             '⚠️ Challenge accepted but match record creation failed'"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 651,
      "content": "console.error(",
      "context": "649: \n650:             if (notificationError) {\n651:               console.error(\n652:                 '❌ Error sending notification:',\n653:                 notificationError"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 659,
      "content": "console.error('❌ Failed to send notification:', notificationErr);",
      "context": "657:             }\n658:           } catch (notificationErr) {\n659:             console.error('❌ Failed to send notification:', notificationErr);\n660:           }\n661:         }"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 814,
      "content": "console.warn('Failed to credit SPA points:', spaError);",
      "context": "812: \n813:         if (spaError) {\n814:           console.warn('Failed to credit SPA points:', spaError);\n815:         }\n816:       } catch (error) {"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 817,
      "content": "console.warn('SPA points processing failed:', error);",
      "context": "815:         }\n816:       } catch (error) {\n817:         console.warn('SPA points processing failed:', error);\n818:       }\n819: "
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 842,
      "content": "console.warn('Failed to send notification:', error);",
      "context": "840:           });\n841:         } catch (error) {\n842:           console.warn('Failed to send notification:', error);\n843:         }\n844:       }"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 858,
      "content": "console.error('Error submitting score:', error);",
      "context": "856:     },\n857:     onError: error => {\n858:       console.error('Error submitting score:', error);\n859:       toast.error('Lỗi khi ghi nhận tỷ số');\n860:     },"
    },
    {
      "file": "src/hooks/useOptimizedMatches.tsx",
      "line": 73,
      "content": "console.warn('Live matches query failed, using fallback:', error);",
      "context": "71: \n72:       if (error) {\n73:         console.warn('Live matches query failed, using fallback:', error);\n74:         setLiveMatches([]);\n75:         return;"
    },
    {
      "file": "src/hooks/useOptimizedMatches.tsx",
      "line": 128,
      "content": "console.error('Error fetching live matches:', error);",
      "context": "126:       setLiveMatches(formatted);\n127:     } catch (error) {\n128:       console.error('Error fetching live matches:', error);\n129:       setLiveMatches([]);\n130:     }"
    },
    {
      "file": "src/hooks/useOptimizedMatches.tsx",
      "line": 175,
      "content": "console.warn('Scheduled matches query failed:', scheduledMatches.error);",
      "context": "173: \n174:       if (scheduledMatches.error) {\n175:         console.warn('Scheduled matches query failed:', scheduledMatches.error);\n176:       }\n177:       if (acceptedChallenges.error) {"
    },
    {
      "file": "src/hooks/useOptimizedMatches.tsx",
      "line": 243,
      "content": "console.error('Error fetching upcoming matches:', error);",
      "context": "241:       setUpcomingMatches(formatted);\n242:     } catch (error) {\n243:       console.error('Error fetching upcoming matches:', error);\n244:       setUpcomingMatches([]);\n245:     }"
    },
    {
      "file": "src/hooks/useOptimizedMatches.tsx",
      "line": 270,
      "content": "console.warn('Recent results query failed, using fallback:', error);",
      "context": "268: \n269:       if (error) {\n270:         console.warn('Recent results query failed, using fallback:', error);\n271:         setRecentResults([]);\n272:         return;"
    },
    {
      "file": "src/hooks/useOptimizedMatches.tsx",
      "line": 340,
      "content": "console.error('Error fetching recent results:', error);",
      "context": "338:       setRecentResults(formatted);\n339:     } catch (error) {\n340:       console.error('Error fetching recent results:', error);\n341:       setRecentResults([]);\n342:     }"
    },
    {
      "file": "src/hooks/useOptimizedMatches.tsx",
      "line": 379,
      "content": "console.error('Error refreshing matches:', err);",
      "context": "377:       ]);\n378:     } catch (err) {\n379:       console.error('Error refreshing matches:', err);\n380:       setError('Failed to refresh match data');\n381:     } finally {"
    },
    {
      "file": "src/hooks/useOptimizedTournaments.tsx",
      "line": 243,
      "content": "console.error('Tournament registration error:', error);",
      "context": "241:     },\n242:     onError: error => {\n243:       console.error('Tournament registration error:', error);\n244:       toast.error('Có lỗi xảy ra. Vui lòng thử lại.');\n245:     },"
    },
    {
      "file": "src/hooks/useOptimizedTournaments.tsx",
      "line": 268,
      "content": "console.error('Background sync error:', error);",
      "context": "266:         });\n267:       } catch (error) {\n268:         console.error('Background sync error:', error);\n269:       }\n270:     };"
    },
    {
      "file": "src/hooks/usePlayerActivityStats.tsx",
      "line": 27,
      "content": "console.error('Activity stats error:', error);",
      "context": "25: \n26:       if (error) {\n27:         console.error('Activity stats error:', error);\n28:         throw error;\n29:       }"
    },
    {
      "file": "src/hooks/usePlayerAvailability.tsx",
      "line": 43,
      "content": "console.error('Error fetching availability:', error);",
      "context": "41: \n42:       if (error && error.code !== 'PGRST116') {\n43:         console.error('Error fetching availability:', error);\n44:         return null;\n45:       }"
    },
    {
      "file": "src/hooks/usePlayerAvailability.tsx",
      "line": 79,
      "content": "console.error('Error fetching available players:', error);",
      "context": "77: \n78:         if (error) {\n79:           console.error('Error fetching available players:', error);\n80:           return [];\n81:         }"
    },
    {
      "file": "src/hooks/usePlayerAvailability.tsx",
      "line": 113,
      "content": "console.error('Update availability error:', error);",
      "context": "111:     },\n112:     onError: error => {\n113:       console.error('Update availability error:', error);\n114:       toast.error('Có lỗi xảy ra khi cập nhật trạng thái');\n115:     },"
    },
    {
      "file": "src/hooks/usePlayerAvailability.tsx",
      "line": 147,
      "content": "console.error('Send invite error:', error);",
      "context": "145:     },\n146:     onError: error => {\n147:       console.error('Send invite error:', error);\n148:       toast.error('Có lỗi xảy ra khi gửi lời mời');\n149:     },"
    },
    {
      "file": "src/hooks/usePlayerDashboard.ts",
      "line": 38,
      "content": "console.error('Dashboard stats error:', error);",
      "context": "36: \n37:         if (error) {\n38:           console.error('Dashboard stats error:', error);\n39:           throw error;\n40:         }"
    },
    {
      "file": "src/hooks/usePlayerDashboard.ts",
      "line": 50,
      "content": "console.error('Activity stats error:', activityError);",
      "context": "48: \n49:         if (activityError) {\n50:           console.error('Activity stats error:', activityError);\n51:           // Don't throw, just use default values for activity stats\n52:         }"
    },
    {
      "file": "src/hooks/usePlayerDashboard.ts",
      "line": 70,
      "content": "console.error('Error fetching dashboard stats:', error);",
      "context": "68:         };\n69:       } catch (error) {\n70:         console.error('Error fetching dashboard stats:', error);\n71:         // Return default values instead of throwing\n72:         return {"
    },
    {
      "file": "src/hooks/usePlayerRanking.ts",
      "line": 56,
      "content": "console.error('Error loading player ranking:', e);",
      "context": "54:       } catch (e: any) {\n55:         if (!cancelled) {\n56:           console.error('Error loading player ranking:', e);\n57:           setError(e.message || 'Load ranking failed');\n58:           // Fallback to unranked state"
    },
    {
      "file": "src/hooks/usePosts.tsx",
      "line": 296,
      "content": "console.error('Failed to toggle like:', err);",
      "context": "294:       );\n295:     } catch (err) {\n296:       console.error('Failed to toggle like:', err);\n297:     }\n298:   }, []);"
    },
    {
      "file": "src/hooks/usePosts.tsx",
      "line": 317,
      "content": "console.error('Failed to share post:', err);",
      "context": "315:       );\n316:     } catch (err) {\n317:       console.error('Failed to share post:', err);\n318:     }\n319:   }, []);"
    },
    {
      "file": "src/hooks/usePosts.tsx",
      "line": 326,
      "content": "console.error('Failed to delete post:', err);",
      "context": "324:       setPosts(prev => prev.filter(post => post.id !== postId));\n325:     } catch (err) {\n326:       console.error('Failed to delete post:', err);\n327:     }\n328:   }, []);"
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 63,
      "content": "console.error('Error fetching profile:', err);",
      "context": "61:       return userProfile;\n62:     } catch (err) {\n63:       console.error('Error fetching profile:', err);\n64:       setError(err instanceof Error ? err.message : 'Failed to fetch profile');\n65:       return null;"
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 118,
      "content": "console.error('Error updating profile:', err);",
      "context": "116:       return userProfile;\n117:     } catch (err) {\n118:       console.error('Error updating profile:', err);\n119:       setError(err instanceof Error ? err.message : 'Failed to update profile');\n120:       return null;"
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 190,
      "content": "console.error(",
      "context": "188:                   }\n189:                 } catch (error) {\n190:                   console.error(\n191:                     `[useProfile] Refresh attempt ${i + 1} failed:`,\n192:                     error"
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 232,
      "content": "console.error(",
      "context": "230:               }\n231:             } catch (error) {\n232:               console.error(\n233:                 '[useProfile] Failed to refresh profile after ranking update:',\n234:                 error"
    },
    {
      "file": "src/hooks/useProfileCache.ts",
      "line": 65,
      "content": "console.warn('⚠️ Error fetching profile from profiles table, trying player_rankings fallback:', error);",
      "context": "63: \n64:       if (error) {\n65:         console.warn('⚠️ Error fetching profile from profiles table, trying player_rankings fallback:', error);\n66:         \n67:         // Try player_rankings as fallback"
    },
    {
      "file": "src/hooks/useProfileCache.ts",
      "line": 75,
      "content": "console.error('❌ Error fetching from player_rankings fallback:', rankingError);",
      "context": "73: \n74:         if (rankingError) {\n75:           console.error('❌ Error fetching from player_rankings fallback:', rankingError);\n76:           return null;\n77:         }"
    },
    {
      "file": "src/hooks/useProfileCache.ts",
      "line": 110,
      "content": "console.error('Error in fetchProfile:', error);",
      "context": "108:       return data;\n109:     } catch (error) {\n110:       console.error('Error in fetchProfile:', error);\n111:       return null;\n112:     }"
    },
    {
      "file": "src/hooks/usePullToRefresh.tsx",
      "line": 60,
      "content": "console.error('Refresh error:', error);",
      "context": "58:         await onRefresh();\n59:       } catch (error) {\n60:         console.error('Refresh error:', error);\n61:       } finally {\n62:         setIsRefreshing(false);"
    },
    {
      "file": "src/hooks/useRainbowAvatar.ts",
      "line": 133,
      "content": "console.error('Error loading avatar:', error);",
      "context": "131:       setIsVerified(!!profile?.verified_rank);\n132:     } catch (error) {\n133:       console.error('Error loading avatar:', error);\n134:       setAvatar(prev => ({\n135:         ...prev,"
    },
    {
      "file": "src/hooks/useRainbowAvatar.ts",
      "line": 199,
      "content": "console.error('Error uploading avatar:', error);",
      "context": "197:         toast.success('Avatar đã được cập nhật thành công!');\n198:       } catch (error) {\n199:         console.error('Error uploading avatar:', error);\n200:         setAvatar(prev => ({\n201:           ...prev,"
    },
    {
      "file": "src/hooks/useRainbowAvatar.ts",
      "line": 219,
      "content": "console.error('Error updating avatar variant:', error);",
      "context": "217:         toast.success('Hiệu ứng avatar đã được cập nhật!');\n218:       } catch (error) {\n219:         console.error('Error updating avatar variant:', error);\n220:         toast.error('Không thể cập nhật hiệu ứng avatar');\n221:       }"
    },
    {
      "file": "src/hooks/useRainbowAvatar.ts",
      "line": 233,
      "content": "console.error('Error updating avatar intensity:', error);",
      "context": "231:         setAvatar(prev => ({ ...prev, intensity }));\n232:       } catch (error) {\n233:         console.error('Error updating avatar intensity:', error);\n234:         toast.error('Không thể cập nhật cường độ hiệu ứng');\n235:       }"
    },
    {
      "file": "src/hooks/useRainbowAvatar.ts",
      "line": 247,
      "content": "console.error('Error updating avatar speed:', error);",
      "context": "245:         setAvatar(prev => ({ ...prev, speed }));\n246:       } catch (error) {\n247:         console.error('Error updating avatar speed:', error);\n248:         toast.error('Không thể cập nhật tốc độ hiệu ứng');\n249:       }"
    },
    {
      "file": "src/hooks/useRainbowAvatar.ts",
      "line": 283,
      "content": "console.error('Error resetting avatar:', error);",
      "context": "281:       toast.success('Avatar đã được reset về mặc định!');\n282:     } catch (error) {\n283:       console.error('Error resetting avatar:', error);\n284:       toast.error('Không thể reset avatar');\n285:     }"
    },
    {
      "file": "src/hooks/useRainbowAvatar.ts",
      "line": 303,
      "content": "console.error('Error updating frame type:', error);",
      "context": "301:         toast.success('Đã cập nhật kiểu khung avatar!');\n302:       } catch (error) {\n303:         console.error('Error updating frame type:', error);\n304:         toast.error('Không thể cập nhật kiểu khung');\n305:       }"
    },
    {
      "file": "src/hooks/useRankDefinitions.ts",
      "line": 20,
      "content": "console.error('Error fetching ranks:', error);",
      "context": "18:       setRanks(data || []);\n19:     } catch (error) {\n20:       console.error('Error fetching ranks:', error);\n21:       toast({\n22:         title: 'Error',"
    },
    {
      "file": "src/hooks/useRankDefinitions.ts",
      "line": 46,
      "content": "console.error('Error creating rank:', error);",
      "context": "44:       });\n45:     } catch (error) {\n46:       console.error('Error creating rank:', error);\n47:       toast({\n48:         title: 'Error',"
    },
    {
      "file": "src/hooks/useRankDefinitions.ts",
      "line": 74,
      "content": "console.error('Error updating rank:', error);",
      "context": "72:       });\n73:     } catch (error) {\n74:       console.error('Error updating rank:', error);\n75:       toast({\n76:         title: 'Error',"
    },
    {
      "file": "src/hooks/useRankDefinitions.ts",
      "line": 95,
      "content": "console.error('Error deleting rank:', error);",
      "context": "93:       });\n94:     } catch (error) {\n95:       console.error('Error deleting rank:', error);\n96:       toast({\n97:         title: 'Error',"
    },
    {
      "file": "src/hooks/useRankDefinitions.ts",
      "line": 122,
      "content": "console.error('Error reordering ranks:', error);",
      "context": "120:       });\n121:     } catch (error) {\n122:       console.error('Error reordering ranks:', error);\n123:       toast({\n124:         title: 'Error',"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 117,
      "content": "console.error('Error fetching rank requests:', err);",
      "context": "115:       setRequests(transformedRequests);\n116:     } catch (err) {\n117:       console.error('Error fetching rank requests:', err);\n118:       setError(\n119:         err instanceof Error ? err.message : 'Failed to fetch rank requests'"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 141,
      "content": "console.error('Error checking existing request:', err);",
      "context": "139:       return data?.length > 0 ? data[0] : null;\n140:     } catch (err) {\n141:       console.error('Error checking existing request:', err);\n142:       return null;\n143:     }"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 160,
      "content": "console.error('🚨 [ERROR] Missing user ID:', errorMsg);",
      "context": "158:       if (!userId) {\n159:         const errorMsg = 'User ID is required';\n160:         console.error('🚨 [ERROR] Missing user ID:', errorMsg);\n161:         throw new Error(errorMsg);\n162:       }"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 173,
      "content": "console.error('🚨 [ERROR] Auth error:', authError);",
      "context": "171:       \n172:       if (authError) {\n173:         console.error('🚨 [ERROR] Auth error:', authError);\n174:         throw new Error('Authentication error: ' + authError.message);\n175:       }"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 179,
      "content": "console.error('🚨 [ERROR] No authenticated user');",
      "context": "177:       if (!user) {\n178:         const errorMsg = 'Bạn cần đăng nhập để gửi yêu cầu rank';\n179:         console.error('🚨 [ERROR] No authenticated user');\n180:         throw new Error(errorMsg);\n181:       }"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 210,
      "content": "console.error('🚨 [ERROR] Failed to create profile:', createProfileError);",
      "context": "208: \n209:         if (createProfileError) {\n210:           console.error('🚨 [ERROR] Failed to create profile:', createProfileError);\n211:           \n212:           // ✅ BYPASS: If any function-related error, try to continue"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 215,
      "content": "console.log('ℹ️ [BYPASS] Function-related error ignored - profile may still exist');",
      "context": "213:           if (createProfileError.message?.includes('function') || \n214:               createProfileError.message?.includes('get_user_display_name')) {\n215:             console.log('ℹ️ [BYPASS] Function-related error ignored - profile may still exist');\n216:             // Don't throw, continue with rank request\n217:           } else {"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 224,
      "content": "console.error('🚨 [ERROR] Profile check failed:', profileCheckError);",
      "context": "222:         }\n223:       } else if (profileCheckError) {\n224:         console.error('🚨 [ERROR] Profile check failed:', profileCheckError);\n225:         throw new Error('Profile check failed: ' + profileCheckError.message);\n226:       } else {"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 266,
      "content": "console.warn('⚠️ [WARNING] first insert failed:', error);",
      "context": "264:         if (error) {\n265:           firstError = error;\n266:           console.warn('⚠️ [WARNING] first insert failed:', error);\n267:         } else {\n268:           newRequest = insData;"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 283,
      "content": "console.error('🚨 [ERROR] retry insert error:', retryErr);",
      "context": "281:             .single();\n282:           if (retryErr) {\n283:             console.error('🚨 [ERROR] retry insert error:', retryErr);\n284:             throw retryErr;\n285:           }"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 297,
      "content": "console.error('🚨 [ERROR] insert (no evidence) error:', err3);",
      "context": "295:             .single();\n296:           if (err3) {\n297:             console.error('🚨 [ERROR] insert (no evidence) error:', err3);\n298:             console.error('🚨 [ERROR] Full error details:', JSON.stringify(err3, null, 2));\n299:             throw err3;"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 298,
      "content": "console.error('🚨 [ERROR] Full error details:', JSON.stringify(err3, null, 2));",
      "context": "296:           if (err3) {\n297:             console.error('🚨 [ERROR] insert (no evidence) error:', err3);\n298:             console.error('🚨 [ERROR] Full error details:', JSON.stringify(err3, null, 2));\n299:             throw err3;\n300:           }"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 311,
      "content": "console.error('Error creating rank request:', err);",
      "context": "309:       return newRequest;\n310:     } catch (err) {\n311:       console.error('Error creating rank request:', err);\n312:       if (err instanceof Error) throw err;\n313:       throw new Error('Lỗi khi gửi yêu cầu rank');"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 336,
      "content": "console.error('Error updating rank request:', err);",
      "context": "334:       await fetchRankRequests();\n335:     } catch (err) {\n336:       console.error('Error updating rank request:', err);\n337:       throw new Error('Failed to update rank request');\n338:     }"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 353,
      "content": "console.error('Error deleting rank request:', err);",
      "context": "351:       await fetchRankRequests();\n352:     } catch (err) {\n353:       console.error('Error deleting rank request:', err);\n354:       throw new Error('Failed to delete rank request');\n355:     }"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 378,
      "content": "console.error('Error approving rank request:', err);",
      "context": "376:       return result;\n377:     } catch (err) {\n378:       console.error('Error approving rank request:', err);\n379:       throw err;\n380:     }"
    },
    {
      "file": "src/hooks/useRealMatches.ts",
      "line": 116,
      "content": "console.error('Error fetching live matches:', error);",
      "context": "114:       setLiveMatches(formatted);\n115:     } catch (error) {\n116:       console.error('Error fetching live matches:', error);\n117:       setLiveMatches([]);\n118:     }"
    },
    {
      "file": "src/hooks/useRealMatches.ts",
      "line": 182,
      "content": "console.error('Error fetching upcoming matches:', error);",
      "context": "180:       setUpcomingMatches(formatted);\n181:     } catch (error) {\n182:       console.error('Error fetching upcoming matches:', error);\n183:       setUpcomingMatches([]);\n184:     }"
    },
    {
      "file": "src/hooks/useRealMatches.ts",
      "line": 295,
      "content": "console.error('Error fetching recent results:', error);",
      "context": "293:       setRecentResults(formatted);\n294:     } catch (error) {\n295:       console.error('Error fetching recent results:', error);\n296:       setRecentResults([]);\n297:     }"
    },
    {
      "file": "src/hooks/useRealTimeTournamentState.tsx",
      "line": 75,
      "content": "console.error(",
      "context": "73:           if (error) {\n74:             if (attempt === retries) {\n75:               console.error(\n76:                 'Final attempt failed for registration check:',\n77:                 error"
    },
    {
      "file": "src/hooks/useRealTimeTournamentState.tsx",
      "line": 97,
      "content": "console.error('Registration check failed:', error);",
      "context": "95:         } catch (error) {\n96:           if (attempt === retries) {\n97:             console.error('Registration check failed:', error);\n98:             return false;\n99:           }"
    },
    {
      "file": "src/hooks/useRealTimeTournamentState.tsx",
      "line": 138,
      "content": "console.error('Batch registration check failed:', error);",
      "context": "136:         });\n137:       } catch (error) {\n138:         console.error('Batch registration check failed:', error);\n139:       }\n140:     },"
    },
    {
      "file": "src/hooks/useRealtimeMatchNotifications.tsx",
      "line": 36,
      "content": "console.error('Error fetching opponent data:', error);",
      "context": "34: \n35:       if (error) {\n36:         console.error('Error fetching opponent data:', error);\n37:         return null;\n38:       }"
    },
    {
      "file": "src/hooks/useRealtimeMatchNotifications.tsx",
      "line": 53,
      "content": "console.error('Error fetching tournament data:', error);",
      "context": "51: \n52:     if (error) {\n53:       console.error('Error fetching tournament data:', error);\n54:       return null;\n55:     }"
    },
    {
      "file": "src/hooks/useRealtimeMatchNotifications.tsx",
      "line": 70,
      "content": "console.error('Error fetching table data:', error);",
      "context": "68: \n69:     if (error) {\n70:       console.error('Error fetching table data:', error);\n71:       return null;\n72:     }"
    },
    {
      "file": "src/hooks/useRealtimeMatchNotifications.tsx",
      "line": 90,
      "content": "console.error('Error fetching user profile:', error);",
      "context": "88: \n89:     if (error) {\n90:       console.error('Error fetching user profile:', error);\n91:       return null;\n92:     }"
    },
    {
      "file": "src/hooks/useRealtimeMatchNotifications.tsx",
      "line": 117,
      "content": "console.error('Error fetching match data:', error);",
      "context": "115: \n116:         if (error) {\n117:           console.error('Error fetching match data:', error);\n118:           return;\n119:         }"
    },
    {
      "file": "src/hooks/useRealtimeMatchNotifications.tsx",
      "line": 146,
      "content": "console.error('Error opening match notification:', error);",
      "context": "144:         setCurrentMatchNotification(notification);\n145:       } catch (error) {\n146:         console.error('Error opening match notification:', error);\n147:       }\n148:     },"
    },
    {
      "file": "src/hooks/useRealtimeTournament.ts",
      "line": 44,
      "content": "console.error('❌ Error fetching tournament:', err);",
      "context": "42:       setTournament(transformedData as Tournament);\n43:     } catch (err) {\n44:       console.error('❌ Error fetching tournament:', err);\n45:       setError(\n46:         err instanceof Error ? err.message : 'Failed to fetch tournament'"
    },
    {
      "file": "src/hooks/useRealtimeTournaments.ts",
      "line": 62,
      "content": "console.error('❌ Error fetching tournaments:', err);",
      "context": "60:       setTournaments((data as any[]) || []);\n61:     } catch (err) {\n62:       console.error('❌ Error fetching tournaments:', err);\n63:       setError(\n64:         err instanceof Error ? err.message : 'Failed to fetch tournaments'"
    },
    {
      "file": "src/hooks/useRecentActivities.ts",
      "line": 154,
      "content": "console.error('Error loading recent activities:', e);",
      "context": "152:       } catch (e: any) {\n153:         if (!cancelled) {\n154:           console.error('Error loading recent activities:', e);\n155:           setError(e.message || 'Load activities failed');\n156:           // Fallback to empty array"
    },
    {
      "file": "src/hooks/useRecentTournaments.ts",
      "line": 69,
      "content": "console.error('Error fetching recent tournaments:', fetchError);",
      "context": "67: \n68:       if (fetchError) {\n69:         console.error('Error fetching recent tournaments:', fetchError);\n70:         console.error('Error details:', {\n71:           message: fetchError.message,"
    },
    {
      "file": "src/hooks/useRecentTournaments.ts",
      "line": 70,
      "content": "console.error('Error details:', {",
      "context": "68:       if (fetchError) {\n69:         console.error('Error fetching recent tournaments:', fetchError);\n70:         console.error('Error details:', {\n71:           message: fetchError.message,\n72:           details: fetchError.details,"
    },
    {
      "file": "src/hooks/useRecentTournaments.ts",
      "line": 86,
      "content": "console.error('❌ Error loading recent tournaments:', err);",
      "context": "84: \n85:     } catch (err) {\n86:       console.error('❌ Error loading recent tournaments:', err);\n87:       const errorMessage = err instanceof Error ? err.message : 'Lỗi không xác định';\n88:       setError(errorMessage);"
    },
    {
      "file": "src/hooks/useRecentTournaments.ts",
      "line": 123,
      "content": "console.error('Error fetching tournament template:', fetchError);",
      "context": "121: \n122:       if (fetchError) {\n123:         console.error('Error fetching tournament template:', fetchError);\n124:         console.error('Error details:', {\n125:           message: fetchError.message,"
    },
    {
      "file": "src/hooks/useRecentTournaments.ts",
      "line": 124,
      "content": "console.error('Error details:', {",
      "context": "122:       if (fetchError) {\n123:         console.error('Error fetching tournament template:', fetchError);\n124:         console.error('Error details:', {\n125:           message: fetchError.message,\n126:           details: fetchError.details,"
    },
    {
      "file": "src/hooks/useRecentTournaments.ts",
      "line": 169,
      "content": "console.error('❌ Error loading tournament template:', err);",
      "context": "167: \n168:     } catch (err) {\n169:       console.error('❌ Error loading tournament template:', err);\n170:       const errorMessage = err instanceof Error ? err.message : 'Lỗi không xác định';\n171:       setError(errorMessage);"
    },
    {
      "file": "src/hooks/useReferrals.tsx",
      "line": 29,
      "content": "console.error('Error fetching referrals:', error);",
      "context": "27:       setReferrals([]);\n28:     } catch (error) {\n29:       console.error('Error fetching referrals:', error);\n30:       toast.error('Failed to load referrals');\n31:     } finally {"
    },
    {
      "file": "src/hooks/useReferrals.tsx",
      "line": 44,
      "content": "console.error('Error creating referral code:', error);",
      "context": "42:       return referralCode;\n43:     } catch (error) {\n44:       console.error('Error creating referral code:', error);\n45:       toast.error('Failed to create referral code');\n46:       return null;"
    },
    {
      "file": "src/hooks/useRewardTemplates.ts",
      "line": 33,
      "content": "console.error('Error fetching reward templates:', error);",
      "context": "31: \n32:       if (error) {\n33:         console.error('Error fetching reward templates:', error);\n34:         throw error;\n35:       }"
    },
    {
      "file": "src/hooks/useRewardTemplates.ts",
      "line": 105,
      "content": "console.error('Failed to save reward template:', error);",
      "context": "103:     },\n104:     onError: error => {\n105:       console.error('Failed to save reward template:', error);\n106:       toast.error('Lỗi khi lưu template phần thưởng. Vui lòng thử lại.');\n107:     },"
    },
    {
      "file": "src/hooks/useRewardTemplates.ts",
      "line": 143,
      "content": "console.error('Failed to copy template to tournament:', error);",
      "context": "141:       return true;\n142:     } catch (error) {\n143:       console.error('Failed to copy template to tournament:', error);\n144:       toast.error('Lỗi khi áp dụng template vào giải đấu');\n145:       return false;"
    },
    {
      "file": "src/hooks/useRewards.tsx",
      "line": 37,
      "content": "console.error('Error redeeming reward:', error);",
      "context": "35:       return true;\n36:     } catch (error) {\n37:       console.error('Error redeeming reward:', error);\n38:       toast.error('Failed to redeem reward');\n39:       return false;"
    },
    {
      "file": "src/hooks/useRoles.ts",
      "line": 47,
      "content": "console.error('Error fetching roles:', rolesError || primaryError);",
      "context": "45: \n46:         if (rolesError || primaryError) {\n47:           console.error('Error fetching roles:', rolesError || primaryError);\n48:           // Fallback to old system if new system fails\n49:           const { data: profile, error: profileError } = await supabase"
    },
    {
      "file": "src/hooks/useRoles.ts",
      "line": 56,
      "content": "console.error('Fallback role check failed:', profileError);",
      "context": "54: \n55:           if (profileError) {\n56:             console.error('Fallback role check failed:', profileError);\n57:             setRoleData({\n58:               roles: ['user'],"
    },
    {
      "file": "src/hooks/useRoles.ts",
      "line": 84,
      "content": "console.error('Error checking user roles:', error);",
      "context": "82:         }\n83:       } catch (error) {\n84:         console.error('Error checking user roles:', error);\n85:         setRoleData({\n86:           roles: ['user'],"
    },
    {
      "file": "src/hooks/useSABO32BackgroundSync.ts",
      "line": 60,
      "content": "console.error('Background sync error:', err);",
      "context": "58:       \n59:     } catch (err) {\n60:       console.error('Background sync error:', err);\n61:       // Fail silently for background sync\n62:     }"
    },
    {
      "file": "src/hooks/useSABO32ScoreSubmission.ts",
      "line": 71,
      "content": "console.error('Error submitting score:', error);",
      "context": "69:       \n70:     } catch (error) {\n71:       console.error('Error submitting score:', error);\n72:       toast.error(`Lỗi cập nhật tỷ số: ${error.message}`);\n73:       return { success: false, error: error.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 34,
      "content": "console.error('❌ Error in Losers R101 completion:', error);",
      "context": "32: \n33:         if (error) {\n34:           console.error('❌ Error in Losers R101 completion:', error);\n35:           toast.error('Lỗi khi xử lý vòng Losers R101');\n36:           return { success: false, error: error.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 49,
      "content": "console.error('❌ Error in processLosersR101Completion:', err);",
      "context": "47:         }\n48:       } catch (err: any) {\n49:         console.error('❌ Error in processLosersR101Completion:', err);\n50:         toast.error('Có lỗi xảy ra khi xử lý vòng Losers R101');\n51:         return { success: false, error: err.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 77,
      "content": "console.error('❌ Error in Losers R102 completion:', error);",
      "context": "75: \n76:         if (error) {\n77:           console.error('❌ Error in Losers R102 completion:', error);\n78:           toast.error('Lỗi khi xử lý vòng Losers R102');\n79:           return { success: false, error: error.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 92,
      "content": "console.error('❌ Error in processLosersR102Completion:', err);",
      "context": "90:         }\n91:       } catch (err: any) {\n92:         console.error('❌ Error in processLosersR102Completion:', err);\n93:         toast.error('Có lỗi xảy ra khi xử lý vòng Losers R102');\n94:         return { success: false, error: err.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 120,
      "content": "console.error('❌ Error in Losers R103 completion:', error);",
      "context": "118: \n119:         if (error) {\n120:           console.error('❌ Error in Losers R103 completion:', error);\n121:           toast.error('Lỗi khi xử lý vòng Losers R103');\n122:           return { success: false, error: error.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 135,
      "content": "console.error('❌ Error in processLosersR103Completion:', err);",
      "context": "133:         }\n134:       } catch (err: any) {\n135:         console.error('❌ Error in processLosersR103Completion:', err);\n136:         toast.error('Có lỗi xảy ra khi xử lý vòng Losers R103');\n137:         return { success: false, error: err.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 163,
      "content": "console.error('❌ Error in Losers R201 completion:', error);",
      "context": "161: \n162:         if (error) {\n163:           console.error('❌ Error in Losers R201 completion:', error);\n164:           toast.error('Lỗi khi xử lý vòng Losers R201');\n165:           return { success: false, error: error.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 178,
      "content": "console.error('❌ Error in processLosersR201Completion:', err);",
      "context": "176:         }\n177:       } catch (err: any) {\n178:         console.error('❌ Error in processLosersR201Completion:', err);\n179:         toast.error('Có lỗi xảy ra khi xử lý vòng Losers R201');\n180:         return { success: false, error: err.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 206,
      "content": "console.error('❌ Error in Losers R202 completion:', error);",
      "context": "204: \n205:         if (error) {\n206:           console.error('❌ Error in Losers R202 completion:', error);\n207:           toast.error('Lỗi khi xử lý vòng Losers R202');\n208:           return { success: false, error: error.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 221,
      "content": "console.error('❌ Error in processLosersR202Completion:', err);",
      "context": "219:         }\n220:       } catch (err: any) {\n221:         console.error('❌ Error in processLosersR202Completion:', err);\n222:         toast.error('Có lỗi xảy ra khi xử lý vòng Losers R202');\n223:         return { success: false, error: err.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 249,
      "content": "console.error('❌ Error in semifinals setup:', error);",
      "context": "247: \n248:         if (error) {\n249:           console.error('❌ Error in semifinals setup:', error);\n250:           toast.error('Lỗi khi thiết lập trận bán kết');\n251:           return { success: false, error: error.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 264,
      "content": "console.error('❌ Error in setupSemifinalsPairings:', err);",
      "context": "262:         }\n263:       } catch (err: any) {\n264:         console.error('❌ Error in setupSemifinalsPairings:', err);\n265:         toast.error('Có lỗi xảy ra khi thiết lập trận bán kết');\n266:         return { success: false, error: err.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 292,
      "content": "console.error('❌ Error in semifinals completion:', error);",
      "context": "290: \n291:         if (error) {\n292:           console.error('❌ Error in semifinals completion:', error);\n293:           toast.error('Lỗi khi xử lý kết quả bán kết');\n294:           return { success: false, error: error.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 307,
      "content": "console.error('❌ Error in processSemifinalsCompletion:', err);",
      "context": "305:         }\n306:       } catch (err: any) {\n307:         console.error('❌ Error in processSemifinalsCompletion:', err);\n308:         toast.error('Có lỗi xảy ra khi xử lý kết quả bán kết');\n309:         return { success: false, error: err.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 332,
      "content": "console.error('❌ Error in tournament finalization:', error);",
      "context": "330: \n331:         if (error) {\n332:           console.error('❌ Error in tournament finalization:', error);\n333:           toast.error('Lỗi khi hoàn thiện giải đấu');\n334:           return { success: false, error: error.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 350,
      "content": "console.error('❌ Error in finalizeTournament:', err);",
      "context": "348:         }\n349:       } catch (err: any) {\n350:         console.error('❌ Error in finalizeTournament:', err);\n351:         toast.error('Có lỗi xảy ra khi hoàn thiện giải đấu');\n352:         return { success: false, error: err.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 375,
      "content": "console.error('❌ Error in tournament status update:', error);",
      "context": "373: \n374:         if (error) {\n375:           console.error('❌ Error in tournament status update:', error);\n376:           toast.error('Lỗi khi cập nhật trạng thái giải đấu');\n377:           return { success: false, error: error.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 392,
      "content": "console.error('❌ Error in updateTournamentStatus:', err);",
      "context": "390:         }\n391:       } catch (err: any) {\n392:         console.error('❌ Error in updateTournamentStatus:', err);\n393:         toast.error('Có lỗi xảy ra khi cập nhật trạng thái giải đấu');\n394:         return { success: false, error: err.message };"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 446,
      "content": "console.error('❌ Error in processComprehensiveAdvancement:', err);",
      "context": "444:         };\n445:       } catch (err: any) {\n446:         console.error('❌ Error in processComprehensiveAdvancement:', err);\n447:         return {\n448:           error: err.message,"
    },
    {
      "file": "src/hooks/useSABOBracket.ts",
      "line": 67,
      "content": "console.error('❌ Bracket creation failed:', error);",
      "context": "65:     },\n66:     onError: error => {\n67:       console.error('❌ Bracket creation failed:', error);\n68:       toast.error('Failed to create double elimination bracket');\n69:     },"
    },
    {
      "file": "src/hooks/useSABOBracket.ts",
      "line": 158,
      "content": "console.error('❌ Score submission failed:', error);",
      "context": "156:     },\n157:     onError: error => {\n158:       console.error('❌ Score submission failed:', error);\n159:       toast.error('Failed to submit score');\n160:     },"
    },
    {
      "file": "src/hooks/useSABOBracket.ts",
      "line": 189,
      "content": "console.error('❌ Manual advancement failed:', error);",
      "context": "187:     },\n188:     onError: error => {\n189:       console.error('❌ Manual advancement failed:', error);\n190:       toast.error('Failed to advance players');\n191:     },"
    },
    {
      "file": "src/hooks/useSABOBracket.ts",
      "line": 213,
      "content": "console.error('❌ Failed to check progression:', error);",
      "context": "211:       };\n212:     } catch (error) {\n213:       console.error('❌ Failed to check progression:', error);\n214:       return null;\n215:     }"
    },
    {
      "file": "src/hooks/useSABOBracket.ts",
      "line": 237,
      "content": "console.error('❌ Bracket repair failed:', error);",
      "context": "235:       return data;\n236:     } catch (error) {\n237:       console.error('❌ Bracket repair failed:', error);\n238:       toast.error('Failed to repair bracket');\n239:       throw error;"
    },
    {
      "file": "src/hooks/useSABOBracket.ts",
      "line": 253,
      "content": "console.warn('⚠️ SABO Structure Validation Errors:', saboValidation.errors);",
      "context": "251:   );\n252:   if (!saboValidation.valid) {\n253:     console.warn('⚠️ SABO Structure Validation Errors:', saboValidation.errors);\n254:   }\n255: "
    },
    {
      "file": "src/hooks/useSPABalance.tsx",
      "line": 28,
      "content": "console.error('Error fetching SPA balance:', error);",
      "context": "26: \n27:         if (error && error.code !== 'PGRST116') {\n28:           console.error('Error fetching SPA balance:', error);\n29:           setBalance(0);\n30:         } else {"
    },
    {
      "file": "src/hooks/useSPABalance.tsx",
      "line": 36,
      "content": "console.error('Error fetching SPA balance:', error);",
      "context": "34:         }\n35:       } catch (error) {\n36:         console.error('Error fetching SPA balance:', error);\n37:         setBalance(0);\n38:       } finally {"
    },
    {
      "file": "src/hooks/useSPAPoints.tsx",
      "line": 152,
      "content": "console.error('Error crediting SPA points:', error);",
      "context": "150:     },\n151:     onError: error => {\n152:       console.error('Error crediting SPA points:', error);\n153:       toast.error('Lỗi khi tính điểm SPA');\n154:     },"
    },
    {
      "file": "src/hooks/useSPARewards.ts",
      "line": 27,
      "content": "console.error('Error fetching SPA rewards:', error);",
      "context": "25:       setRewards([]);\n26:     } catch (error) {\n27:       console.error('Error fetching SPA rewards:', error);\n28:       toast.error('Failed to load SPA rewards');\n29:     } finally {"
    },
    {
      "file": "src/hooks/useSPARewards.ts",
      "line": 42,
      "content": "console.error('Error creating SPA reward:', error);",
      "context": "40:       return true;\n41:     } catch (error) {\n42:       console.error('Error creating SPA reward:', error);\n43:       toast.error('Failed to create SPA reward');\n44:       return false;"
    },
    {
      "file": "src/hooks/useSPARewards.ts",
      "line": 57,
      "content": "console.error('Error updating SPA reward:', error);",
      "context": "55:       return true;\n56:     } catch (error) {\n57:       console.error('Error updating SPA reward:', error);\n58:       toast.error('Failed to update SPA reward');\n59:       return false;"
    },
    {
      "file": "src/hooks/useSPARewards.ts",
      "line": 69,
      "content": "console.error('Error deleting SPA reward:', error);",
      "context": "67:       return true;\n68:     } catch (error) {\n69:       console.error('Error deleting SPA reward:', error);\n70:       toast.error('Failed to delete SPA reward');\n71:       return false;"
    },
    {
      "file": "src/hooks/useSaboChallenge.tsx",
      "line": 56,
      "content": "console.error('Error fetching user rank:', error);",
      "context": "54:       setUserRank('K');\n55:     } catch (error) {\n56:       console.error('Error fetching user rank:', error);\n57:       setUserRank('K');\n58:     }"
    },
    {
      "file": "src/hooks/useSaboChallenge.tsx",
      "line": 76,
      "content": "console.error('Error fetching SABO challenges:', error);",
      "context": "74:       return [];\n75:     } catch (error) {\n76:       console.error('Error fetching SABO challenges:', error);\n77:       return [];\n78:     }"
    },
    {
      "file": "src/hooks/useSaboHandicap.ts",
      "line": 18,
      "content": "error: (msg: string) => console.warn('Toast Error:', msg),",
      "context": "16: // Temporary mock toast for this file\n17: const toast = {\n18:   error: (msg: string) => console.warn('Toast Error:', msg),\n19:   success: (msg: string) => console.log('Toast Success:', msg)\n20: };"
    },
    {
      "file": "src/hooks/useSaboHandicap.ts",
      "line": 100,
      "content": "console.error('Error calculating handicap:', error);",
      "context": "98:       }));\n99:     } catch (error) {\n100:       console.error('Error calculating handicap:', error);\n101:       setState(prev => ({\n102:         ...prev,"
    },
    {
      "file": "src/hooks/useSaboHandicap.ts",
      "line": 137,
      "content": "console.error('Error applying handicap:', error);",
      "context": "135:       return true;\n136:     } catch (error) {\n137:       console.error('Error applying handicap:', error);\n138:       toast.error('Lỗi khi áp dụng handicap');\n139:       setState(prev => ({ ...prev, isLoading: false }));"
    },
    {
      "file": "src/hooks/useSaboHandicap.ts",
      "line": 237,
      "content": "console.error(`Error processing challenge ${challenge.id}:`, error);",
      "context": "235:           }\n236:         } catch (error) {\n237:           console.error(`Error processing challenge ${challenge.id}:`, error);\n238:           errorCount++;\n239:         }"
    },
    {
      "file": "src/hooks/useSaboHandicap.ts",
      "line": 244,
      "content": "console.error('Error in bulk handicap operation:', error);",
      "context": "242:       toast.success(`Đã xử lý ${successCount} trận đấu thành công, ${errorCount} lỗi`);\n243:     } catch (error) {\n244:       console.error('Error in bulk handicap operation:', error);\n245:       toast.error('Lỗi khi xử lý hàng loạt');\n246:     } finally {"
    },
    {
      "file": "src/hooks/useScoreSubmission.ts",
      "line": 56,
      "content": "console.error('Score submission error:', updateError);",
      "context": "54: \n55:       if (updateError) {\n56:         console.error('Score submission error:', updateError);\n57:         throw new Error(updateError.message || 'Failed to submit score');\n58:       }"
    },
    {
      "file": "src/hooks/useScoreSubmission.ts",
      "line": 70,
      "content": "console.error('Submit score error:', error);",
      "context": "68:     },\n69:     onError: (error: any) => {\n70:       console.error('Submit score error:', error);\n71:       toast.error(error.message || 'Không thể gửi tỷ số');\n72:     }"
    },
    {
      "file": "src/hooks/useScoreSubmission.ts",
      "line": 126,
      "content": "console.error('Confirm score error:', error);",
      "context": "124:     },\n125:     onError: (error: any) => {\n126:       console.error('Confirm score error:', error);\n127:       toast.error(error.message || 'Không thể xác nhận tỷ số');\n128:     }"
    },
    {
      "file": "src/hooks/useScoreSubmission.ts",
      "line": 169,
      "content": "console.error('Club approval error:', error);",
      "context": "167:     },\n168:     onError: (error: any) => {\n169:       console.error('Club approval error:', error);\n170:       toast.error(error.message || 'Không thể xử lý phê duyệt');\n171:     }"
    },
    {
      "file": "src/hooks/useServerSideAuth.tsx",
      "line": 14,
      "content": "console.error('Error logging admin action:', error);",
      "context": "12:       return true;\n13:     } catch (error) {\n14:       console.error('Error logging admin action:', error);\n15:       return false;\n16:     }"
    },
    {
      "file": "src/hooks/useServiceWorker.tsx",
      "line": 57,
      "content": "console.error('Service Worker registration failed:', error);",
      "context": "55:       return registration;\n56:     } catch (error) {\n57:       console.error('Service Worker registration failed:', error);\n58:       setState(prev => ({ ...prev, isInstalling: false }));\n59:     }"
    },
    {
      "file": "src/hooks/useSmartMatching.tsx",
      "line": 102,
      "content": "console.error('Error getting matching suggestions:', error);",
      "context": "100:       return topMatches;\n101:     } catch (error) {\n102:       console.error('Error getting matching suggestions:', error);\n103:       return [];\n104:     } finally {"
    },
    {
      "file": "src/hooks/useSmartMatching.tsx",
      "line": 206,
      "content": "console.error('Error loading suggestions:', error);",
      "context": "204:         }\n205:       } catch (error) {\n206:         console.error('Error loading suggestions:', error);\n207:       }\n208:     }"
    },
    {
      "file": "src/hooks/useSmartRedirect.ts",
      "line": 67,
      "content": "console.error('Smart redirect error:', error);",
      "context": "65:         }\n66:       } catch (error) {\n67:         console.error('Smart redirect error:', error);\n68:         // Fallback to dashboard\n69:         navigate('/dashboard', { replace: true });"
    },
    {
      "file": "src/hooks/useSmartRedirect.ts",
      "line": 79,
      "content": "console.warn('Failed to save intended path:', error);",
      "context": "77:       sessionStorage.setItem('intendedPath', path);\n78:     } catch (error) {\n79:       console.warn('Failed to save intended path:', error);\n80:     }\n81:   }, []);"
    },
    {
      "file": "src/hooks/useSmartRedirect.ts",
      "line": 87,
      "content": "console.warn('Failed to clear intended path:', error);",
      "context": "85:       sessionStorage.removeItem('intendedPath');\n86:     } catch (error) {\n87:       console.warn('Failed to clear intended path:', error);\n88:     }\n89:   }, []);"
    },
    {
      "file": "src/hooks/useSmartRedirect.ts",
      "line": 95,
      "content": "console.warn('Failed to get intended path:', error);",
      "context": "93:       return sessionStorage.getItem('intendedPath');\n94:     } catch (error) {\n95:       console.warn('Failed to get intended path:', error);\n96:       return null;\n97:     }"
    },
    {
      "file": "src/hooks/useSmartRedirect.ts",
      "line": 162,
      "content": "console.error('Auth failure:', error);",
      "context": "160:       const { redirectTo = '/auth/login', delay = 0 } = options || {};\n161: \n162:       console.error('Auth failure:', error);\n163: \n164:       if (delay > 0) {"
    },
    {
      "file": "src/hooks/useSocialFeed.ts",
      "line": 264,
      "content": "if (matchError) console.error('Error fetching matches:', matchError);",
      "context": "262:         .limit(3);\n263: \n264:       if (matchError) console.error('Error fetching matches:', matchError);\n265:       if (challengeError)\n266:         console.error('Error fetching challenges:', challengeError);"
    },
    {
      "file": "src/hooks/useSocialFeed.ts",
      "line": 266,
      "content": "console.error('Error fetching challenges:', challengeError);",
      "context": "264:       if (matchError) console.error('Error fetching matches:', matchError);\n265:       if (challengeError)\n266:         console.error('Error fetching challenges:', challengeError);\n267:       if (tournamentError)\n268:         console.error('Error fetching tournaments:', tournamentError);"
    },
    {
      "file": "src/hooks/useSocialFeed.ts",
      "line": 268,
      "content": "console.error('Error fetching tournaments:', tournamentError);",
      "context": "266:         console.error('Error fetching challenges:', challengeError);\n267:       if (tournamentError)\n268:         console.error('Error fetching tournaments:', tournamentError);\n269: \n270:       // Transform and combine data"
    },
    {
      "file": "src/hooks/useSocialFeed.ts",
      "line": 351,
      "content": "console.error('Error fetching social feed:', err);",
      "context": "349:       setStories(allStories);\n350:     } catch (err) {\n351:       console.error('Error fetching social feed:', err);\n352:       setError('Failed to load social feed');\n353:     } finally {"
    },
    {
      "file": "src/hooks/useSocialFeed.ts",
      "line": 455,
      "content": "console.error('Error deleting post:', error);",
      "context": "453:       setFeedPosts(prev => prev.filter(p => p.id !== postId));\n454:     } catch (error) {\n455:       console.error('Error deleting post:', error);\n456:       throw error;\n457:     }"
    },
    {
      "file": "src/hooks/useSyncCoordinator.tsx",
      "line": 35,
      "content": "console.error('Sync failed:', error);",
      "context": "33:         setLastSyncTime(new Date());\n34:       } catch (error) {\n35:         console.error('Sync failed:', error);\n36:         throw error;\n37:       } finally {"
    },
    {
      "file": "src/hooks/useSystemHealthCheck.tsx",
      "line": 181,
      "content": "console.error(`[HealthCheck] Failed to auto-fix ${issue}:`, error);",
      "context": "179:         }\n180:       } catch (error) {\n181:         console.error(`[HealthCheck] Failed to auto-fix ${issue}:`, error);\n182:       }\n183:     }"
    },
    {
      "file": "src/hooks/useSystemMessages.tsx",
      "line": 30,
      "content": "console.error('Error in createSystemMessage:', error);",
      "context": "28:       });\n29:     } catch (error) {\n30:       console.error('Error in createSystemMessage:', error);\n31:     }\n32:   };"
    },
    {
      "file": "src/hooks/useSystemMessages.tsx",
      "line": 79,
      "content": "console.error('Error sending maintenance notifications:', error);",
      "context": "77:       }\n78:     } catch (error) {\n79:       console.error('Error sending maintenance notifications:', error);\n80:     }\n81:   };"
    },
    {
      "file": "src/hooks/useSystemMessages.tsx",
      "line": 110,
      "content": "console.error('Error sending tournament notifications:', error);",
      "context": "108:       });\n109:     } catch (error) {\n110:       console.error('Error sending tournament notifications:', error);\n111:     }\n112:   };"
    },
    {
      "file": "src/hooks/useSystemMessages.tsx",
      "line": 134,
      "content": "console.error('Error sending club registration confirmation:', error);",
      "context": "132:       );\n133:     } catch (error) {\n134:       console.error('Error sending club registration confirmation:', error);\n135:     }\n136:   };"
    },
    {
      "file": "src/hooks/useSystemMessages.tsx",
      "line": 185,
      "content": "console.error('Error sending club status notification:', error);",
      "context": "183:       }\n184:     } catch (error) {\n185:       console.error('Error sending club status notification:', error);\n186:     }\n187:   };"
    },
    {
      "file": "src/hooks/useSystemMessages.tsx",
      "line": 230,
      "content": "console.error('Error sending rank verification notification:', error);",
      "context": "228:       }\n229:     } catch (error) {\n230:       console.error('Error sending rank verification notification:', error);\n231:     }\n232:   };"
    },
    {
      "file": "src/hooks/useSystemMessages.tsx",
      "line": 277,
      "content": "console.error('Error sending achievement notification:', error);",
      "context": "275:       }\n276:     } catch (error) {\n277:       console.error('Error sending achievement notification:', error);\n278:     }\n279:   };"
    },
    {
      "file": "src/hooks/useSystemStats.tsx",
      "line": 71,
      "content": "console.error('Error fetching system stats:', error);",
      "context": "69:       });\n70:     } catch (error) {\n71:       console.error('Error fetching system stats:', error);\n72:       setStats(prev => ({\n73:         ...prev,"
    },
    {
      "file": "src/hooks/useTokenRefresh.ts",
      "line": 48,
      "content": "console.warn('🔄 Token early refresh failed:', error.message);",
      "context": "46:           const { data, error } = await supabase.auth.refreshSession();\n47:           if (error) {\n48:             console.warn('🔄 Token early refresh failed:', error.message);\n49:           } else if (data?.session?.expires_at) {\n50:             // Reschedule with new expiry"
    },
    {
      "file": "src/hooks/useTournamentAI.ts",
      "line": 56,
      "content": "console.error('Tournament optimization error:', error);",
      "context": "54:         };\n55:       } catch (error) {\n56:         console.error('Tournament optimization error:', error);\n57:         return {\n58:           score: 0,"
    },
    {
      "file": "src/hooks/useTournamentAI.ts",
      "line": 92,
      "content": "console.error('Prediction error:', error);",
      "context": "90:         };\n91:       } catch (error) {\n92:         console.error('Prediction error:', error);\n93:         return null;\n94:       }"
    },
    {
      "file": "src/hooks/useTournamentCompletion.ts",
      "line": 55,
      "content": "console.error('Error checking tournament completion:', error);",
      "context": "53: \n54:     } catch (error) {\n55:       console.error('Error checking tournament completion:', error);\n56:       setStatus(prev => ({\n57:         ...prev,"
    },
    {
      "file": "src/hooks/useTournamentManagement.ts",
      "line": 57,
      "content": "console.error('Error fetching tournament:', error);",
      "context": "55:       setTournament(data);\n56:     } catch (error) {\n57:       console.error('Error fetching tournament:', error);\n58:       toast({\n59:         title: 'Error',"
    },
    {
      "file": "src/hooks/useTournamentManagement.ts",
      "line": 87,
      "content": "console.error('Error fetching registrations:', error);",
      "context": "85:       setRegistrations([]);\n86:     } catch (error) {\n87:       console.error('Error fetching registrations:', error);\n88:     }\n89:   };"
    },
    {
      "file": "src/hooks/useTournamentManagement.ts",
      "line": 102,
      "content": "console.error('Error checking bracket:', error);",
      "context": "100:       setHasBracket((data?.length || 0) > 0);\n101:     } catch (error) {\n102:       console.error('Error checking bracket:', error);\n103:     }\n104:   };"
    },
    {
      "file": "src/hooks/useTournamentManagement.ts",
      "line": 133,
      "content": "console.error('Error generating bracket:', error);",
      "context": "131:       }\n132:     } catch (error) {\n133:       console.error('Error generating bracket:', error);\n134:       toast({\n135:         title: 'Error',"
    },
    {
      "file": "src/hooks/useTournamentManagement.ts",
      "line": 159,
      "content": "console.error('Error updating tournament status:', error);",
      "context": "157: \n158:       if (error) {\n159:         console.error('Error updating tournament status:', error);\n160:         throw error;\n161:       }"
    },
    {
      "file": "src/hooks/useTournamentManagement.ts",
      "line": 176,
      "content": "console.error('Error starting tournament:', error);",
      "context": "174:       return true;\n175:     } catch (error) {\n176:       console.error('Error starting tournament:', error);\n177:       toast({\n178:         title: 'Error',"
    },
    {
      "file": "src/hooks/useTournamentManagement.ts",
      "line": 209,
      "content": "console.error('Error updating tournament status:', error);",
      "context": "207:         await fetchTournament();\n208:       } catch (error) {\n209:         console.error('Error updating tournament status:', error);\n210:         sonnerToast.error('Lỗi khi cập nhật trạng thái giải đấu');\n211:       } finally {"
    },
    {
      "file": "src/hooks/useTournamentManagement.ts",
      "line": 248,
      "content": "console.error('Error checking tournament completion:', error);",
      "context": "246:       return false;\n247:     } catch (error) {\n248:       console.error('Error checking tournament completion:', error);\n249:       return false;\n250:     }"
    },
    {
      "file": "src/hooks/useTournamentManagementHub.ts",
      "line": 46,
      "content": "console.error('Error fetching club:', clubError);",
      "context": "44:       if (clubError) {\n45:         if (clubError.code !== 'PGRST116') {\n46:           console.error('Error fetching club:', clubError);\n47:         }\n48:         setClubId(null);"
    },
    {
      "file": "src/hooks/useTournamentManagementHub.ts",
      "line": 54,
      "content": "console.error('Error in fetchClubId:', error);",
      "context": "52:       setClubId(clubData?.id || null);\n53:     } catch (error) {\n54:       console.error('Error in fetchClubId:', error);\n55:       setClubId(null);\n56:     }"
    },
    {
      "file": "src/hooks/useTournamentManagementHub.ts",
      "line": 83,
      "content": "console.error('Error fetching tournaments:', error);",
      "context": "81:       setError(errorMessage);\n82:       toast.error(errorMessage);\n83:       console.error('Error fetching tournaments:', error);\n84:     } finally {\n85:       setLoading(false);"
    },
    {
      "file": "src/hooks/useTournamentMatches.ts",
      "line": 72,
      "content": "console.error('❌ Error fetching matches:', matchesError);",
      "context": "70: \n71:       if (matchesError) {\n72:         console.error('❌ Error fetching matches:', matchesError);\n73:         throw matchesError;\n74:       }"
    },
    {
      "file": "src/hooks/useTournamentMatches.ts",
      "line": 109,
      "content": "console.error('❌ Error in fetchMatches:', err);",
      "context": "107:       setLastUpdateTime(new Date());\n108:     } catch (err: any) {\n109:       console.error('❌ Error in fetchMatches:', err);\n110:       setError(err.message || 'Failed to fetch matches');\n111:     } finally {"
    },
    {
      "file": "src/hooks/useTournamentRealtime.ts",
      "line": 57,
      "content": "console.error('❌ Error loading registrations:', error);",
      "context": "55: \n56:       if (error) {\n57:         console.error('❌ Error loading registrations:', error);\n58:         return;\n59:       }"
    },
    {
      "file": "src/hooks/useTournamentRealtime.ts",
      "line": 104,
      "content": "console.error('❌ Error in loadInitialData:', error);",
      "context": "102:       });\n103:     } catch (error) {\n104:       console.error('❌ Error in loadInitialData:', error);\n105:       toast.error('Lỗi khi tải dữ liệu giải đấu');\n106:     } finally {"
    },
    {
      "file": "src/hooks/useTournamentRecommendations.tsx",
      "line": 266,
      "content": "console.error('Error loading tournament recommendations:', error);",
      "context": "264:       setTournaments(mockTournaments);\n265:     } catch (error) {\n266:       console.error('Error loading tournament recommendations:', error);\n267:     } finally {\n268:       setLoading(false);"
    },
    {
      "file": "src/hooks/useTournamentRecommendations.tsx",
      "line": 290,
      "content": "console.error('Error tracking interaction:', error);",
      "context": "288:       loadTournamentRecommendations();\n289:     } catch (error) {\n290:       console.error('Error tracking interaction:', error);\n291:     }\n292:   };"
    },
    {
      "file": "src/hooks/useTournamentRecommendations.tsx",
      "line": 371,
      "content": "console.error('Error loading tournaments by filter:', error);",
      "context": "369:       return filteredData;\n370:     } catch (error) {\n371:       console.error('Error loading tournaments by filter:', error);\n372:     }\n373: "
    },
    {
      "file": "src/hooks/useTournamentRegistrationFlow.tsx",
      "line": 148,
      "content": "console.error('Registration error:', error);",
      "context": "146:         };\n147:       } catch (error) {\n148:         console.error('Registration error:', error);\n149:         return {\n150:           success: false,"
    },
    {
      "file": "src/hooks/useTournamentRegistrationFlow.tsx",
      "line": 187,
      "content": "console.error('Cancellation error:', error);",
      "context": "185:         };\n186:       } catch (error) {\n187:         console.error('Cancellation error:', error);\n188:         return {\n189:           success: false,"
    },
    {
      "file": "src/hooks/useTournamentRegistrationFlow.tsx",
      "line": 269,
      "content": "console.error('Unexpected error in registration flow:', error);",
      "context": "267:         }\n268:       } catch (error) {\n269:         console.error('Unexpected error in registration flow:', error);\n270:         toast.error('Có lỗi không mong muốn xảy ra');\n271: "
    },
    {
      "file": "src/hooks/useTournamentRegistrationFlow.tsx",
      "line": 374,
      "content": "console.error('Error initializing registration status:', error);",
      "context": "372:         }));\n373:       } catch (error) {\n374:         console.error('Error initializing registration status:', error);\n375:       }\n376:     },"
    },
    {
      "file": "src/hooks/useTournamentRegistrationState.tsx",
      "line": 35,
      "content": "console.error('Error checking registration:', error);",
      "context": "33: \n34:         if (error) {\n35:           console.error('Error checking registration:', error);\n36:           return false;\n37:         }"
    },
    {
      "file": "src/hooks/useTournamentRegistrationState.tsx",
      "line": 41,
      "content": "console.error('Error checking registration:', error);",
      "context": "39:         return data && data.length > 0;\n40:       } catch (error) {\n41:         console.error('Error checking registration:', error);\n42:         return false;\n43:       }"
    },
    {
      "file": "src/hooks/useTournamentRegistrations.ts",
      "line": 55,
      "content": "console.error(",
      "context": "53: \n54:       if (fetchError) {\n55:         console.error(\n56:           '❌ Error fetching tournament registrations:',\n57:           fetchError"
    },
    {
      "file": "src/hooks/useTournamentRegistrations.ts",
      "line": 79,
      "content": "console.warn('⚠️ Error fetching profiles (likely RLS), using player_rankings as fallback:', profilesError);",
      "context": "77: \n78:       if (profilesError) {\n79:         console.warn('⚠️ Error fetching profiles (likely RLS), using player_rankings as fallback:', profilesError);\n80:         \n81:         // Try player_rankings as fallback for user data"
    },
    {
      "file": "src/hooks/useTournamentRegistrations.ts",
      "line": 88,
      "content": "console.warn('⚠️ Error fetching player rankings, continuing with registration data only:', rankingsError);",
      "context": "86: \n87:         if (rankingsError) {\n88:           console.warn('⚠️ Error fetching player rankings, continuing with registration data only:', rankingsError);\n89:         }\n90: "
    },
    {
      "file": "src/hooks/useTournamentRegistrations.ts",
      "line": 134,
      "content": "console.error('❌ Error in fetchRegistrations:', err);",
      "context": "132:       setRegistrations(transformedData);\n133:     } catch (err) {\n134:       console.error('❌ Error in fetchRegistrations:', err);\n135:       setError(\n136:         err instanceof Error ? err.message : 'Failed to fetch registrations'"
    },
    {
      "file": "src/hooks/useTournamentResults.ts",
      "line": 31,
      "content": "console.error('❌ Error fetching tournament results:', resultsError);",
      "context": "29: \n30:       if (resultsError) {\n31:         console.error('❌ Error fetching tournament results:', resultsError);\n32:         throw resultsError;\n33:       }"
    },
    {
      "file": "src/hooks/useTournamentResults.ts",
      "line": 50,
      "content": "console.warn('⚠️ Error fetching prize details:', prizeError);",
      "context": "48: \n49:       if (prizeError) {\n50:         console.warn('⚠️ Error fetching prize details:', prizeError);\n51:       }\n52: "
    },
    {
      "file": "src/hooks/useTournamentResults.ts",
      "line": 69,
      "content": "console.error('❌ Error fetching profiles:', profilesError);",
      "context": "67: \n68:       if (profilesError) {\n69:         console.error('❌ Error fetching profiles:', profilesError);\n70:         throw profilesError;\n71:       }"
    },
    {
      "file": "src/hooks/useTournamentResults.ts",
      "line": 113,
      "content": "console.error('❌ Error in fetchResults:', err);",
      "context": "111:       setResults(transformedResults);\n112:     } catch (err: any) {\n113:       console.error('❌ Error in fetchResults:', err);\n114:       setError(err.message || 'Failed to fetch tournament results');\n115:     } finally {"
    },
    {
      "file": "src/hooks/useTournamentRewardSync.ts",
      "line": 29,
      "content": "console.error('❌ Sync error:', error);",
      "context": "27: \n28:       if (error) {\n29:         console.error('❌ Sync error:', error);\n30:         throw error;\n31:       }"
    },
    {
      "file": "src/hooks/useTournamentRewardSync.ts",
      "line": 36,
      "content": "console.error('❌ Sync failed:', err);",
      "context": "34:       return data;\n35:     } catch (err: any) {\n36:       console.error('❌ Sync failed:', err);\n37:       setError(err.message || 'Failed to sync tournament rewards');\n38:       throw err;"
    },
    {
      "file": "src/hooks/useTournamentRewards.ts",
      "line": 33,
      "content": "console.error('Error fetching tournament rewards:', error);",
      "context": "31: \n32:       if (error) {\n33:         console.error('Error fetching tournament rewards:', error);\n34:         throw error;\n35:       }"
    },
    {
      "file": "src/hooks/useTournamentRewards.ts",
      "line": 69,
      "content": "console.error('Error creating tournament reward:', error);",
      "context": "67:     },\n68:     onError: error => {\n69:       console.error('Error creating tournament reward:', error);\n70:       toast({\n71:         title: 'Error',"
    },
    {
      "file": "src/hooks/useTournamentRewards.ts",
      "line": 105,
      "content": "console.error('Error updating tournament reward:', error);",
      "context": "103:     },\n104:     onError: error => {\n105:       console.error('Error updating tournament reward:', error);\n106:       toast({\n107:         title: 'Error',"
    },
    {
      "file": "src/hooks/useTournamentRewards.ts",
      "line": 137,
      "content": "console.error('Error deleting tournament reward:', error);",
      "context": "135:     },\n136:     onError: error => {\n137:       console.error('Error deleting tournament reward:', error);\n138:       toast({\n139:         title: 'Error',"
    },
    {
      "file": "src/hooks/useTournamentRewardsManager.ts",
      "line": 58,
      "content": "console.error('Error creating default rewards:', functionError);",
      "context": "56: \n57:         if (functionError) {\n58:           console.error('Error creating default rewards:', functionError);\n59:         } else {\n60:           // Fetch again after creating defaults"
    },
    {
      "file": "src/hooks/useTournamentRewardsManager.ts",
      "line": 181,
      "content": "console.error('Failed to save rewards:', error);",
      "context": "179:     },\n180:     onError: error => {\n181:       console.error('Failed to save rewards:', error);\n182:       toast.error('Lỗi khi lưu phần thưởng. Vui lòng thử lại.');\n183:     },"
    },
    {
      "file": "src/hooks/useTournamentRewardsManager.ts",
      "line": 204,
      "content": "console.error('Failed to delete position:', error);",
      "context": "202:     },\n203:     onError: error => {\n204:       console.error('Failed to delete position:', error);\n205:       toast.error('Lỗi khi xóa vị trí');\n206:     },"
    },
    {
      "file": "src/hooks/useTournamentSPA.tsx",
      "line": 101,
      "content": "console.error('Error awarding tournament SPA:', error);",
      "context": "99:     },\n100:     onError: error => {\n101:       console.error('Error awarding tournament SPA:', error);\n102:       toast.error('Lỗi khi tính điểm giải đấu');\n103:     },"
    },
    {
      "file": "src/hooks/useTournamentSPAManager.tsx",
      "line": 105,
      "content": "console.error('Error awarding tournament SPA:', error);",
      "context": "103:     },\n104:     onError: error => {\n105:       console.error('Error awarding tournament SPA:', error);\n106:       toast.error('Lỗi khi trao điểm SPA giải đấu');\n107:     },"
    },
    {
      "file": "src/hooks/useTournamentService.tsx",
      "line": 59,
      "content": "console.error('Create tournament error:', error);",
      "context": "57:     },\n58:     onError: error => {\n59:       console.error('Create tournament error:', error);\n60:       toast.error('Có lỗi xảy ra khi tạo giải đấu');\n61:     },"
    },
    {
      "file": "src/hooks/useTournamentService.tsx",
      "line": 77,
      "content": "console.error('Registration error:', error);",
      "context": "75:     },\n76:     onError: error => {\n77:       console.error('Registration error:', error);\n78:       toast.error('Có lỗi khi đăng ký giải đấu');\n79:     },"
    },
    {
      "file": "src/hooks/useTournamentService.tsx",
      "line": 95,
      "content": "console.error('Cancel registration error:', error);",
      "context": "93:     },\n94:     onError: error => {\n95:       console.error('Cancel registration error:', error);\n96:       toast.error('Có lỗi khi hủy đăng ký');\n97:     },"
    },
    {
      "file": "src/hooks/useTournamentService.tsx",
      "line": 134,
      "content": "console.error('Generate bracket error:', error);",
      "context": "132:     },\n133:     onError: error => {\n134:       console.error('Generate bracket error:', error);\n135:       toast.error('Có lỗi khi tạo bracket');\n136:     },"
    },
    {
      "file": "src/hooks/useTournamentService.tsx",
      "line": 194,
      "content": "console.error('Finalize tournament error:', error);",
      "context": "192:     },\n193:     onError: error => {\n194:       console.error('Finalize tournament error:', error);\n195:       toast.error('Có lỗi khi cập nhật kết quả');\n196:     },"
    },
    {
      "file": "src/hooks/useTournamentService.tsx",
      "line": 207,
      "content": "console.error('Check registration error:', error);",
      "context": "205:         return await TournamentRepository.checkUserRegistration(tournamentId);\n206:       } catch (error) {\n207:         console.error('Check registration error:', error);\n208:         return null;\n209:       }"
    },
    {
      "file": "src/hooks/useTournamentUtils.tsx",
      "line": 65,
      "content": "console.error('Double1 setup failed:', setupError);",
      "context": "63: \n64:         if (setupError) {\n65:           console.error('Double1 setup failed:', setupError);\n66:           toast.error(\n67:             `Failed to create tournament bracket: ${setupError.message}`"
    },
    {
      "file": "src/hooks/useTournaments.ts",
      "line": 88,
      "content": "console.error('Error fetching tournaments:', err);",
      "context": "86:       setTournaments(transformedData);\n87:     } catch (err) {\n88:       console.error('Error fetching tournaments:', err);\n89:       setError(\n90:         err instanceof Error ? err.message : 'Failed to fetch tournaments'"
    },
    {
      "file": "src/hooks/useTournamentsForTemplates.ts",
      "line": 41,
      "content": "console.error('Error fetching tournaments:', err);",
      "context": "39:       setTournaments(data || []);\n40:     } catch (err) {\n41:       console.error('Error fetching tournaments:', err);\n42:       setError(\n43:         err instanceof Error ? err.message : 'Failed to fetch tournaments'"
    },
    {
      "file": "src/hooks/useTranslationAnalytics.ts",
      "line": 170,
      "content": "console.error('Error fetching translation analytics:', err);",
      "context": "168:       setAnalytics(mockAnalytics);\n169:     } catch (err) {\n170:       console.error('Error fetching translation analytics:', err);\n171:       setError('Không thể tải dữ liệu phân tích dịch thuật');\n172:       toast.error('Không thể tải dữ liệu phân tích dịch thuật');"
    },
    {
      "file": "src/hooks/useUnifiedMessages.ts",
      "line": 162,
      "content": "console.error('Error sending system message:', err);",
      "context": "160:       return false;\n161:     } catch (err) {\n162:       console.error('Error sending system message:', err);\n163:       return false;\n164:     }"
    },
    {
      "file": "src/hooks/useUnifiedMessages.ts",
      "line": 232,
      "content": "console.error('Failed to fetch unread count:', err);",
      "context": "230:       setUnreadCount(count);\n231:     } catch (err) {\n232:       console.error('Failed to fetch unread count:', err);\n233:     }\n234:   }, [user?.id]);"
    },
    {
      "file": "src/hooks/useUnifiedMessages.ts",
      "line": 245,
      "content": "console.error('Failed to fetch message stats:', err);",
      "context": "243:       setUnreadCount(messageStats.unread_count);\n244:     } catch (err) {\n245:       console.error('Failed to fetch message stats:', err);\n246:     }\n247:   }, [user?.id]);"
    },
    {
      "file": "src/hooks/useUnifiedNotifications.ts",
      "line": 185,
      "content": "console.error('Error fetching notifications:', err);",
      "context": "183: \n184:     } catch (err: any) {\n185:       console.error('Error fetching notifications:', err);\n186:       setError(err.message);\n187:       setIsConnected(false);"
    },
    {
      "file": "src/hooks/useUnifiedNotifications.ts",
      "line": 220,
      "content": "console.error('Error marking notification as read:', err);",
      "context": "218:       return true;\n219:     } catch (err: any) {\n220:       console.error('Error marking notification as read:', err);\n221:       setError(err.message);\n222:       return false;"
    },
    {
      "file": "src/hooks/useUnifiedNotifications.ts",
      "line": 251,
      "content": "console.error('Error marking all notifications as read:', err);",
      "context": "249:       return true;\n250:     } catch (err: any) {\n251:       console.error('Error marking all notifications as read:', err);\n252:       setError(err.message);\n253:       return false;"
    },
    {
      "file": "src/hooks/useUnifiedNotifications.ts",
      "line": 278,
      "content": "console.error('Error archiving notification:', err);",
      "context": "276:       return true;\n277:     } catch (err: any) {\n278:       console.error('Error archiving notification:', err);\n279:       setError(err.message);\n280:       return false;"
    },
    {
      "file": "src/hooks/useUnifiedNotifications.ts",
      "line": 305,
      "content": "console.error('Error deleting notification:', err);",
      "context": "303:       return true;\n304:     } catch (err: any) {\n305:       console.error('Error deleting notification:', err);\n306:       setError(err.message);\n307:       return false;"
    },
    {
      "file": "src/hooks/useUnifiedNotifications.ts",
      "line": 391,
      "content": "console.error('Error setting up notification subscription:', error);",
      "context": "389:         setIsConnected(true);\n390:       } catch (error) {\n391:         console.error('Error setting up notification subscription:', error);\n392:         setIsConnected(false);\n393:       }"
    },
    {
      "file": "src/hooks/useUnifiedProfile.ts",
      "line": 69,
      "content": "console.error('Profile fetch error:', profileFetchError);",
      "context": "67: \n68:         if (profileFetchError) {\n69:           console.error('Profile fetch error:', profileFetchError);\n70:           handleError(profileFetchError, {\n71:             section: 'Profile',"
    },
    {
      "file": "src/hooks/useUnifiedProfile.ts",
      "line": 96,
      "content": "console.error('Profile creation error:', createError);",
      "context": "94: \n95:           if (createError) {\n96:             console.error('Profile creation error:', createError);\n97:             handleError(createError, { section: 'Profile', action: 'create' });\n98:             throw createError;"
    },
    {
      "file": "src/hooks/useUnifiedProfile.ts",
      "line": 202,
      "content": "console.error('Unified profile fetch error:', error);",
      "context": "200:         };\n201:       } catch (error) {\n202:         console.error('Unified profile fetch error:', error);\n203:         handleError(error as Error, {\n204:           section: 'Profile',"
    },
    {
      "file": "src/hooks/useUnifiedTournamentAutomation.ts",
      "line": 69,
      "content": "console.error('Failed to load automation status:', error);",
      "context": "67:       }\n68:     } catch (error) {\n69:       console.error('Failed to load automation status:', error);\n70:       toast.error('Không thể tải trạng thái automation');\n71:     } finally {"
    },
    {
      "file": "src/hooks/useUnifiedTournamentAutomation.ts",
      "line": 99,
      "content": "console.error('Fix tournament error:', error);",
      "context": "97:         }\n98:       } catch (error: any) {\n99:         console.error('Fix tournament error:', error);\n100:         toast.error('❌ Lỗi khi sửa chữa: ' + error.message);\n101:       } finally {"
    },
    {
      "file": "src/hooks/useUnifiedTournamentState.ts",
      "line": 110,
      "content": "console.warn('Repair attempt failed:', error);",
      "context": "108:           console.log('🔧 Bracket repair result:', repairResult);\n109:         } catch (error) {\n110:           console.warn('Repair attempt failed:', error);\n111:         }\n112: "
    },
    {
      "file": "src/hooks/useUserLocation.tsx",
      "line": 61,
      "content": "console.error('Error saving location:', error);",
      "context": "59:       return mockLocation;\n60:     } catch (error) {\n61:       console.error('Error saving location:', error);\n62:       throw error;\n63:     }"
    },
    {
      "file": "src/hooks/useUserLocation.tsx",
      "line": 79,
      "content": "console.error('Location error:', error);",
      "context": "77:       toast.success('Đã cập nhật vị trí của bạn');\n78:     } catch (error) {\n79:       console.error('Location error:', error);\n80:       setError('Không thể lấy vị trí của bạn');\n81:       toast.error('Không thể lấy vị trí. Vui lòng cho phép truy cập vị trí.');"
    },
    {
      "file": "src/hooks/useUserLocation.tsx",
      "line": 103,
      "content": "console.error('Error loading location:', error);",
      "context": "101:       setUserLocation(mockLocation);\n102:     } catch (error) {\n103:       console.error('Error loading location:', error);\n104:     } finally {\n105:       setLoading(false);"
    },
    {
      "file": "src/hooks/useWinnerAdvancementListener.ts",
      "line": 22,
      "content": "console.error(",
      "context": "20:         }\n21:       } catch (err) {\n22:         console.error(\n23:           '❌ Error handling winner advancement notification:',\n24:           err"
    },
    {
      "file": "src/lib/analyticsTracker.ts",
      "line": 245,
      "content": "console.error('Failed to send analytics event:', error);",
      "context": "243:       });\n244:     } catch (error) {\n245:       console.error('Failed to send analytics event:', error);\n246:     }\n247:   }"
    },
    {
      "file": "src/lib/analyticsTracker.ts",
      "line": 271,
      "content": "console.error('Failed to flush analytics events:', error);",
      "context": "269:       console.log(`[Analytics] Sent ${formattedEvents.length} events`);\n270:     } catch (error) {\n271:       console.error('Failed to flush analytics events:', error);\n272:       // Re-add events for retry\n273:       this.events.unshift(...eventsToSend);"
    },
    {
      "file": "src/lib/openai-usage-tracker.ts",
      "line": 59,
      "content": "console.error('Failed to log OpenAI usage:', error);",
      "context": "57: \n58:     if (error) {\n59:       console.error('Failed to log OpenAI usage:', error);\n60:     }\n61:   } catch (error) {"
    },
    {
      "file": "src/lib/openai-usage-tracker.ts",
      "line": 62,
      "content": "console.error('Error logging OpenAI usage:', error);",
      "context": "60:     }\n61:   } catch (error) {\n62:     console.error('Error logging OpenAI usage:', error);\n63:   }\n64: }"
    },
    {
      "file": "src/lib/openai-usage-tracker.ts",
      "line": 77,
      "content": "console.error('Failed to fetch OpenAI usage stats:', error);",
      "context": "75: \n76:   if (error) {\n77:     console.error('Failed to fetch OpenAI usage stats:', error);\n78:     return [];\n79:   }"
    },
    {
      "file": "src/lib/openai-usage-tracker.ts",
      "line": 94,
      "content": "console.error('Failed to fetch model usage stats:', error);",
      "context": "92: \n93:   if (error) {\n94:     console.error('Failed to fetch model usage stats:', error);\n95:     return [];\n96:   }"
    },
    {
      "file": "src/lib/openai-usage-tracker.ts",
      "line": 147,
      "content": "console.error('Failed to fetch AI assistant stats:', error);",
      "context": "145: \n146:   if (error) {\n147:     console.error('Failed to fetch AI assistant stats:', error);\n148:     return [];\n149:   }"
    },
    {
      "file": "src/lib/performanceMonitor.ts",
      "line": 36,
      "content": "console.error('Performance Observer not supported:', error);",
      "context": "34:       });\n35:     } catch (error) {\n36:       console.error('Performance Observer not supported:', error);\n37:     }\n38:   }"
    },
    {
      "file": "src/lib/performanceMonitor.ts",
      "line": 155,
      "content": "console.error('Resource timing observer failed:', error);",
      "context": "153:       observer.observe({ entryTypes: ['resource'] });\n154:     } catch (error) {\n155:       console.error('Resource timing observer failed:', error);\n156:     }\n157:   }"
    },
    {
      "file": "src/lib/performanceMonitor.ts",
      "line": 219,
      "content": "console.error('Failed to send performance metric:', error);",
      "context": "217:       });\n218:     } catch (error) {\n219:       console.error('Failed to send performance metric:', error);\n220:     }\n221:   }"
    },
    {
      "file": "src/lib/performanceMonitor.ts",
      "line": 236,
      "content": "console.error('Failed to send API metric:', error);",
      "context": "234:       });\n235:     } catch (error) {\n236:       console.error('Failed to send API metric:', error);\n237:     }\n238:   }"
    },
    {
      "file": "src/lib/performanceMonitor.ts",
      "line": 258,
      "content": "console.error('Failed to send performance metrics:', error);",
      "context": "256:         this.metrics = [];\n257:       } catch (error) {\n258:         console.error('Failed to send performance metrics:', error);\n259:       }\n260:     }"
    },
    {
      "file": "src/lib/performanceMonitor.ts",
      "line": 280,
      "content": "console.error('Failed to send API metrics:', error);",
      "context": "278:         this.apiCalls = [];\n279:       } catch (error) {\n280:         console.error('Failed to send API metrics:', error);\n281:       }\n282:     }"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 39,
      "content": "console.error('💥 Post-bracket save workflow failed:', error);",
      "context": "37:     console.log('✅ Post-bracket save workflow completed successfully');\n38:   } catch (error) {\n39:     console.error('💥 Post-bracket save workflow failed:', error);\n40:     await rollbackTournamentStart(tournamentId);\n41:     throw error;"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 102,
      "content": "console.warn(`Seeding warning for user ${seed.user_id}:`, error.message);",
      "context": "100: \n101:     if (error)\n102:       console.warn(`Seeding warning for user ${seed.user_id}:`, error.message);\n103:   }\n104: "
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 188,
      "content": "console.warn('⚠️ Failed to log monitoring setup:', logError.message);",
      "context": "186: \n187:   if (logError)\n188:     console.warn('⚠️ Failed to log monitoring setup:', logError.message);\n189: \n190:   console.log('✅ Tournament monitoring setup completed');"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 237,
      "content": "console.error('❌ Failed to send notifications:', error);",
      "context": "235:     console.log(`✅ Sent notifications to ${participants.length} participants`);\n236:   } catch (error) {\n237:     console.error('❌ Failed to send notifications:', error);\n238:     // Non-critical error, don't throw\n239:   }"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 280,
      "content": "console.error('❌ Failed to update analytics:', error);",
      "context": "278:     console.log('✅ Tournament analytics updated');\n279:   } catch (error) {\n280:     console.error('❌ Failed to update analytics:', error);\n281:     // Non-critical error, don't throw\n282:   }"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 287,
      "content": "console.log('🔄 Rolling back tournament start due to error...');",
      "context": "285: // ===== 9. ROLLBACK FUNCTION (ERROR RECOVERY) =====\n286: const rollbackTournamentStart = async (tournamentId: string) => {\n287:   console.log('🔄 Rolling back tournament start due to error...');\n288: \n289:   try {"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 326,
      "content": "console.error('💥 Rollback failed:', rollbackError);",
      "context": "324:     console.log('✅ Tournament rollback completed');\n325:   } catch (rollbackError) {\n326:     console.error('💥 Rollback failed:', rollbackError);\n327:   }\n328: };"
    },
    {
      "file": "src/lib/webVitalsTracker.ts",
      "line": 94,
      "content": "console.error('Failed to send web vitals metric:', error);",
      "context": "92:       });\n93:     } catch (error) {\n94:       console.error('Failed to send web vitals metric:', error);\n95:     }\n96:   }"
    },
    {
      "file": "src/lib/webVitalsTracker.ts",
      "line": 121,
      "content": "console.error('Failed to send web vitals metrics:', error);",
      "context": "119:       console.log(`[WebVitals] Sent ${formattedMetrics.length} metrics`);\n120:     } catch (error) {\n121:       console.error('Failed to send web vitals metrics:', error);\n122:       // Re-add metrics for retry\n123:       this.metrics.unshift(...metricsToSend);"
    },
    {
      "file": "src/pages/AuthCallbackPage.tsx",
      "line": 54,
      "content": "console.error('Auth callback error:', error);",
      "context": "52:         }\n53:       } catch (error) {\n54:         console.error('Auth callback error:', error);\n55:         toast.error('Có lỗi xảy ra trong quá trình xác thực');\n56:         navigate('/auth/login', { replace: true });"
    },
    {
      "file": "src/pages/AuthPage.tsx",
      "line": 156,
      "content": "console.error('Auth error:', error);",
      "context": "154:       }\n155:     } catch (error) {\n156:       console.error('Auth error:', error);\n157:       toast.error('Có lỗi xảy ra');\n158:     } finally {"
    },
    {
      "file": "src/pages/ChallengesPage.tsx",
      "line": 8,
      "content": "console.error('Error loading EnhancedChallengesPageV3:', error);",
      "context": "6:     return <EnhancedChallengesPageV3 />;\n7:   } catch (error) {\n8:     console.error('Error loading EnhancedChallengesPageV3:', error);\n9:     return (\n10:       <div className='container mx-auto p-6'>"
    },
    {
      "file": "src/pages/ClubDetailPage.tsx",
      "line": 126,
      "content": "console.error('Error fetching club details:', error);",
      "context": "124:       setMemberCount(mockMembers.length);\n125:     } catch (error) {\n126:       console.error('Error fetching club details:', error);\n127:       toast({\n128:         title: 'Lỗi',"
    },
    {
      "file": "src/pages/ClubDetailPage.tsx",
      "line": 165,
      "content": "console.error('Error joining club:', error);",
      "context": "163:       fetchClubDetails(); // Refresh data\n164:     } catch (error) {\n165:       console.error('Error joining club:', error);\n166:       toast({\n167:         title: 'Lỗi',"
    },
    {
      "file": "src/pages/ClubManagement.tsx",
      "line": 42,
      "content": "console.error('Error fetching club ID:', error);",
      "context": "40:         }\n41:       } catch (error) {\n42:         console.error('Error fetching club ID:', error);\n43:       } finally {\n44:         setLoading(false);"
    },
    {
      "file": "src/pages/ClubsPage.tsx",
      "line": 13,
      "content": "console.log('🏢 [ClubsPage] Hook state:', { clubs, loading, error });",
      "context": "11:   console.log('🏢 [ClubsPage] Component rendering...');\n12:   const { clubs, loading, error } = useClubs();\n13:   console.log('🏢 [ClubsPage] Hook state:', { clubs, loading, error });\n14: \n15:   const formatPrice = (price: number) => {"
    },
    {
      "file": "src/pages/Dashboard.tsx",
      "line": 128,
      "content": "console.error('Error deleting post:', error);",
      "context": "126:       toast.success('Đã xóa bài viết thành công!');\n127:     } catch (error) {\n128:       console.error('Error deleting post:', error);\n129:       toast.error('Không thể xóa bài viết. Vui lòng thử lại.');\n130:     }"
    },
    {
      "file": "src/pages/DiscoveryPage.tsx",
      "line": 155,
      "content": "console.error('Failed to fetch data:', error);",
      "context": "153:       ]);\n154:     } catch (error) {\n155:       console.error('Failed to fetch data:', error);\n156:     } finally {\n157:       setIsLoading(false);"
    },
    {
      "file": "src/pages/EnhancedDiscoveryPage.tsx",
      "line": 56,
      "content": "console.error('Error fetching profile:', error);",
      "context": "54:         setProfile(userProfile);\n55:       } catch (error) {\n56:         console.error('Error fetching profile:', error);\n57:       }\n58:     };"
    },
    {
      "file": "src/pages/EnhancedDiscoveryPage.tsx",
      "line": 110,
      "content": "console.error('Error sending challenge:', error);",
      "context": "108:       nextPlayer();\n109:     } catch (error) {\n110:       console.error('Error sending challenge:', error);\n111:       toast.error('Có lỗi xảy ra khi gửi thách đấu');\n112:     }"
    },
    {
      "file": "src/pages/EnhancedLeaderboardPage.tsx",
      "line": 91,
      "content": "console.error('Error fetching provinces:', error);",
      "context": "89:       setProvinces(mockProvinces);\n90:     } catch (error) {\n91:       console.error('Error fetching provinces:', error);\n92:     }\n93:   };"
    },
    {
      "file": "src/pages/EnhancedLeaderboardPage.tsx",
      "line": 183,
      "content": "console.error('Error fetching rankings:', error);",
      "context": "181:       setRankings(filteredData);\n182:     } catch (error) {\n183:       console.error('Error fetching rankings:', error);\n184:       toast.error('Không thể tải bảng xếp hạng');\n185:     } finally {"
    },
    {
      "file": "src/pages/EnhancedLoginPage.tsx",
      "line": 176,
      "content": "console.error('Phone login error:', error);",
      "context": "174:       }\n175:     } catch (error) {\n176:       console.error('Phone login error:', error);\n177:       toast.error('Có lỗi xảy ra khi đăng nhập');\n178:     } finally {"
    },
    {
      "file": "src/pages/EnhancedLoginPage.tsx",
      "line": 239,
      "content": "console.error('Email login error:', error);",
      "context": "237:       }\n238:     } catch (error) {\n239:       console.error('Email login error:', error);\n240:       toast.error('Có lỗi xảy ra khi đăng nhập');\n241:     } finally {"
    },
    {
      "file": "src/pages/EnhancedLoginPage.tsx",
      "line": 463,
      "content": "console.error('OTP verification error:', error);",
      "context": "461:             }\n462:           } catch (error) {\n463:             console.error('OTP verification error:', error);\n464:             toast.error('Có lỗi xảy ra khi xác thực OTP');\n465:           } finally {"
    },
    {
      "file": "src/pages/EnhancedLoginPage.tsx",
      "line": 478,
      "content": "console.error('Resend OTP error:', error);",
      "context": "476:             }\n477:           } catch (error) {\n478:             console.error('Resend OTP error:', error);\n479:             toast.error('Có lỗi xảy ra khi gửi lại OTP');\n480:           }"
    },
    {
      "file": "src/pages/EnhancedRegisterPage.tsx",
      "line": 109,
      "content": "console.error('Phone registration error:', error);",
      "context": "107:       }\n108:     } catch (error) {\n109:       console.error('Phone registration error:', error);\n110:       toast.error('Có lỗi xảy ra khi đăng ký');\n111:     } finally {"
    },
    {
      "file": "src/pages/EnhancedRegisterPage.tsx",
      "line": 138,
      "content": "console.error('❌ Failed to set password:', passwordError);",
      "context": "136:           \n137:           if (passwordError) {\n138:             console.error('❌ Failed to set password:', passwordError);\n139:             toast.error('Đăng ký thành công nhưng có lỗi khi thiết lập mật khẩu. Vui lòng sử dụng OTP để đăng nhập.');\n140:           } else {"
    },
    {
      "file": "src/pages/EnhancedRegisterPage.tsx",
      "line": 163,
      "content": "console.error('Error triggering account creation milestone:', milestoneError);",
      "context": "161:             }\n162:           } catch (milestoneError) {\n163:             console.error('Error triggering account creation milestone:', milestoneError);\n164:           }\n165:         }, 2000);"
    },
    {
      "file": "src/pages/EnhancedRegisterPage.tsx",
      "line": 170,
      "content": "console.error('OTP verification error:', error);",
      "context": "168:       }\n169:     } catch (error) {\n170:       console.error('OTP verification error:', error);\n171:       toast.error('Có lỗi xảy ra khi xác thực OTP');\n172:     }"
    },
    {
      "file": "src/pages/EnhancedRegisterPage.tsx",
      "line": 187,
      "content": "console.error('Resend OTP error:', error);",
      "context": "185:       }\n186:     } catch (error) {\n187:       console.error('Resend OTP error:', error);\n188:       toast.error('Có lỗi xảy ra khi gửi lại mã OTP');\n189:     }"
    },
    {
      "file": "src/pages/EnhancedRegisterPage.tsx",
      "line": 246,
      "content": "console.error('Email registration error:', error);",
      "context": "244:       }\n245:     } catch (error) {\n246:       console.error('Email registration error:', error);\n247:       toast.error('Có lỗi xảy ra khi đăng ký');\n248:     } finally {"
    },
    {
      "file": "src/pages/FeedPage.tsx",
      "line": 67,
      "content": "console.error('Error joining tournament:', error);",
      "context": "65:       await joinTournament.mutateAsync({ tournamentId });\n66:     } catch (error) {\n67:       console.error('Error joining tournament:', error);\n68:     }\n69:   };"
    },
    {
      "file": "src/pages/MatchHistoryPage.tsx",
      "line": 231,
      "content": "console.error('Error fetching match history:', error);",
      "context": "229:       }\n230:     } catch (error) {\n231:       console.error('Error fetching match history:', error);\n232:       toast.error('Không thể tải lịch sử trận đấu');\n233:     } finally {"
    },
    {
      "file": "src/pages/MembershipPage.tsx",
      "line": 26,
      "content": "console.error('Error upgrading membership:', error);",
      "context": "24:       navigate(`/payment/membership?plan=${planType}&price=${planPrice}`);\n25:     } catch (error) {\n26:       console.error('Error upgrading membership:', error);\n27:       toast.error('Có lỗi xảy ra khi nâng cấp');\n28:     }"
    },
    {
      "file": "src/pages/NotFound.tsx",
      "line": 8,
      "content": "console.error(",
      "context": "6: \n7:   useEffect(() => {\n8:     console.error(\n9:       '404 Error: User attempted to access non-existent route:',\n10:       location.pathname"
    },
    {
      "file": "src/pages/NotificationsFullPage.tsx",
      "line": 84,
      "content": "console.error('❌ Error fetching notifications:', error);",
      "context": "82: \n83:       if (error) {\n84:         console.error('❌ Error fetching notifications:', error);\n85:         toast.error('Lỗi khi tải thông báo: ' + error.message);\n86:         return;"
    },
    {
      "file": "src/pages/NotificationsFullPage.tsx",
      "line": 92,
      "content": "console.error('❌ Exception fetching notifications:', error);",
      "context": "90:       setNotifications((data as unknown as Notification[]) || []);\n91:     } catch (error) {\n92:       console.error('❌ Exception fetching notifications:', error);\n93:       toast.error('Lỗi khi tải thông báo');\n94:     } finally {"
    },
    {
      "file": "src/pages/NotificationsFullPage.tsx",
      "line": 109,
      "content": "console.error('Error marking notification as read:', error);",
      "context": "107: \n108:       if (error) {\n109:         console.error('Error marking notification as read:', error);\n110:         return;\n111:       }"
    },
    {
      "file": "src/pages/NotificationsFullPage.tsx",
      "line": 119,
      "content": "console.error('Error marking notification as read:', error);",
      "context": "117:       );\n118:     } catch (error) {\n119:       console.error('Error marking notification as read:', error);\n120:     }\n121:   };"
    },
    {
      "file": "src/pages/NotificationsFullPage.tsx",
      "line": 133,
      "content": "console.error('Error marking all notifications as read:', error);",
      "context": "131: \n132:       if (error) {\n133:         console.error('Error marking all notifications as read:', error);\n134:         toast.error('Lỗi khi đánh dấu đã đọc');\n135:         return;"
    },
    {
      "file": "src/pages/NotificationsFullPage.tsx",
      "line": 141,
      "content": "console.error('Error marking all notifications as read:', error);",
      "context": "139:       toast.success('Đã đánh dấu tất cả thông báo là đã đọc');\n140:     } catch (error) {\n141:       console.error('Error marking all notifications as read:', error);\n142:       toast.error('Lỗi khi đánh dấu đã đọc');\n143:     }"
    },
    {
      "file": "src/pages/NotificationsFullPage.tsx",
      "line": 156,
      "content": "console.error('Error deleting notification:', error);",
      "context": "154: \n155:       if (error) {\n156:         console.error('Error deleting notification:', error);\n157:         toast.error('Lỗi khi xóa thông báo');\n158:         return;"
    },
    {
      "file": "src/pages/NotificationsFullPage.tsx",
      "line": 165,
      "content": "console.error('Error deleting notification:', error);",
      "context": "163:       toast.success('Đã xóa thông báo');\n164:     } catch (error) {\n165:       console.error('Error deleting notification:', error);\n166:       toast.error('Lỗi khi xóa thông báo');\n167:     }"
    },
    {
      "file": "src/pages/NotificationsFullPage.tsx",
      "line": 182,
      "content": "console.error('Error deleting notifications:', error);",
      "context": "180: \n181:       if (error) {\n182:         console.error('Error deleting notifications:', error);\n183:         toast.error('Lỗi khi xóa thông báo');\n184:         return;"
    },
    {
      "file": "src/pages/NotificationsFullPage.tsx",
      "line": 193,
      "content": "console.error('Error deleting notifications:', error);",
      "context": "191:       toast.success(`Đã xóa ${selectedNotifications.length} thông báo`);\n192:     } catch (error) {\n193:       console.error('Error deleting notifications:', error);\n194:       toast.error('Lỗi khi xóa thông báo');\n195:     }"
    },
    {
      "file": "src/pages/PaymentClubMembershipPage.tsx",
      "line": 43,
      "content": "console.error('Error fetching profile:', error);",
      "context": "41:         setProfile(userProfile);\n42:       } catch (error) {\n43:         console.error('Error fetching profile:', error);\n44:         toast({\n45:           title: 'Lỗi',"
    },
    {
      "file": "src/pages/PaymentClubMembershipPage.tsx",
      "line": 74,
      "content": "console.error('Payment error:', error);",
      "context": "72:       });\n73:     } catch (error) {\n74:       console.error('Payment error:', error);\n75:       toast({\n76:         title: 'Lỗi thanh toán',"
    },
    {
      "file": "src/pages/PaymentMembershipPage.tsx",
      "line": 72,
      "content": "console.error('Error fetching profile:', error);",
      "context": "70:         setProfile(userProfile);\n71:       } catch (error) {\n72:         console.error('Error fetching profile:', error);\n73:         toast({\n74:           title: 'Lỗi',"
    },
    {
      "file": "src/pages/PaymentMembershipPage.tsx",
      "line": 103,
      "content": "console.error('Payment error:', error);",
      "context": "101:       });\n102:     } catch (error) {\n103:       console.error('Payment error:', error);\n104:       toast({\n105:         title: 'Lỗi thanh toán',"
    },
    {
      "file": "src/pages/PaymentSuccessPage.tsx",
      "line": 60,
      "content": "console.error('Payment verification error:', error);",
      "context": "58:       toast.success('Thanh toán thành công!');\n59:     } catch (error) {\n60:       console.error('Payment verification error:', error);\n61:       setStatus('error');\n62:       toast.error('Có lỗi xảy ra khi xác thực thanh toán');"
    },
    {
      "file": "src/pages/PublicProfilePage.tsx",
      "line": 65,
      "content": "console.error('Error fetching profile:', error);",
      "context": "63: \n64:       if (error) {\n65:         console.error('Error fetching profile:', error);\n66:         toast.error('Không tìm thấy người chơi này');\n67:         navigate('/');"
    },
    {
      "file": "src/pages/PublicProfilePage.tsx",
      "line": 84,
      "content": "console.error('Error:', error);",
      "context": "82:       }\n83:     } catch (error) {\n84:       console.error('Error:', error);\n85:       toast.error('Có lỗi xảy ra khi tải thông tin');\n86:     } finally {"
    },
    {
      "file": "src/pages/QRSystemPage.tsx",
      "line": 98,
      "content": "console.error('Error creating QR code:', error);",
      "context": "96:       });\n97:     } catch (error) {\n98:       console.error('Error creating QR code:', error);\n99:       toast({\n100:         title: 'Lỗi',"
    },
    {
      "file": "src/pages/RankingPage.tsx",
      "line": 74,
      "content": "console.error('Error fetching rankings:', error);",
      "context": "72:       setRankings(mockRankings);\n73:     } catch (error) {\n74:       console.error('Error fetching rankings:', error);\n75:     } finally {\n76:       setLoading(false);"
    },
    {
      "file": "src/pages/RankingPage.tsx",
      "line": 90,
      "content": "console.error('Error fetching clubs:', error);",
      "context": "88:       setClubs(data?.map(club => ({ id: club.id, name: club.club_name })) || []);\n89:     } catch (error) {\n90:       console.error('Error fetching clubs:', error);\n91:     }\n92:   };"
    },
    {
      "file": "src/pages/SABO32DemoPage.tsx",
      "line": 30,
      "content": "console.error('Error checking tournament:', error);",
      "context": "28:       setTournamentExists(data && data.length > 0);\n29:     } catch (error) {\n30:       console.error('Error checking tournament:', error);\n31:       setTournamentExists(false);\n32:     } finally {"
    },
    {
      "file": "src/pages/SABO32DemoPage.tsx",
      "line": 70,
      "content": "console.error('❌ Tournament creation error:', error);",
      "context": "68: \n69:       if (error) {\n70:         console.error('❌ Tournament creation error:', error);\n71:         throw error;\n72:       }"
    },
    {
      "file": "src/pages/SABO32DemoPage.tsx",
      "line": 80,
      "content": "console.error('❌ Error creating tournament:', error);",
      "context": "78:       \n79:     } catch (error: any) {\n80:       console.error('❌ Error creating tournament:', error);\n81:       toast.error(`Error: ${error.message || 'Failed to create tournament'}`);\n82:     } finally {"
    },
    {
      "file": "src/pages/SABO32DemoPageNew.tsx",
      "line": 30,
      "content": "console.error('Error checking tournament:', error);",
      "context": "28:       setTournamentExists(data && data.length > 0);\n29:     } catch (error) {\n30:       console.error('Error checking tournament:', error);\n31:       setTournamentExists(false);\n32:     } finally {"
    },
    {
      "file": "src/pages/SABO32DemoPageNew.tsx",
      "line": 70,
      "content": "console.error('❌ Tournament creation error:', error);",
      "context": "68: \n69:       if (error) {\n70:         console.error('❌ Tournament creation error:', error);\n71:         throw error;\n72:       }"
    },
    {
      "file": "src/pages/SABO32DemoPageNew.tsx",
      "line": 80,
      "content": "console.error('❌ Error creating tournament:', error);",
      "context": "78:       \n79:     } catch (error: any) {\n80:       console.error('❌ Error creating tournament:', error);\n81:       toast.error(`Error: ${error.message || 'Failed to create tournament'}`);\n82:     } finally {"
    },
    {
      "file": "src/pages/SPADashboard.tsx",
      "line": 34,
      "content": "console.error('Error loading SPA data:', error);",
      "context": "32:         setCurrentPoints(points);\n33:       } catch (error) {\n34:         console.error('Error loading SPA data:', error);\n35:       } finally {\n36:         setLoading(false);"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 102,
      "content": "console.error(`Test failed: ${category} - ${testName}:`, error);",
      "context": "100:     } catch (error: any) {\n101:       const duration = Date.now() - startTime;\n102:       console.error(`Test failed: ${category} - ${testName}:`, error);\n103: \n104:       addResult({"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 256,
      "content": "console.log('Checking for console errors...');",
      "context": "254: \n255:   const checkConsoleErrors = async () => {\n256:     console.log('Checking for console errors...');\n257: \n258:     // Create a simple test to check if React is working"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 359,
      "content": "console.error('Audit process failed:', error);",
      "context": "357:       await runTest('System', 'Health Check', checkSystemHealth);\n358:     } catch (error) {\n359:       console.error('Audit process failed:', error);\n360:       addResult({\n361:         category: 'System',"
    },
    {
      "file": "src/pages/SystemHealthPage.tsx",
      "line": 116,
      "content": "console.error('System check failed:', error);",
      "context": "114:       setLastCheck(new Date());\n115:     } catch (error) {\n116:       console.error('System check failed:', error);\n117:     } finally {\n118:       setLoading(false);"
    },
    {
      "file": "src/pages/TournamentDetailRealtime.tsx",
      "line": 70,
      "content": "console.error('Error loading tournament:', error);",
      "context": "68: \n69:       if (error) {\n70:         console.error('Error loading tournament:', error);\n71:         toast.error('Lỗi khi tải thông tin giải đấu');\n72:         return;"
    },
    {
      "file": "src/pages/TournamentDetailRealtime.tsx",
      "line": 77,
      "content": "console.error('Error in loadTournament:', error);",
      "context": "75:       setTournament(data);\n76:     } catch (error) {\n77:       console.error('Error in loadTournament:', error);\n78:       toast.error('Lỗi khi tải thông tin giải đấu');\n79:     } finally {"
    },
    {
      "file": "src/pages/TournamentDetailRealtime.tsx",
      "line": 100,
      "content": "console.error('Registration error:', error);",
      "context": "98: \n99:       if (error) {\n100:         console.error('Registration error:', error);\n101:         toast.error('Lỗi khi đăng ký: ' + error.message);\n102:         return;"
    },
    {
      "file": "src/pages/TournamentDetailRealtime.tsx",
      "line": 107,
      "content": "console.error('Error in handleRegister:', error);",
      "context": "105:       toast.success('🎉 Đăng ký thành công!');\n106:     } catch (error) {\n107:       console.error('Error in handleRegister:', error);\n108:       toast.error('Lỗi khi đăng ký giải đấu');\n109:     } finally {"
    },
    {
      "file": "src/pages/TournamentManagement.tsx",
      "line": 122,
      "content": "console.error('Manual advance error:', error);",
      "context": "120:       }\n121:     } catch (error) {\n122:       console.error('Manual advance error:', error);\n123:       toast.error('Lỗi khi thực hiện manual advance');\n124:     }"
    },
    {
      "file": "src/pages/WalletPage.tsx",
      "line": 60,
      "content": "console.error('Failed to fetch wallet data:', error);",
      "context": "58:         });\n59:       } catch (error) {\n60:         console.error('Failed to fetch wallet data:', error);\n61:       } finally {\n62:         setIsLoading(false);"
    },
    {
      "file": "src/pages/WalletPage.tsx",
      "line": 102,
      "content": "console.error('Payment error:', error);",
      "context": "100: \n101:   const handlePaymentError = (error: string) => {\n102:     console.error('Payment error:', error);\n103:     // Show error notification\n104:   };"
    },
    {
      "file": "src/pages/_ARCHIVED_ChallengesPage.tsx",
      "line": 115,
      "content": "console.error('Failed to fetch challenges:', error);",
      "context": "113:       ]);\n114:     } catch (error) {\n115:       console.error('Failed to fetch challenges:', error);\n116:     } finally {\n117:       setIsLoading(false);"
    },
    {
      "file": "src/pages/challenges/EnhancedChallengesPageV3.tsx",
      "line": 129,
      "content": "console.log('Challenge check:', { challengeCheck, checkError });",
      "context": "127:         .single();\n128: \n129:       console.log('Challenge check:', { challengeCheck, checkError });\n130: \n131:       if (checkError || !challengeCheck) {"
    },
    {
      "file": "src/pages/challenges/EnhancedChallengesPageV3.tsx",
      "line": 150,
      "content": "console.log('Supabase update response:', { data, error });",
      "context": "148:         .select();\n149: \n150:       console.log('Supabase update response:', { data, error });\n151: \n152:       if (error) {"
    },
    {
      "file": "src/pages/challenges/EnhancedChallengesPageV3.tsx",
      "line": 153,
      "content": "console.error('Supabase error:', error);",
      "context": "151: \n152:       if (error) {\n153:         console.error('Supabase error:', error);\n154:         throw error;\n155:       }"
    },
    {
      "file": "src/pages/challenges/EnhancedChallengesPageV3.tsx",
      "line": 164,
      "content": "console.error('Error cancelling challenge:', error);",
      "context": "162:       toast.success('🚫 Đã hủy thách đấu thành công!');\n163:     } catch (error) {\n164:       console.error('Error cancelling challenge:', error);\n165:       const errorMessage = error instanceof Error ? error.message : 'Lỗi không xác định';\n166:       toast.error(`❌ ${errorMessage}`);"
    },
    {
      "file": "src/pages/challenges/components/chat/ChallengeChat.tsx",
      "line": 75,
      "content": "console.error('Error loading messages:', error);",
      "context": "73:       setMessages(mockMessages);\n74:     } catch (error) {\n75:       console.error('Error loading messages:', error);\n76:       toast.error('Lỗi tải tin nhắn');\n77:     } finally {"
    },
    {
      "file": "src/pages/challenges/components/chat/ChallengeChat.tsx",
      "line": 103,
      "content": "console.error('Error sending message:', error);",
      "context": "101:       toast.success('Đã gửi tin nhắn!');\n102:     } catch (error) {\n103:       console.error('Error sending message:', error);\n104:       toast.error('Lỗi gửi tin nhắn');\n105:     } finally {"
    },
    {
      "file": "src/pages/challenges/components/modals/CancelChallengeModal.tsx",
      "line": 43,
      "content": "console.error('Error cancelling challenge:', error);",
      "context": "41:       onClose();\n42:     } catch (error) {\n43:       console.error('Error cancelling challenge:', error);\n44:     } finally {\n45:       setIsSubmitting(false);"
    },
    {
      "file": "src/pages/challenges/components/score/ScoreSubmissionForm.tsx",
      "line": 160,
      "content": "console.error('Error submitting score:', error);",
      "context": "158:       onScoreSubmitted();\n159:     } catch (error: any) {\n160:       console.error('Error submitting score:', error);\n161:       toast.error('Lỗi khi gửi tỷ số: ' + error.message);\n162:     } finally {"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 101,
      "content": "console.error('Error loading player profiles:', error);",
      "context": "99:       setEditedOpponentScore(challenge.opponent_final_score || 0);\n100:     } catch (error) {\n101:       console.error('Error loading player profiles:', error);\n102:     }\n103:   };"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 209,
      "content": "console.log('Database update error:', error);",
      "context": "207:         .eq('id', challenge.id);\n208: \n209:       console.log('Database update error:', error);\n210:       if (error) throw error;\n211: "
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 244,
      "content": "console.error('Error entering score:', error);",
      "context": "242:       onScoreUpdated();\n243:     } catch (error: any) {\n244:       console.error('Error entering score:', error);\n245:       toast.error('Lỗi khi nhập tỷ số: ' + error.message);\n246:     } finally {"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 294,
      "content": "console.error('Error confirming score:', error);",
      "context": "292:       onScoreUpdated();\n293:     } catch (error: any) {\n294:       console.error('Error confirming score:', error);\n295:       toast.error('Lỗi khi xác nhận tỷ số: ' + error.message);\n296:     } finally {"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 363,
      "content": "console.error('Error saving player ratings:', ratingsError);",
      "context": "361: \n362:           if (ratingsError) {\n363:             console.error('Error saving player ratings:', ratingsError);\n364:           }\n365:         }"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 416,
      "content": "console.error('Error club confirming:', error);",
      "context": "414:       setIsOpen(false);\n415:     } catch (error: any) {\n416:       console.error('Error club confirming:', error);\n417:       toast.error('Lỗi khi xác nhận: ' + error.message);\n418:     } finally {"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 554,
      "content": "console.error('Error sending score confirmation email:', error);",
      "context": "552:       });\n553:     } catch (error) {\n554:       console.error('Error sending score confirmation email:', error);\n555:       // Don't throw error to prevent blocking the main flow\n556:     }"
    },
    {
      "file": "src/pages/challenges/components/sections/ActiveChallengesSection.tsx",
      "line": 168,
      "content": "console.error('Error cancelling challenge:', error);",
      "context": "166:       onStatsUpdate();\n167:     } catch (error) {\n168:       console.error('Error cancelling challenge:', error);\n169:       toast.error('Lỗi khi hủy thách đấu');\n170:     }"
    },
    {
      "file": "src/pages/mobile/profile/components/MilestoneDetailPage.tsx",
      "line": 70,
      "content": "console.error('Error loading milestone data:', error);",
      "context": "68:         });\n69:       } catch (error) {\n70:         console.error('Error loading milestone data:', error);\n71:       } finally {\n72:         setLoading(false);"
    },
    {
      "file": "src/pages/mobile/profile/components/MilestoneProgress.tsx",
      "line": 62,
      "content": "console.error('Error loading milestone progress:', error);",
      "context": "60:         setMilestones(sorted.slice(0, 3));\n61:       } catch (error) {\n62:         console.error('Error loading milestone progress:', error);\n63:         // Fallback to empty array\n64:         setMilestones([]);"
    },
    {
      "file": "src/pages/mobile/profile/components/SpaHistoryTab.tsx",
      "line": 249,
      "content": "console.error('Error getting transaction details:', error);",
      "context": "247:       return details;\n248:     } catch (error) {\n249:       console.error('Error getting transaction details:', error);\n250:       return null;\n251:     }"
    },
    {
      "file": "src/pages/mobile/profile/components/SpaHistoryTab.tsx",
      "line": 290,
      "content": "console.error('Error fetching SPA data:', { error, pointsLogError });",
      "context": "288: \n289:       if (error || pointsLogError) {\n290:         console.error('Error fetching SPA data:', { error, pointsLogError });\n291:         return;\n292:       }"
    },
    {
      "file": "src/pages/mobile/profile/components/SpaHistoryTab.tsx",
      "line": 350,
      "content": "console.error('Error fetching SPA data:', error);",
      "context": "348:       setTransactionDetails(detailsMap);\n349:     } catch (error) {\n350:       console.error('Error fetching SPA data:', error);\n351:     } finally {\n352:       setLoading(false);"
    },
    {
      "file": "src/pages/mobile/profile/hooks/useMobileProfile.ts",
      "line": 34,
      "content": "console.error('Error fetching profile:', error);",
      "context": "32: \n33:       if (error && error.code !== 'PGRST116') {\n34:         console.error('Error fetching profile:', error);\n35:         return;\n36:       }"
    },
    {
      "file": "src/pages/mobile/profile/hooks/useMobileProfile.ts",
      "line": 62,
      "content": "console.error('❌ [MobileProfile] Failed to create profile via upsert:', createError);",
      "context": "60:             \n61:           if (createError) {\n62:             console.error('❌ [MobileProfile] Failed to create profile via upsert:', createError);\n63:             \n64:             // Final fallback: Just continue without profile (for read-only access)"
    },
    {
      "file": "src/pages/mobile/profile/hooks/useMobileProfile.ts",
      "line": 80,
      "content": "console.error('❌ [MobileProfile] Exception creating profile:', e);",
      "context": "78:           }\n79:         } catch (e) {\n80:           console.error('❌ [MobileProfile] Exception creating profile:', e);\n81:         }\n82:       }"
    },
    {
      "file": "src/pages/mobile/profile/hooks/useMobileProfile.ts",
      "line": 110,
      "content": "console.error('❌ [MobileProfile] fetchProfile error:', e);",
      "context": "108:       setEditingProfile(profileData);\n109:     } catch (e) {\n110:       console.error('❌ [MobileProfile] fetchProfile error:', e);\n111:     } finally {\n112:       setLoading(false);"
    },
    {
      "file": "src/pages/mobile/profile/hooks/useMobileProfile.ts",
      "line": 148,
      "content": "console.warn('⚠️ [MobileProfile] get_user_display_name error detected, using fallback update');",
      "context": "146:         // ✅ BYPASS: Check if error is due to missing function\n147:         if (mutationError.message?.includes('get_user_display_name')) {\n148:           console.warn('⚠️ [MobileProfile] get_user_display_name error detected, using fallback update');\n149:           const { error: fallbackError } = await supabase\n150:             .from('profiles')"
    },
    {
      "file": "src/pages/mobile/profile/hooks/useMobileProfile.ts",
      "line": 165,
      "content": "console.error(e);",
      "context": "163:       return true;\n164:     } catch (e: any) {\n165:       console.error(e);\n166:       toast.error('Lưu thất bại: ' + e.message);\n167:       return false;"
    },
    {
      "file": "src/pages/mobile/profile/hooks/useMobileProfile.ts",
      "line": 208,
      "content": "console.error('❌ [Avatar Upload] Primary bucket failed:', error);",
      "context": "206: \n207:       if (error) {\n208:         console.error('❌ [Avatar Upload] Primary bucket failed:', error);\n209:         \n210:         // Try with different bucket names as fallback"
    },
    {
      "file": "src/pages/mobile/profile/hooks/useMobileProfile.ts",
      "line": 253,
      "content": "console.error('❌ [Avatar Upload] Failed:', error);",
      "context": "251:       \n252:     } catch (error) {\n253:       console.error('❌ [Avatar Upload] Failed:', error);\n254:       toast.error('Upload avatar thất bại. Vui lòng thử lại.');\n255:     } finally {"
    },
    {
      "file": "src/pages/mobile/profile/hooks/useMobileProfile.ts",
      "line": 274,
      "content": "console.error('❌ [Avatar Upload] Error listing buckets:', bucketsError);",
      "context": "272:       const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();\n273:       if (bucketsError) {\n274:         console.error('❌ [Avatar Upload] Error listing buckets:', bucketsError);\n275:       }\n276: "
    },
    {
      "file": "src/pages/mobile/profile/hooks/useMobileProfile.ts",
      "line": 285,
      "content": "console.error('❌ [Avatar Upload] Upload error:', uploadError);",
      "context": "283: \n284:       if (uploadError) {\n285:         console.error('❌ [Avatar Upload] Upload error:', uploadError);\n286:         \n287:         // Try alternative bucket names if 'avatars' fails"
    },
    {
      "file": "src/pages/mobile/profile/hooks/useMobileProfile.ts",
      "line": 339,
      "content": "console.error('❌ [Avatar Upload] Invalid URL generated:', avatarUrl);",
      "context": "337:       // Validate URL format\n338:       if (!avatarUrl || avatarUrl === 'undefined' || !avatarUrl.includes('supabase')) {\n339:         console.error('❌ [Avatar Upload] Invalid URL generated:', avatarUrl);\n340:         throw new Error('Invalid avatar URL generated');\n341:       }"
    },
    {
      "file": "src/pages/mobile/profile/hooks/useMobileProfile.ts",
      "line": 349,
      "content": "console.error('❌ [Avatar Upload] Final error:', e);",
      "context": "347:       \n348:     } catch (e: any) {\n349:       console.error('❌ [Avatar Upload] Final error:', e);\n350:       toast.error('Lỗi tải ảnh: ' + e.message);\n351:     } finally {"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 73,
      "content": "console.warn('⚠️ RPC generate_tournament_matches failed, fallback to client generator:', rpcError.message);",
      "context": "71:           };\n72:         } else if (rpcError) {\n73:           console.warn('⚠️ RPC generate_tournament_matches failed, fallback to client generator:', rpcError.message);\n74:         } else {\n75:           console.warn('⚠️ RPC did not return success flag, fallback to client generator');"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 123,
      "content": "console.error('🚨 Bracket generation failed:', error);",
      "context": "121: \n122:     } catch (error) {\n123:       console.error('🚨 Bracket generation failed:', error);\n124:       return {\n125:         success: false,"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 152,
      "content": "console.warn('⚠️ Standard query failed:', result.error);",
      "context": "150:           \n151:         if (result.error) {\n152:           console.warn('⚠️ Standard query failed:', result.error);\n153:           regError = result.error;\n154:         } else {"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 159,
      "content": "console.warn('⚠️ Standard query exception:', error);",
      "context": "157:         }\n158:       } catch (error) {\n159:         console.warn('⚠️ Standard query exception:', error);\n160:         regError = error;\n161:       }"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 174,
      "content": "console.warn('⚠️ Simplified query failed:', result.error);",
      "context": "172:             \n173:           if (result.error) {\n174:             console.warn('⚠️ Simplified query failed:', result.error);\n175:           } else {\n176:             registrations = result.data || [];"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 181,
      "content": "console.warn('⚠️ Simplified query exception:', error);",
      "context": "179:           }\n180:         } catch (error) {\n181:           console.warn('⚠️ Simplified query exception:', error);\n182:         }\n183:       }"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 195,
      "content": "console.error('❌ All query approaches failed. Final error:', result.error);",
      "context": "193:             \n194:           if (result.error) {\n195:             console.error('❌ All query approaches failed. Final error:', result.error);\n196:             return false;\n197:           } else {"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 207,
      "content": "console.error('❌ All approaches failed. Final exception:', error);",
      "context": "205:           }\n206:         } catch (error) {\n207:           console.error('❌ All approaches failed. Final exception:', error);\n208:           return false;\n209:         }"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 229,
      "content": "console.error('❌ Profile query error:', profileError);",
      "context": "227: \n228:       if (profileError) {\n229:         console.error('❌ Profile query error:', profileError);\n230:         return false;\n231:       }"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 267,
      "content": "console.error('🚨 Error loading players:', error);",
      "context": "265: \n266:     } catch (error) {\n267:       console.error('🚨 Error loading players:', error);\n268:       return false;\n269:     }"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 62,
      "content": "console.error('❌ SABO matches table not accessible:', error.message);",
      "context": "60: \n61:       if (error) {\n62:         console.error('❌ SABO matches table not accessible:', error.message);\n63:         return false;\n64:       }"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 69,
      "content": "console.error('💥 SABO table check exception:', error);",
      "context": "67:       return true;\n68:     } catch (error) {\n69:       console.error('💥 SABO table check exception:', error);\n70:       return false;\n71:     }"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 169,
      "content": "console.error('❌ Clear SABO matches failed:', error.message);",
      "context": "167: \n168:       if (error) {\n169:         console.error('❌ Clear SABO matches failed:', error.message);\n170:         return false;\n171:       }"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 176,
      "content": "console.error('💥 Clear SABO matches exception:', error);",
      "context": "174:       return true;\n175:     } catch (error) {\n176:       console.error('💥 Clear SABO matches exception:', error);\n177:       return false;\n178:     }"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 194,
      "content": "console.error('❌ SABO table not accessible');",
      "context": "192:     const hasAccess = await this.checkTableAccess();\n193:     if (!hasAccess) {\n194:       console.error('❌ SABO table not accessible');\n195:       return 0;\n196:     }"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 210,
      "content": "console.error('❌ Could not fetch tournament club_id:', tournamentError?.message);",
      "context": "208: \n209:     if (tournamentError || !tournament) {\n210:       console.error('❌ Could not fetch tournament club_id:', tournamentError?.message);\n211:       return 0;\n212:     }"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 255,
      "content": "console.error(`❌ SABO Batch ${batchNumber} failed:`, error.message);",
      "context": "253: \n254:         if (error) {\n255:           console.error(`❌ SABO Batch ${batchNumber} failed:`, error.message);\n256:           console.error('🧪 First row of failed batch:', batch[0]);\n257:           "
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 256,
      "content": "console.error('🧪 First row of failed batch:', batch[0]);",
      "context": "254:         if (error) {\n255:           console.error(`❌ SABO Batch ${batchNumber} failed:`, error.message);\n256:           console.error('🧪 First row of failed batch:', batch[0]);\n257:           \n258:           // Try individual saves for failed batch"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 266,
      "content": "console.error(`❌ Individual SABO save failed (match_number=${match.match_number}, round=${match.round_number}):`, individualError.message);",
      "context": "264:                 \n265:               if (individualError) {\n266:                 console.error(`❌ Individual SABO save failed (match_number=${match.match_number}, round=${match.round_number}):`, individualError.message);\n267:               } else {\n268:                 savedCount++;"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 272,
      "content": "console.error(`💥 Individual SABO exception:`, individualException);",
      "context": "270:               }\n271:             } catch (individualException) {\n272:               console.error(`💥 Individual SABO exception:`, individualException);\n273:             }\n274:           }"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 280,
      "content": "console.error(`💥 SABO Batch ${batchNumber} exception:`, batchError);",
      "context": "278:         }\n279:       } catch (batchError) {\n280:         console.error(`💥 SABO Batch ${batchNumber} exception:`, batchError);\n281:       }\n282:     }"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 347,
      "content": "console.error('❌ Failed to get SABO matches:', error.message);",
      "context": "345: \n346:       if (error) {\n347:         console.error('❌ Failed to get SABO matches:', error.message);\n348:         return [];\n349:       }"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 353,
      "content": "console.error('💥 Get SABO matches exception:', error);",
      "context": "351:       return data || [];\n352:     } catch (error) {\n353:       console.error('💥 Get SABO matches exception:', error);\n354:       return [];\n355:     }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 21,
      "content": "console.error(`❌ Table ${tableName} access failed:`, error);",
      "context": "19: \n20:       if (error) {\n21:         console.error(`❌ Table ${tableName} access failed:`, error);\n22:         return { exists: false, error };\n23:       }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 28,
      "content": "console.error(`💥 Exception checking table ${tableName}:`, error);",
      "context": "26:       return { exists: true, data };\n27:     } catch (error) {\n28:       console.error(`💥 Exception checking table ${tableName}:`, error);\n29:       return { exists: false, error };\n30:     }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 74,
      "content": "console.log(`❌ Test insert failed: ${error.message}`);",
      "context": "72: \n73:       if (error) {\n74:         console.log(`❌ Test insert failed: ${error.message}`);\n75:         return false;\n76:       }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 90,
      "content": "console.error(`💥 Test insert exception:`, error);",
      "context": "88:       return true;\n89:     } catch (error) {\n90:       console.error(`💥 Test insert exception:`, error);\n91:       return false;\n92:     }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 122,
      "content": "console.log('⚠️ Clear failed (may be empty):', error.message);",
      "context": "120: \n121:       if (error) {\n122:         console.log('⚠️ Clear failed (may be empty):', error.message);\n123:         return false;\n124:       }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 129,
      "content": "console.error('💥 Clear exception:', error);",
      "context": "127:       return true;\n128:     } catch (error) {\n129:       console.error('💥 Clear exception:', error);\n130:       return false;\n131:     }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 148,
      "content": "console.error('❌ Table not accessible');",
      "context": "146:     const { exists } = await this.checkTableStructure(finalTableName);\n147:     if (!exists) {\n148:       console.error('❌ Table not accessible');\n149:       return 0;\n150:     }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 155,
      "content": "console.error('❌ No insert permission');",
      "context": "153:     const canInsert = await this.testInsertPermission(finalTableName);\n154:     if (!canInsert) {\n155:       console.error('❌ No insert permission');\n156:       return 0;\n157:     }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 186,
      "content": "console.error(`❌ Batch ${batchNumber} failed:`, error.message);",
      "context": "184: \n185:         if (error) {\n186:           console.error(`❌ Batch ${batchNumber} failed:`, error.message);\n187:           \n188:           // Try individual saves for failed batch"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 195,
      "content": "console.error(`❌ Individual save failed:`, individualError);",
      "context": "193:               console.log(`✅ Individual save successful`);\n194:             } catch (individualError) {\n195:               console.error(`❌ Individual save failed:`, individualError);\n196:             }\n197:           }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 203,
      "content": "console.error(`💥 Batch ${batchNumber} exception:`, batchError);",
      "context": "201:         }\n202:       } catch (batchError) {\n203:         console.error(`💥 Batch ${batchNumber} exception:`, batchError);\n204:       }\n205:     }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 21,
      "content": "console.error(`❌ Table ${tableName} access failed:`, error);",
      "context": "19: \n20:       if (error) {\n21:         console.error(`❌ Table ${tableName} access failed:`, error);\n22:         return { exists: false, error };\n23:       }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 28,
      "content": "console.error(`💥 Exception checking table ${tableName}:`, error);",
      "context": "26:       return { exists: true, data };\n27:     } catch (error) {\n28:       console.error(`💥 Exception checking table ${tableName}:`, error);\n29:       return { exists: false, error };\n30:     }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 74,
      "content": "console.log(`❌ Test insert failed: ${error.message}`);",
      "context": "72: \n73:       if (error) {\n74:         console.log(`❌ Test insert failed: ${error.message}`);\n75:         return false;\n76:       }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 90,
      "content": "console.error(`💥 Test insert exception:`, error);",
      "context": "88:       return true;\n89:     } catch (error) {\n90:       console.error(`💥 Test insert exception:`, error);\n91:       return false;\n92:     }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 123,
      "content": "console.log('⚠️ Clear failed (may be empty):', error.message);",
      "context": "121: \n122:       if (error) {\n123:         console.log('⚠️ Clear failed (may be empty):', error.message);\n124:         return false;\n125:       }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 130,
      "content": "console.error('💥 Clear exception:', error);",
      "context": "128:       return true;\n129:     } catch (error) {\n130:       console.error('💥 Clear exception:', error);\n131:       return false;\n132:     }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 149,
      "content": "console.error('❌ Table not accessible');",
      "context": "147:     const { exists } = await this.checkTableStructure(finalTableName);\n148:     if (!exists) {\n149:       console.error('❌ Table not accessible');\n150:       return 0;\n151:     }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 156,
      "content": "console.error('❌ No insert permission');",
      "context": "154:     const canInsert = await this.testInsertPermission(finalTableName);\n155:     if (!canInsert) {\n156:       console.error('❌ No insert permission');\n157:       return 0;\n158:     }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 187,
      "content": "console.error(`❌ Batch ${batchNumber} failed:`, error.message);",
      "context": "185: \n186:         if (error) {\n187:           console.error(`❌ Batch ${batchNumber} failed:`, error.message);\n188:           \n189:           // Try individual saves for failed batch"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 196,
      "content": "console.error(`❌ Individual save failed:`, individualError);",
      "context": "194:               console.log(`✅ Individual save successful`);\n195:             } catch (individualError) {\n196:               console.error(`❌ Individual save failed:`, individualError);\n197:             }\n198:           }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 204,
      "content": "console.error(`💥 Batch ${batchNumber} exception:`, batchError);",
      "context": "202:         }\n203:       } catch (batchError) {\n204:         console.error(`💥 Batch ${batchNumber} exception:`, batchError);\n205:       }\n206:     }"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 21,
      "content": "console.log('🏆 Tournament:', tournament, tournamentError);",
      "context": "19:         .single();\n20: \n21:       console.log('🏆 Tournament:', tournament, tournamentError);\n22: \n23:       // 2. Check tournament_registrations directly"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 29,
      "content": "console.log('📝 Registrations:', registrations?.length, regError);",
      "context": "27:         .eq('tournament_id', tournamentId);\n28: \n29:       console.log('📝 Registrations:', registrations?.length, regError);\n30:       console.log('📝 Registrations data:', registrations);\n31: "
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 39,
      "content": "console.log('✅ Confirmed registrations:', confirmedRegs?.length, confirmedError);",
      "context": "37:         .eq('registration_status', 'confirmed');\n38: \n39:       console.log('✅ Confirmed registrations:', confirmedRegs?.length, confirmedError);\n40: \n41:       // 4. Check profiles table access"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 47,
      "content": "console.log('👤 Profiles test:', profilesTest?.length, profilesError);",
      "context": "45:         .limit(5);\n46: \n47:       console.log('👤 Profiles test:', profilesTest?.length, profilesError);\n48: \n49:       // 5. Test the original query"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 63,
      "content": "console.log('🔧 Original query result:', originalQuery, originalError);",
      "context": "61:         .limit(16);\n62: \n63:       console.log('🔧 Original query result:', originalQuery, originalError);\n64: \n65:       // 6. Test alternative query"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 79,
      "content": "console.log('🔄 Alternative query result:', altQuery, altError);",
      "context": "77:         .limit(16);\n78: \n79:       console.log('🔄 Alternative query result:', altQuery, altError);\n80: \n81:       return {"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 146,
      "content": "console.log('❌ Profiles query failed:', profilesError);",
      "context": "144: \n145:       if (profilesError) {\n146:         console.log('❌ Profiles query failed:', profilesError);\n147:         return [];\n148:       }"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 164,
      "content": "console.error('💥 Fix error:', error);",
      "context": "162: \n163:     } catch (error) {\n164:       console.error('💥 Fix error:', error);\n165:       return [];\n166:     }"
    },
    {
      "file": "src/services/challengeNotificationEventHandler.ts",
      "line": 313,
      "content": "console.error('❌ Error handling challenge created:', error);",
      "context": "311:       }\n312:     } catch (error) {\n313:       console.error('❌ Error handling challenge created:', error);\n314:     }\n315:   }"
    },
    {
      "file": "src/services/challengeNotificationEventHandler.ts",
      "line": 346,
      "content": "console.error('❌ Error handling challenge status change:', error);",
      "context": "344:       }\n345:     } catch (error) {\n346:       console.error('❌ Error handling challenge status change:', error);\n347:     }\n348:   }"
    },
    {
      "file": "src/services/challengeNotificationEventHandler.ts",
      "line": 394,
      "content": "console.error('❌ Error handling match result:', error);",
      "context": "392:       });\n393:     } catch (error) {\n394:       console.error('❌ Error handling match result:', error);\n395:     }\n396:   }"
    },
    {
      "file": "src/services/challengeNotificationEventHandler.ts",
      "line": 580,
      "content": "console.error('Error getting profile name:', error);",
      "context": "578:       return data?.full_name || 'Unknown Player';\n579:     } catch (error) {\n580:       console.error('Error getting profile name:', error);\n581:       return 'Unknown Player';\n582:     }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 61,
      "content": "console.error('❌ Error creating notification:', error);",
      "context": "59: \n60:       if (error) {\n61:         console.error('❌ Error creating notification:', error);\n62:         return null;\n63:       }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 68,
      "content": "console.error('❌ Exception creating notification:', error);",
      "context": "66:       return this.transformDatabaseNotification(notification);\n67:     } catch (error) {\n68:       console.error('❌ Exception creating notification:', error);\n69:       return null;\n70:     }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 115,
      "content": "console.error('❌ Error sending real-time notification:', error);",
      "context": "113:       }\n114:     } catch (error) {\n115:       console.error('❌ Error sending real-time notification:', error);\n116:     }\n117:   }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 145,
      "content": "console.error('❌ Error sending batch notifications:', error);",
      "context": "143: \n144:       if (error) {\n145:         console.error('❌ Error sending batch notifications:', error);\n146:         return;\n147:       }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 174,
      "content": "console.error('❌ Exception sending batch notifications:', error);",
      "context": "172:       }\n173:     } catch (error) {\n174:       console.error('❌ Exception sending batch notifications:', error);\n175:     }\n176:   }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 229,
      "content": "console.error('❌ Error fetching notifications:', error);",
      "context": "227: \n228:       if (error) {\n229:         console.error('❌ Error fetching notifications:', error);\n230:         return { notifications: [], total: 0 };\n231:       }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 236,
      "content": "console.error('❌ Exception fetching notifications:', error);",
      "context": "234:       return { notifications, total: count || 0 };\n235:     } catch (error) {\n236:       console.error('❌ Exception fetching notifications:', error);\n237:       return { notifications: [], total: 0 };\n238:     }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 253,
      "content": "console.error('❌ Error getting unread count:', error);",
      "context": "251: \n252:       if (error) {\n253:         console.error('❌ Error getting unread count:', error);\n254:         return 0;\n255:       }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 259,
      "content": "console.error('❌ Exception getting unread count:', error);",
      "context": "257:       return count || 0;\n258:     } catch (error) {\n259:       console.error('❌ Exception getting unread count:', error);\n260:       return 0;\n261:     }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 324,
      "content": "console.error('❌ Exception getting notification stats:', error);",
      "context": "322:       };\n323:     } catch (error) {\n324:       console.error('❌ Exception getting notification stats:', error);\n325:       return null;\n326:     }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 343,
      "content": "console.error('❌ Error marking notification as read:', error);",
      "context": "341: \n342:       if (error) {\n343:         console.error('❌ Error marking notification as read:', error);\n344:         return false;\n345:       }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 349,
      "content": "console.error('❌ Exception marking notification as read:', error);",
      "context": "347:       return true;\n348:     } catch (error) {\n349:       console.error('❌ Exception marking notification as read:', error);\n350:       return false;\n351:     }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 366,
      "content": "console.error('❌ Error marking all notifications as read:', error);",
      "context": "364: \n365:       if (error) {\n366:         console.error('❌ Error marking all notifications as read:', error);\n367:         return false;\n368:       }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 372,
      "content": "console.error('❌ Exception marking all notifications as read:', error);",
      "context": "370:       return true;\n371:     } catch (error) {\n372:       console.error('❌ Exception marking all notifications as read:', error);\n373:       return false;\n374:     }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 389,
      "content": "console.error('❌ Error deleting notification:', error);",
      "context": "387: \n388:       if (error) {\n389:         console.error('❌ Error deleting notification:', error);\n390:         return false;\n391:       }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 395,
      "content": "console.error('❌ Exception deleting notification:', error);",
      "context": "393:       return true;\n394:     } catch (error) {\n395:       console.error('❌ Exception deleting notification:', error);\n396:       return false;\n397:     }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 481,
      "content": "console.error('❌ Error getting notification template:', error);",
      "context": "479: \n480:       if (error) {\n481:         console.error('❌ Error getting notification template:', error);\n482:         return null;\n483:       }"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 487,
      "content": "console.error('❌ Exception getting notification template:', error);",
      "context": "485:       return data;\n486:     } catch (error) {\n487:       console.error('❌ Exception getting notification template:', error);\n488:       return null;\n489:     }"
    },
    {
      "file": "src/services/emailService.ts",
      "line": 94,
      "content": "console.error('Failed to send email:', error);",
      "context": "92:       await this.logEmail(to, template.subject, 'sent');\n93:     } catch (error) {\n94:       console.error('Failed to send email:', error);\n95:       await this.logEmail(to, template.subject, 'failed');\n96:       throw error;"
    },
    {
      "file": "src/services/emailService.ts",
      "line": 109,
      "content": "console.error('Failed to log email:', error);",
      "context": "107:       console.log(`Email log: ${to} - ${subject} - ${status}`);\n108:     } catch (error) {\n109:       console.error('Failed to log email:', error);\n110:     }\n111:   }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 52,
      "content": "console.error('Error sending message:', error);",
      "context": "50: \n51:       if (error) {\n52:         console.error('Error sending message:', error);\n53:         throw error;\n54:       }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 67,
      "content": "console.error('Error in sendMessage:', error);",
      "context": "65:       return data;\n66:     } catch (error) {\n67:       console.error('Error in sendMessage:', error);\n68:       return null;\n69:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 88,
      "content": "console.log('Messages table not available:', tableError.message);",
      "context": "86: \n87:       if (tableError) {\n88:         console.log('Messages table not available:', tableError.message);\n89:         return [];\n90:       }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 154,
      "content": "console.error('Error fetching inbox messages:', error);",
      "context": "152:       return messages || [];\n153:     } catch (error) {\n154:       console.error('Error fetching inbox messages:', error);\n155:       return [];\n156:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 181,
      "content": "console.error('Error fetching sent messages:', error);",
      "context": "179:       return data || [];\n180:     } catch (error) {\n181:       console.error('Error fetching sent messages:', error);\n182:       return [];\n183:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 203,
      "content": "console.error('Error fetching message:', error);",
      "context": "201:       return data;\n202:     } catch (error) {\n203:       console.error('Error fetching message:', error);\n204:       return null;\n205:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 222,
      "content": "console.error('Error marking message as read:', error);",
      "context": "220:       return !error;\n221:     } catch (error) {\n222:       console.error('Error marking message as read:', error);\n223:       return false;\n224:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 241,
      "content": "console.error('Error marking messages as read:', error);",
      "context": "239:       return !error;\n240:     } catch (error) {\n241:       console.error('Error marking messages as read:', error);\n242:       return false;\n243:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 257,
      "content": "console.error('Error archiving message:', error);",
      "context": "255:       return !error;\n256:     } catch (error) {\n257:       console.error('Error archiving message:', error);\n258:       return false;\n259:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 273,
      "content": "console.error('Error deleting message:', error);",
      "context": "271:       return !error;\n272:     } catch (error) {\n273:       console.error('Error deleting message:', error);\n274:       return false;\n275:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 299,
      "content": "console.log('Messages table not available:', tableError.message);",
      "context": "297: \n298:       if (tableError) {\n299:         console.log('Messages table not available:', tableError.message);\n300:         return 0;\n301:       }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 312,
      "content": "console.error('Error getting unread count:', error);",
      "context": "310:       return count || 0;\n311:     } catch (error) {\n312:       console.error('Error getting unread count:', error);\n313:       return 0;\n314:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 355,
      "content": "console.error('Error getting message stats:', error);",
      "context": "353:       };\n354:     } catch (error) {\n355:       console.error('Error getting message stats:', error);\n356:       return {\n357:         total_messages: 0,"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 404,
      "content": "console.error('Error sending system message:', error);",
      "context": "402:       return data;\n403:     } catch (error) {\n404:       console.error('Error sending system message:', error);\n405:       return null;\n406:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 431,
      "content": "console.error('Error triggering multi-channel notification:', error);",
      "context": "429: \n430:       if (error) {\n431:         console.error('Error triggering multi-channel notification:', error);\n432:       }\n433:     } catch (error) {"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 434,
      "content": "console.error('Error in triggerMultiChannelNotification:', error);",
      "context": "432:       }\n433:     } catch (error) {\n434:       console.error('Error in triggerMultiChannelNotification:', error);\n435:     }\n436:   }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 458,
      "content": "console.error('Error triggering system notification:', error);",
      "context": "456: \n457:       if (error) {\n458:         console.error('Error triggering system notification:', error);\n459:       }\n460:     } catch (error) {"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 461,
      "content": "console.error('Error in triggerSystemNotification:', error);",
      "context": "459:       }\n460:     } catch (error) {\n461:       console.error('Error in triggerSystemNotification:', error);\n462:     }\n463:   }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 506,
      "content": "console.error('Error searching messages:', error);",
      "context": "504:       return data || [];\n505:     } catch (error) {\n506:       console.error('Error searching messages:', error);\n507:       return [];\n508:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 530,
      "content": "console.error('Error getting notification settings:', error);",
      "context": "528:       return data;\n529:     } catch (error) {\n530:       console.error('Error getting notification settings:', error);\n531:       return null;\n532:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 552,
      "content": "console.error('Error updating notification settings:', error);",
      "context": "550:       return !error;\n551:     } catch (error) {\n552:       console.error('Error updating notification settings:', error);\n553:       return false;\n554:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 578,
      "content": "console.error('Error creating default notification settings:', error);",
      "context": "576:       return data;\n577:     } catch (error) {\n578:       console.error('Error creating default notification settings:', error);\n579:       return null;\n580:     }"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 607,
      "content": "console.error('Error searching users:', error);",
      "context": "605:       return data || [];\n606:     } catch (error) {\n607:       console.error('Error searching users:', error);\n608:       return [];\n609:     }"
    },
    {
      "file": "src/services/rankApprovalService.ts",
      "line": 138,
      "content": "console.warn(`⚠️ [RankApproval] Failed to update profile: ${updateProfileError.message}`);",
      "context": "136:         \n137:       if (updateProfileError) {\n138:         console.warn(`⚠️ [RankApproval] Failed to update profile: ${updateProfileError.message}`);\n139:         // Don't rollback for profile errors - it's not critical\n140:       }"
    },
    {
      "file": "src/services/rankApprovalService.ts",
      "line": 161,
      "content": "console.warn(`⚠️ [RankApproval] Failed to create notification:`, notificationError);",
      "context": "159:           });\n160:       } catch (notificationError) {\n161:         console.warn(`⚠️ [RankApproval] Failed to create notification:`, notificationError);\n162:         // Don't fail the whole process for notification errors\n163:       }"
    },
    {
      "file": "src/services/rankApprovalService.ts",
      "line": 179,
      "content": "console.warn(`⚠️ [RankApproval] Failed to broadcast update:`, realtimeError);",
      "context": "177:         });\n178:       } catch (realtimeError) {\n179:         console.warn(`⚠️ [RankApproval] Failed to broadcast update:`, realtimeError);\n180:       }\n181:       "
    },
    {
      "file": "src/services/rankApprovalService.ts",
      "line": 198,
      "content": "console.error(`❌ [RankApproval] Failed after ${duration}ms:`, error);",
      "context": "196:     } catch (error) {\n197:       const duration = Date.now() - startTime;\n198:       console.error(`❌ [RankApproval] Failed after ${duration}ms:`, error);\n199:       \n200:       return {"
    },
    {
      "file": "src/services/rankApprovalService.ts",
      "line": 260,
      "content": "console.error('Error fetching rank approval stats:', error);",
      "context": "258:       \n259:     if (error) {\n260:       console.error('Error fetching rank approval stats:', error);\n261:       return null;\n262:     }"
    },
    {
      "file": "src/services/spaService.ts",
      "line": 49,
      "content": "console.error('SPA update error:', error);",
      "context": "47:       \n48:     if (error) {\n49:       console.error('SPA update error:', error);\n50:       return { success: false, balance: current, requiresRanking: false };\n51:     }"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 111,
      "content": "console.error('❌ SABOTournamentEngine error:', error);",
      "context": "109: \n110:     } catch (error) {\n111:       console.error('❌ SABOTournamentEngine error:', error);\n112:       return {\n113:         success: false,"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 209,
      "content": "console.error('❌ Advancement processing error:', error);",
      "context": "207: \n208:     } catch (error) {\n209:       console.error('❌ Advancement processing error:', error);\n210:       return {\n211:         success: false,"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 242,
      "content": "console.error(`❌ ${functionName} error:`, error);",
      "context": "240: \n241:     } catch (error) {\n242:       console.error(`❌ ${functionName} error:`, error);\n243:       throw error;\n244:     }"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 272,
      "content": "console.error('❌ Get bracket error:', error);",
      "context": "270: \n271:     } catch (error) {\n272:       console.error('❌ Get bracket error:', error);\n273:       throw error;\n274:     }"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 305,
      "content": "console.error('❌ Get playable matches error:', error);",
      "context": "303: \n304:     } catch (error) {\n305:       console.error('❌ Get playable matches error:', error);\n306:       return [];\n307:     }"
    },
    {
      "file": "src/services/tournament/TournamentFunctionResolver.ts",
      "line": 164,
      "content": "console.error(`Error calling function ${functionName}:`, callError);",
      "context": "162:     return { data: null, error, usedFunction: functionName };\n163:   } catch (callError) {\n164:     console.error(`Error calling function ${functionName}:`, callError);\n165:     return { data: null, error: callError, usedFunction: functionName };\n166:   }"
    },
    {
      "file": "src/services/tournament/TournamentTransactionService.ts",
      "line": 75,
      "content": "console.error('Failed to acquire database lock:', error);",
      "context": "73:       return false;\n74:     } catch (error) {\n75:       console.error('Failed to acquire database lock:', error);\n76:       return false;\n77:     }"
    },
    {
      "file": "src/services/tournament/TournamentTransactionService.ts",
      "line": 90,
      "content": "console.error('Failed to release database lock:', error);",
      "context": "88:       });\n89:     } catch (error) {\n90:       console.error('Failed to release database lock:', error);\n91:     }\n92:   }"
    },
    {
      "file": "src/services/tournament/TournamentTransactionService.ts",
      "line": 166,
      "content": "console.error(`Transaction attempt ${attempt + 1} failed:`, error);",
      "context": "164:         };\n165:       } catch (error) {\n166:         console.error(`Transaction attempt ${attempt + 1} failed:`, error);\n167: \n168:         // Execute rollback"
    },
    {
      "file": "src/services/tournament/TournamentTransactionService.ts",
      "line": 216,
      "content": "console.error('Rollback operation failed:', rollbackError);",
      "context": "214:         await rollbackFn();\n215:       } catch (rollbackError) {\n216:         console.error('Rollback operation failed:', rollbackError);\n217:         // Continue with other rollbacks even if one fails\n218:       }"
    },
    {
      "file": "src/services/tournament/TournamentValidationEngine.ts",
      "line": 119,
      "content": "console.error('Tournament validation error:', error);",
      "context": "117:       };\n118:     } catch (error) {\n119:       console.error('Tournament validation error:', error);\n120:       return {\n121:         valid: false,"
    },
    {
      "file": "src/services/tournament/TournamentValidationEngine.ts",
      "line": 298,
      "content": "console.error('Participant validation error:', error);",
      "context": "296:       };\n297:     } catch (error) {\n298:       console.error('Participant validation error:', error);\n299:       return {\n300:         valid: false,"
    },
    {
      "file": "src/services/tournament/TournamentValidationEngine.ts",
      "line": 410,
      "content": "console.error('Timing validation error:', error);",
      "context": "408:       };\n409:     } catch (error) {\n410:       console.error('Timing validation error:', error);\n411:       return {\n412:         valid: false,"
    },
    {
      "file": "src/services/tournament/TournamentValidationEngine.ts",
      "line": 501,
      "content": "console.error('Structure validation error:', error);",
      "context": "499:       };\n500:     } catch (error) {\n501:       console.error('Structure validation error:', error);\n502:       return {\n503:         valid: false,"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 36,
      "content": "console.error('❌ Error getting tournament ID:', matchError);",
      "context": "34: \n35:     if (matchError || !matchData?.tournament_id) {\n36:       console.error('❌ Error getting tournament ID:', matchError);\n37:       return {\n38:         success: false,"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 52,
      "content": "console.error('❌ Error in advance_winner_to_next_round:', error);",
      "context": "50: \n51:     if (error) {\n52:       console.error('❌ Error in advance_winner_to_next_round:', error);\n53:       return {\n54:         success: false,"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 62,
      "content": "console.error('❌ Exception in advanceWinnerToNextRound:', error);",
      "context": "60:     return data as unknown as AdvancementResult;\n61:   } catch (error: any) {\n62:     console.error('❌ Exception in advanceWinnerToNextRound:', error);\n63:     return {\n64:       success: false,"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 86,
      "content": "console.error('❌ Error checking tournament readiness:', error);",
      "context": "84: \n85:     if (error) {\n86:       console.error('❌ Error checking tournament readiness:', error);\n87:       return { ready: false, incompleteMatches: 0 };\n88:     }"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 95,
      "content": "console.error('❌ Exception checking tournament readiness:', error);",
      "context": "93:     };\n94:   } catch (error) {\n95:     console.error('❌ Exception checking tournament readiness:', error);\n96:     return { ready: false, incompleteMatches: 0 };\n97:   }"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 120,
      "content": "console.error('❌ Error fetching completed matches:', matchError);",
      "context": "118: \n119:     if (matchError) {\n120:       console.error('❌ Error fetching completed matches:', matchError);\n121:       return { success: false, error: matchError.message };\n122:     }"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 154,
      "content": "console.warn('⚠️ Some advancements failed:', errors);",
      "context": "152: \n153:     if (errors.length > 0) {\n154:       console.warn('⚠️ Some advancements failed:', errors);\n155:     }\n156: "
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 165,
      "content": "console.error('❌ Exception in fixBracketProgression:', error);",
      "context": "163:     };\n164:   } catch (error: any) {\n165:     console.error('❌ Exception in fixBracketProgression:', error);\n166:     return {\n167:       success: false,"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 189,
      "content": "console.error('❌ Auto-advancement failed:', result.error);",
      "context": "187:       console.log('✅ Auto-advancement completed:', result.message);\n188:     } else {\n189:       console.error('❌ Auto-advancement failed:', result.error);\n190:     }\n191:   } catch (error) {"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 192,
      "content": "console.error('❌ Exception in autoAdvanceCompletedMatches:', error);",
      "context": "190:     }\n191:   } catch (error) {\n192:     console.error('❌ Exception in autoAdvanceCompletedMatches:', error);\n193:   }\n194: }"
    },
    {
      "file": "src/services/tournament-management.service.ts",
      "line": 30,
      "content": "console.error('Error fetching tournaments:', error);",
      "context": "28: \n29:     if (error) {\n30:       console.error('Error fetching tournaments:', error);\n31:       throw new Error(`Failed to fetch tournaments: ${error.message}`);\n32:     }"
    },
    {
      "file": "src/services/tournament-management.service.ts",
      "line": 68,
      "content": "console.error('Error fetching filtered tournaments:', error);",
      "context": "66: \n67:     if (error) {\n68:       console.error('Error fetching filtered tournaments:', error);\n69:       throw new Error(`Failed to fetch tournaments: ${error.message}`);\n70:     }"
    },
    {
      "file": "src/services/tournament-management.service.ts",
      "line": 100,
      "content": "console.error('Error fetching tournament participants:', error);",
      "context": "98: \n99:     if (error) {\n100:       console.error('Error fetching tournament participants:', error);\n101:       throw new Error(`Failed to fetch participants: ${error.message}`);\n102:     }"
    },
    {
      "file": "src/services/tournament-management.service.ts",
      "line": 127,
      "content": "console.error('Error fetching available players:', error);",
      "context": "125: \n126:     if (error) {\n127:       console.error('Error fetching available players:', error);\n128:       throw new Error(`Failed to fetch players: ${error.message}`);\n129:     }"
    },
    {
      "file": "src/services/tournament-management.service.ts",
      "line": 267,
      "content": "console.warn('Failed to update tournament status:', updateError);",
      "context": "265: \n266:       if (updateError) {\n267:         console.warn('Failed to update tournament status:', updateError);\n268:       }\n269: "
    },
    {
      "file": "src/services/tournament-management.service.ts",
      "line": 281,
      "content": "console.error('Error saving bracket:', error);",
      "context": "279:       };\n280:     } catch (error) {\n281:       console.error('Error saving bracket:', error);\n282:       return {\n283:         success: false,"
    },
    {
      "file": "src/services/tournament-management.service.ts",
      "line": 326,
      "content": "console.error('Error fetching tournament matches:', error);",
      "context": "324: \n325:     if (error) {\n326:       console.error('Error fetching tournament matches:', error);\n327:       throw new Error(`Failed to fetch matches: ${error.message}`);\n328:     }"
    },
    {
      "file": "src/services/tournament-management.service.ts",
      "line": 379,
      "content": "console.error('Error deleting tournament:', error);",
      "context": "377:       };\n378:     } catch (error) {\n379:       console.error('Error deleting tournament:', error);\n380:       return {\n381:         success: false,"
    },
    {
      "file": "src/services/tournament-management.service.ts",
      "line": 415,
      "content": "console.error('Error updating tournament:', error);",
      "context": "413:       };\n414:     } catch (error) {\n415:       console.error('Error updating tournament:', error);\n416:       return {\n417:         success: false,"
    },
    {
      "file": "src/services/tournament-prizes.service.ts",
      "line": 75,
      "content": "console.error('Error fetching tournament prizes:', error);",
      "context": "73: \n74:     if (error) {\n75:       console.error('Error fetching tournament prizes:', error);\n76:       throw new Error(`Failed to fetch tournament prizes: ${error.message}`);\n77:     }"
    },
    {
      "file": "src/services/tournament-prizes.service.ts",
      "line": 97,
      "content": "console.error('Error fetching tournament prizes with details:', error);",
      "context": "95: \n96:     if (error) {\n97:       console.error('Error fetching tournament prizes with details:', error);\n98:       throw new Error(`Failed to fetch tournament prizes: ${error.message}`);\n99:     }"
    },
    {
      "file": "src/services/tournament-prizes.service.ts",
      "line": 126,
      "content": "console.error('Error creating tournament prize:', error);",
      "context": "124: \n125:     if (error) {\n126:       console.error('Error creating tournament prize:', error);\n127:       throw new Error(`Failed to create tournament prize: ${error.message}`);\n128:     }"
    },
    {
      "file": "src/services/tournament-prizes.service.ts",
      "line": 148,
      "content": "console.error('Error updating tournament prize:', error);",
      "context": "146: \n147:     if (error) {\n148:       console.error('Error updating tournament prize:', error);\n149:       throw new Error(`Failed to update tournament prize: ${error.message}`);\n150:     }"
    },
    {
      "file": "src/services/tournament-prizes.service.ts",
      "line": 165,
      "content": "console.error('Error deleting tournament prize:', error);",
      "context": "163: \n164:     if (error) {\n165:       console.error('Error deleting tournament prize:', error);\n166:       throw new Error(`Failed to delete tournament prize: ${error.message}`);\n167:     }"
    },
    {
      "file": "src/services/tournament-prizes.service.ts",
      "line": 193,
      "content": "console.error('Error creating bulk tournament prizes:', error);",
      "context": "191: \n192:     if (error) {\n193:       console.error('Error creating bulk tournament prizes:', error);\n194:       throw new Error(`Failed to create tournament prizes: ${error.message}`);\n195:     }"
    },
    {
      "file": "src/services/tournament-prizes.service.ts",
      "line": 214,
      "content": "console.error('Error calculating total prizes:', error);",
      "context": "212: \n213:     if (error) {\n214:       console.error('Error calculating total prizes:', error);\n215:       throw new Error(`Failed to calculate total prizes: ${error.message}`);\n216:     }"
    },
    {
      "file": "src/services/tournament-prizes.service.ts",
      "line": 232,
      "content": "console.error('Error fetching tournament prizes (optimized):', error);",
      "context": "230: \n231:     if (error) {\n232:       console.error('Error fetching tournament prizes (optimized):', error);\n233:       throw new Error(`Failed to fetch tournament prizes: ${error.message}`);\n234:     }"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 42,
      "content": "console.error('Error loading translation tasks:', error);",
      "context": "40:         this.tasks = JSON.parse(savedTasks);\n41:       } catch (error) {\n42:         console.error('Error loading translation tasks:', error);\n43:         this.tasks = [];\n44:       }"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 52,
      "content": "console.error('Error saving translation tasks:', error);",
      "context": "50:       localStorage.setItem('translation_tasks', JSON.stringify(this.tasks));\n51:     } catch (error) {\n52:       console.error('Error saving translation tasks:', error);\n53:     }\n54:   }"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 132,
      "content": "console.error('Lỗi khi tạo task dịch thuật:', error);",
      "context": "130:       }, 1000);\n131:     } catch (error) {\n132:       console.error('Lỗi khi tạo task dịch thuật:', error);\n133:     }\n134:   }"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 153,
      "content": "console.error('Lỗi khi xử lý hàng đợi dịch thuật:', error);",
      "context": "151:       }\n152:     } catch (error) {\n153:       console.error('Lỗi khi xử lý hàng đợi dịch thuật:', error);\n154:     }\n155:   }"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 189,
      "content": "console.error(`❌ Lỗi khi dịch ${task.page_path}:`, error);",
      "context": "187:       console.log(`✅ Dịch thành công: ${task.page_path}`);\n188:     } catch (error) {\n189:       console.error(`❌ Lỗi khi dịch ${task.page_path}:`, error);\n190: \n191:       // Update status to failed"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 225,
      "content": "console.warn('Edge function unavailable, using fallback:', error);",
      "context": "223: \n224:       if (error) {\n225:         console.warn('Edge function unavailable, using fallback:', error);\n226:         return this.generateFallbackTranslations(keys, targetLanguage);\n227:       }"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 234,
      "content": "console.error('Lỗi API dịch thuật:', error);",
      "context": "232:       );\n233:     } catch (error) {\n234:       console.error('Lỗi API dịch thuật:', error);\n235:       return this.generateFallbackTranslations(keys, targetLanguage);\n236:     }"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 348,
      "content": "console.error('Lỗi khi lấy thống kê dịch thuật:', error);",
      "context": "346:       return result;\n347:     } catch (error) {\n348:       console.error('Lỗi khi lấy thống kê dịch thuật:', error);\n349:       return {\n350:         totalTasks: 0,"
    },
    {
      "file": "src/tournaments/sabo/SABODoubleEliminationViewer.tsx",
      "line": 190,
      "content": "console.error('❌ Match not found:', matchId);",
      "context": "188:     const matchData = matches?.find(m => m.id === matchId);\n189:     if (!matchData) {\n190:       console.error('❌ Match not found:', matchId);\n191:       throw new Error('Match data not found');\n192:     }"
    },
    {
      "file": "src/tournaments/sabo/components/SABOFinal.tsx",
      "line": 46,
      "content": "console.error('Error completing tournament:', error);",
      "context": "44: \n45:       if (error) {\n46:         console.error('Error completing tournament:', error);\n47:         toast.error('Lỗi khi hoàn thành giải đấu: ' + error.message);\n48:         return;"
    },
    {
      "file": "src/tournaments/sabo/components/SABOFinal.tsx",
      "line": 59,
      "content": "console.error('Error:', err);",
      "context": "57:       }\n58:     } catch (err) {\n59:       console.error('Error:', err);\n60:       toast.error('Lỗi khi gọi API hoàn thành tournament');\n61:     } finally {"
    },
    {
      "file": "src/tournaments/sabo/components/SABOMatchCard.tsx",
      "line": 151,
      "content": "console.error('Failed to submit score:', error);",
      "context": "149: \n150:     } catch (error) {\n151:       console.error('Failed to submit score:', error);\n152:       // Reopen score input if there was an error\n153:       setShowScoreInput(true);"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 54,
      "content": "console.error('❌ Error fetching SABO-32 matches:', error);",
      "context": "52: \n53:       if (error) {\n54:         console.error('❌ Error fetching SABO-32 matches:', error);\n55:         throw error;\n56:       }"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 110,
      "content": "console.error('❌ Match update failed:', updateError);",
      "context": "108: \n109:       if (updateError) {\n110:         console.error('❌ Match update failed:', updateError);\n111:         throw updateError;\n112:       }"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 139,
      "content": "console.error('❌ SABO-32 score submission failed:', error);",
      "context": "137:     },\n138:     onError: (error: any) => {\n139:       console.error('❌ SABO-32 score submission failed:', error);\n140:       toast.error(`❌ ${error?.message || 'Failed to submit score'}`);\n141:     },"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 175,
      "content": "console.error('❌ SABO-32 advancement error (non-critical):', error);",
      "context": "173: \n174:     } catch (error) {\n175:       console.error('❌ SABO-32 advancement error (non-critical):', error);\n176:       // Don't fail the entire operation for advancement issues\n177:     }"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 68,
      "content": "console.error('❌ Match update failed:', updateError);",
      "context": "66: \n67:       if (updateError) {\n68:         console.error('❌ Match update failed:', updateError);\n69:         throw updateError;\n70:       }"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 119,
      "content": "console.error('❌ Winner advancement failed:', winnerError);",
      "context": "117:               \n118:             if (winnerError) {\n119:               console.error('❌ Winner advancement failed:', winnerError);\n120:             } else {\n121:               console.log('✅ Winner advanced successfully');"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 154,
      "content": "console.error('❌ Loser advancement failed:', loserError);",
      "context": "152:                 \n153:               if (loserError) {\n154:                 console.error('❌ Loser advancement failed:', loserError);\n155:               } else {\n156:                 console.log('✅ Loser advanced successfully');"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 163,
      "content": "console.error('❌ Advancement logic error (non-critical):', advancementError);",
      "context": "161:         \n162:       } catch (advancementError) {\n163:         console.error('❌ Advancement logic error (non-critical):', advancementError);\n164:         // Don't fail the entire operation for advancement issues\n165:       }"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 195,
      "content": "console.error('❌ SABO score submission failed:', error);",
      "context": "193:     },\n194:     onError: (error: any) => {\n195:       console.error('❌ SABO score submission failed:', error);\n196:       const errorMessage = error?.message || 'Failed to submit score';\n197:       toast.error(`❌ ${errorMessage}`);"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOSemifinalsFix.ts",
      "line": 23,
      "content": "console.error('❌ Error fixing semifinals:', error);",
      "context": "21: \n22:       if (error) {\n23:         console.error('❌ Error fixing semifinals:', error);\n24:         throw error;\n25:       }"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOSemifinalsFix.ts",
      "line": 52,
      "content": "console.error('❌ Failed to fix semifinals:', error);",
      "context": "50:     },\n51:     onError: (error) => {\n52:       console.error('❌ Failed to fix semifinals:', error);\n53:       toast.error('Lỗi khi sửa bán kết', {\n54:         description: error.message || 'Không thể thực hiện sửa chữa',"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 39,
      "content": "console.error('❌ Service client not available, falling back to regular client');",
      "context": "37:       \n38:       if (!supabaseService) {\n39:         console.error('❌ Service client not available, falling back to regular client');\n40:         throw new Error('Service client not configured');\n41:       }"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 54,
      "content": "console.error('❌ Error fetching SABO matches:', matchesError);",
      "context": "52: \n53:       if (matchesError) {\n54:         console.error('❌ Error fetching SABO matches:', matchesError);\n55:         throw matchesError;\n56:       }"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 161,
      "content": "console.error('❌ Error in loadMatches:', err);",
      "context": "159:       setLastUpdateTime(new Date());\n160:     } catch (err: any) {\n161:       console.error('❌ Error in loadMatches:', err);\n162:       setError(err.message || 'Failed to fetch SABO matches');\n163:     } finally {"
    },
    {
      "file": "src/utils/authHelpers.ts",
      "line": 5,
      "content": "console.error('Auth error:', error);",
      "context": "3: \n4: export const handleAuthError = (error: any) => {\n5:   console.error('Auth error:', error);\n6: \n7:   switch (error?.message) {"
    },
    {
      "file": "src/utils/authHelpers.ts",
      "line": 33,
      "content": "console.error('JWT validation error:', error);",
      "context": "31: \n32:     if (error) {\n33:       console.error('JWT validation error:', error);\n34:       return false;\n35:     }"
    },
    {
      "file": "src/utils/authHelpers.ts",
      "line": 50,
      "content": "console.error('JWT validation failed:', error);",
      "context": "48:     return true;\n49:   } catch (error) {\n50:     console.error('JWT validation failed:', error);\n51:     return false;\n52:   }"
    },
    {
      "file": "src/utils/authHelpers.ts",
      "line": 60,
      "content": "console.error('Session refresh failed:', error);",
      "context": "58: \n59:     if (error) {\n60:       console.error('Session refresh failed:', error);\n61:       return false;\n62:     }"
    },
    {
      "file": "src/utils/authHelpers.ts",
      "line": 66,
      "content": "console.error('Session refresh error:', error);",
      "context": "64:     return !!data.session;\n65:   } catch (error) {\n66:     console.error('Session refresh error:', error);\n67:     return false;\n68:   }"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 38,
      "content": "console.warn('⚠️ Emergency signout failed (continuing anyway):', error);",
      "context": "36:     // Force sign out on Supabase client\n37:     supabase.auth.signOut({ scope: 'global' }).catch(error => {\n38:       console.warn('⚠️ Emergency signout failed (continuing anyway):', error);\n39:     });\n40: "
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 57,
      "content": "console.error('❌ Emergency auth recovery failed:', error);",
      "context": "55:     }\n56:   } catch (error) {\n57:     console.error('❌ Emergency auth recovery failed:', error);\n58:     // ONLY force reload for critical app-breaking errors, not auth issues\n59:     if (error.message && error.message.includes('critical')) {"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 135,
      "content": "const originalError = console.error;",
      "context": "133: \n134:   // Monitor for auth errors in console - BUT AVOID RECOVERY DURING ACTIVE OPERATIONS\n135:   const originalError = console.error;\n136:   console.error = (...args) => {\n137:     const message = args.join(' ').toLowerCase();"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 136,
      "content": "console.error = (...args) => {",
      "context": "134:   // Monitor for auth errors in console - BUT AVOID RECOVERY DURING ACTIVE OPERATIONS\n135:   const originalError = console.error;\n136:   console.error = (...args) => {\n137:     const message = args.join(' ').toLowerCase();\n138: "
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 140,
      "content": "console.log('👁️ Auth monitoring intercepted console.error:', message);",
      "context": "138: \n139:     // TEMPORARY DEBUG: Log what's happening when user switches tabs\n140:     console.log('👁️ Auth monitoring intercepted console.error:', message);\n141:     \n142:     // SKIP ALL AUTH ERROR HANDLING ON TOURNAMENT PAGES"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 149,
      "content": "console.log('🚫 Skipping auth error handling on tournament page');",
      "context": "147: \n148:     if (isTournamentPage) {\n149:       console.log('🚫 Skipping auth error handling on tournament page');\n150:       originalError.apply(console, args);\n151:       return;"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 169,
      "content": "console.log('🔍 Auth error analysis:', {",
      "context": "167:         message.includes('supabase') === false; // Non-Supabase auth errors\n168: \n169:       console.log('🔍 Auth error analysis:', {\n170:         message,\n171:         isActiveOperation,"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 178,
      "content": "console.log('🚨 Critical auth error detected, initiating recovery...');",
      "context": "176: \n177:       if (!isActiveOperation) {\n178:         console.log('🚨 Critical auth error detected, initiating recovery...');\n179:         setTimeout(() => emergencyAuthRecovery(), 1000);\n180:       } else {"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 181,
      "content": "console.log('⏸️ Auth error detected but user is active, skipping recovery');",
      "context": "179:         setTimeout(() => emergencyAuthRecovery(), 1000);\n180:       } else {\n181:         console.log('⏸️ Auth error detected but user is active, skipping recovery');\n182:       }\n183:     }"
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 57,
      "content": "console.warn('⚠️ Sign out error (will continue):', error);",
      "context": "55:     console.log('✅ Global sign out completed');\n56:   } catch (error) {\n57:     console.warn('⚠️ Sign out error (will continue):', error);\n58:   } finally {\n59:     // Thay vì luôn redirect, phát sự kiện để UI quyết định (giữ nguyên context nếu cần)"
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 87,
      "content": "console.warn('⚠️ Pre-signin cleanup error (will continue):', error);",
      "context": "85:       await supabase.auth.signOut({ scope: 'global' });\n86:     } catch (error) {\n87:       console.warn('⚠️ Pre-signin cleanup error (will continue):', error);\n88:     }\n89: "
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 109,
      "content": "console.error('❌ Sign in error:', error);",
      "context": "107:     return result;\n108:   } catch (error) {\n109:     console.error('❌ Sign in error:', error);\n110:     throw error;\n111:   }"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 21,
      "content": "console.error('❌ Error getting tournament ID for match:', matchError);",
      "context": "19: \n20:     if (matchError || !matchData?.tournament_id) {\n21:       console.error('❌ Error getting tournament ID for match:', matchError);\n22:       return {\n23:         success: false,"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 37,
      "content": "console.error('❌ Error advancing winner:', error);",
      "context": "35: \n36:     if (error) {\n37:       console.error('❌ Error advancing winner:', error);\n38:       return {\n39:         success: false,"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 45,
      "content": "console.error('❌ Function returned error:', (data as any).error);",
      "context": "43: \n44:     if (data && typeof data === 'object' && 'error' in data) {\n45:       console.error('❌ Function returned error:', (data as any).error);\n46:       return {\n47:         success: false,"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 58,
      "content": "// console.error('❌ Exception in advanceWinner:', err);",
      "context": "56:     };\n57:   } catch (_err) {\n58:     // console.error('❌ Exception in advanceWinner:', err);\n59:     return {\n60:       success: false,"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 80,
      "content": "console.error('❌ Error fixing tournament progression:', error);",
      "context": "78: \n79:     if (error) {\n80:       console.error('❌ Error fixing tournament progression:', error);\n81:       return {\n82:         success: false,"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 88,
      "content": "console.error('❌ Function returned error:', data.error);",
      "context": "86: \n87:     if (data && typeof data === 'object' && 'error' in data) {\n88:       console.error('❌ Function returned error:', data.error);\n89:       return {\n90:         success: false,"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 101,
      "content": "// console.error('❌ Exception in fixAllTournamentProgression:', err);",
      "context": "99:     };\n100:   } catch (_err) {\n101:     // console.error('❌ Exception in fixAllTournamentProgression:', err);\n102:     return {\n103:       success: false,"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 125,
      "content": "console.error('❌ Error fetching matches for auto-fix:', error);",
      "context": "123: \n124:     if (error || !matches) {\n125:       console.error('❌ Error fetching matches for auto-fix:', error);\n126:       return;\n127:     }"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 167,
      "content": "// console.error('❌ Error in auto-fix tournament progression:', err);",
      "context": "165:     }\n166:   } catch (_err) {\n167:     // console.error('❌ Error in auto-fix tournament progression:', err);\n168:   }\n169: };"
    },
    {
      "file": "src/utils/bracketFallback.ts",
      "line": 35,
      "content": "console.warn('Could not load profiles, using basic seeding:', profileError.message);",
      "context": "33:     \n34:     if (profileError) {\n35:       console.warn('Could not load profiles, using basic seeding:', profileError.message);\n36:     }\n37:     "
    },
    {
      "file": "src/utils/bracketFallback.ts",
      "line": 76,
      "content": "console.warn('Could not clear existing matches:', deleteError.message);",
      "context": "74:     \n75:     if (deleteError) {\n76:       console.warn('Could not clear existing matches:', deleteError.message);\n77:     }\n78:     "
    },
    {
      "file": "src/utils/bracketFallback.ts",
      "line": 124,
      "content": "console.warn('Could not update tournament status:', updateError.message);",
      "context": "122:     \n123:     if (updateError) {\n124:       console.warn('Could not update tournament status:', updateError.message);\n125:     }\n126:     "
    },
    {
      "file": "src/utils/bracketFallback.ts",
      "line": 137,
      "content": "console.error('❌ Fallback bracket generation failed:', error);",
      "context": "135:     \n136:   } catch (error) {\n137:     console.error('❌ Fallback bracket generation failed:', error);\n138:     return {\n139:       success: false,"
    },
    {
      "file": "src/utils/challengeCleanup.ts",
      "line": 26,
      "content": "console.error('❌ Cleanup error:', error);",
      "context": "24:     \n25:     if (error) {\n26:       console.error('❌ Cleanup error:', error);\n27:       return {\n28:         success: false,"
    },
    {
      "file": "src/utils/challengeCleanup.ts",
      "line": 44,
      "content": "console.error('❌ Manual cleanup failed:', error);",
      "context": "42:     \n43:   } catch (error) {\n44:     console.error('❌ Manual cleanup failed:', error);\n45:     return {\n46:       success: false,"
    },
    {
      "file": "src/utils/challengeCleanup.ts",
      "line": 64,
      "content": "console.error('❌ Deep cleanup error:', error);",
      "context": "62:     \n63:     if (error) {\n64:       console.error('❌ Deep cleanup error:', error);\n65:       return {\n66:         success: false,"
    },
    {
      "file": "src/utils/challengeCleanup.ts",
      "line": 83,
      "content": "console.error('❌ Deep cleanup failed:', error);",
      "context": "81:     \n82:   } catch (error) {\n83:     console.error('❌ Deep cleanup failed:', error);\n84:     return {\n85:       success: false,"
    },
    {
      "file": "src/utils/challengeCleanup.ts",
      "line": 105,
      "content": "console.error('Error checking expired challenges:', error);",
      "context": "103:     \n104:     if (error) {\n105:       console.error('Error checking expired challenges:', error);\n106:       return [];\n107:     }"
    },
    {
      "file": "src/utils/challengeCleanup.ts",
      "line": 113,
      "content": "console.error('Error in checkExpiredChallenges:', error);",
      "context": "111:     \n112:   } catch (error) {\n113:     console.error('Error in checkExpiredChallenges:', error);\n114:     return [];\n115:   }"
    },
    {
      "file": "src/utils/challengeCleanup.ts",
      "line": 157,
      "content": "console.error('Error getting cleanup stats:', error);",
      "context": "155:     \n156:   } catch (error) {\n157:     console.error('Error getting cleanup stats:', error);\n158:     return {\n159:       statusCounts: {},"
    },
    {
      "file": "src/utils/challengeValidation.ts",
      "line": 101,
      "content": "console.warn('Error mapping challenge:', error);",
      "context": "99:         return mapper(challenge);\n100:       } catch (error) {\n101:         console.warn('Error mapping challenge:', error);\n102:         return null;\n103:       }"
    },
    {
      "file": "src/utils/clubNotifications.ts",
      "line": 41,
      "content": "console.error('Error notifying club:', error);",
      "context": "39:     return { success: true };\n40:   } catch (error) {\n41:     console.error('Error notifying club:', error);\n42:     return { success: false, error };\n43:   }"
    },
    {
      "file": "src/utils/createSABO32Function.ts",
      "line": 133,
      "content": "console.error('Error creating function:', error);",
      "context": "131:     \n132:     if (error) {\n133:       console.error('Error creating function:', error);\n134:     } else {\n135:       console.log('✅ SABO-32 advancement function created successfully');"
    },
    {
      "file": "src/utils/createSABO32Function.ts",
      "line": 138,
      "content": "console.error('Error:', err);",
      "context": "136:     }\n137:   } catch (err) {\n138:     console.error('Error:', err);\n139:   }\n140: };"
    },
    {
      "file": "src/utils/databaseSchemaValidator.ts",
      "line": 278,
      "content": "console.error(",
      "context": "276:   const exists = tableSchema.columns.includes(column as any);\n277:   if (!exists) {\n278:     console.error(\n279:       `Column '${column}' does not exist in table '${table}'. Available columns:`,\n280:       [...tableSchema.columns]"
    },
    {
      "file": "src/utils/databaseSchemaValidator.ts",
      "line": 305,
      "content": "console.error(",
      "context": "303:   );\n304:   if (missingRequired.length > 0) {\n305:     console.error(\n306:       `Missing required columns for table '${table}':`,\n307:       missingRequired"
    },
    {
      "file": "src/utils/databaseSchemaValidator.ts",
      "line": 342,
      "content": "console.error(",
      "context": "340: ) {\n341:   console.group(`🚨 Schema Mismatch Detected`);\n342:   console.error(\n343:     `Attempted to use column '${attemptedColumn}' on table '${table}'`\n344:   );"
    },
    {
      "file": "src/utils/dateUtils.ts",
      "line": 34,
      "content": "console.error('Error formatting date:', error);",
      "context": "32:     return date.toLocaleDateString('vi-VN', defaultOptions);\n33:   } catch (error) {\n34:     console.error('Error formatting date:', error);\n35:     return 'Chưa xác định';\n36:   }"
    },
    {
      "file": "src/utils/debugTournamentRefresh.ts",
      "line": 38,
      "content": "console.error('❌ Supabase not available');",
      "context": "36: export const logTournamentState = async () => {\n37:   if (!(window as any).supabase) {\n38:     console.error('❌ Supabase not available');\n39:     return;\n40:   }"
    },
    {
      "file": "src/utils/debugTournamentRefresh.ts",
      "line": 82,
      "content": "console.error('❌ Error fetching tournament state:', error);",
      "context": "80:     );\n81:   } catch (error) {\n82:     console.error('❌ Error fetching tournament state:', error);\n83:   }\n84: };"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 24,
      "content": "console.error('❌ Lỗi kết nối:', connectionError);",
      "context": "22:     if (connectionError) {\n23:       results.errors.push(`Lỗi kết nối: ${connectionError.message}`);\n24:       console.error('❌ Lỗi kết nối:', connectionError);\n25:     } else {\n26:       results.connection = true;"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 61,
      "content": "console.error('❌ Lỗi kiểm tra users:', profilesError);",
      "context": "59:     } else {\n60:       results.errors.push(`Lỗi kiểm tra users: ${profilesError?.message}`);\n61:       console.error('❌ Lỗi kiểm tra users:', profilesError);\n62:     }\n63: "
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 83,
      "content": "console.log(`❌ Bảng ${table}: ${error.message}`);",
      "context": "81:         }\n82:       } catch (error: any) {\n83:         console.log(`❌ Bảng ${table}: ${error.message}`);\n84:       }\n85:     }"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 95,
      "content": "console.log('⚠️ Authentication check:', authError.message);",
      "context": "93: \n94:     if (authError) {\n95:       console.log('⚠️ Authentication check:', authError.message);\n96:     } else {\n97:       console.log("
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 114,
      "content": "results.errors.forEach(error => console.log(`  - ${error}`));",
      "context": "112:     if (results.errors.length > 0) {\n113:       console.log('\\n❌ LỖI PHÁT HIỆN:');\n114:       results.errors.forEach(error => console.log(`  - ${error}`));\n115:     }\n116: "
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 134,
      "content": "console.error('💥 Lỗi nghiêm trọng:', error);",
      "context": "132:     return results;\n133:   } catch (error: any) {\n134:     console.error('💥 Lỗi nghiêm trọng:', error);\n135:     results.errors.push(`Lỗi nghiêm trọng: ${error.message}`);\n136:     return results;"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 149,
      "content": "console.error('❌ Lỗi kiểm tra:', error);",
      "context": "147:     })\n148:     .catch(error => {\n149:       console.error('❌ Lỗi kiểm tra:', error);\n150:     });\n151: };"
    },
    {
      "file": "src/utils/supabaseHealth.ts",
      "line": 18,
      "content": "console.error('Supabase connection error:', error);",
      "context": "16: \n17:     if (error) {\n18:       console.error('Supabase connection error:', error);\n19:       return { success: false, error: error.message };\n20:     }"
    },
    {
      "file": "src/utils/supabaseHealth.ts",
      "line": 25,
      "content": "// console.error('Network connectivity error:', error);",
      "context": "23:     return { success: true, data };\n24:   } catch (error: unknown) {\n25:     // console.error('Network connectivity error:', error);\n26:     return { success: false, error: 'Network connectivity failed' };\n27:   }"
    }
  ],
  "userFeedback": [
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 97,
      "content": "console.log('✅ Challenger (winner) SPA updated:', challengerResult);",
      "context": "95:           return false;\n96:         }\n97:         console.log('✅ Challenger (winner) SPA updated:', challengerResult);\n98: \n99:         // Subtract from opponent using correct function"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 110,
      "content": "console.log('✅ Opponent (loser) SPA updated:', opponentResult);",
      "context": "108:           return false;\n109:         }\n110:         console.log('✅ Opponent (loser) SPA updated:', opponentResult);\n111: \n112:       } else {"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 127,
      "content": "console.log('✅ Opponent (winner) SPA updated:', opponentResult);",
      "context": "125:           return false;\n126:         }\n127:         console.log('✅ Opponent (winner) SPA updated:', opponentResult);\n128: \n129:         // Subtract from challenger using correct function"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 140,
      "content": "console.log('✅ Challenger (loser) SPA updated:', challengerResult);",
      "context": "138:           return false;\n139:         }\n140:         console.log('✅ Challenger (loser) SPA updated:', challengerResult);\n141:       }\n142: "
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 143,
      "content": "console.log('✅ SPA transfer completed successfully!');",
      "context": "141:       }\n142: \n143:       console.log('✅ SPA transfer completed successfully!');\n144:       return true;\n145: "
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 237,
      "content": "console.log('✅ Notifications sent to players');",
      "context": "235:             console.warn('Notification error:', notificationError);\n236:           } else {\n237:             console.log('✅ Notifications sent to players');\n238:           }\n239:           "
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 240,
      "content": "console.log('🎉 Challenge processing completed successfully!');",
      "context": "238:           }\n239:           \n240:           console.log('🎉 Challenge processing completed successfully!');\n241:           \n242:         } else {"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 292,
      "content": "// console.log('✅ Fetched challenges:', data?.length || 0);",
      "context": "290:       }\n291: \n292:       // console.log('✅ Fetched challenges:', data?.length || 0);\n293:       // console.log('📋 Challenges data:', data);\n294:       setChallenges(data || []);"
    },
    {
      "file": "src/components/ClubMemberManagement.tsx",
      "line": 106,
      "content": "console.log(`✅ Loaded ${membersWithVerification.length} club members`);",
      "context": "104: \n105:       setMembers(membersWithVerification);\n106:       console.log(`✅ Loaded ${membersWithVerification.length} club members`);\n107:     } catch (err) {\n108:       const errorMessage ="
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 159,
      "content": "console.log('✅ Club ID found:', data?.id);",
      "context": "157:         }\n158: \n159:         console.log('✅ Club ID found:', data?.id);\n160:         return data?.id || null;\n161:       } catch (error) {"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 754,
      "content": "console.log('✅ Loaded registrations:', combinedData);",
      "context": "752:       })) || [];\n753: \n754:       console.log('✅ Loaded registrations:', combinedData);\n755:       setRegistrations(combinedData);\n756:     } catch (error: any) {"
    },
    {
      "file": "src/components/MyChallengesTab.tsx",
      "line": 157,
      "content": "console.log('✅ [MyChallengesTab] Final results:', {",
      "context": "155:       const pastWithProfiles: Match[] = [];\n156: \n157:       console.log('✅ [MyChallengesTab] Final results:', {\n158:         incoming: incomingWithProfiles.length,\n159:         outgoing: outgoingWithProfiles.length"
    },
    {
      "file": "src/components/SocialLoginButtons.tsx",
      "line": 39,
      "content": "// ...removed console.log('Google login initiated successfully')",
      "context": "37:         }\n38:       } else {\n39:         // ...removed console.log('Google login initiated successfully')\n40:       }\n41:     } catch (error) {"
    },
    {
      "file": "src/components/SocialLoginButtons.tsx",
      "line": 83,
      "content": "// ...removed console.log('Facebook login initiated successfully')",
      "context": "81:         }\n82:       } else {\n83:         // ...removed console.log('Facebook login initiated successfully')\n84:       }\n85:     } catch (error) {"
    },
    {
      "file": "src/components/UserProfileHeader.tsx",
      "line": 51,
      "content": "console.log('✅ Profile data loaded:', profileResult.data);",
      "context": "49:       }\n50: \n51:       console.log('✅ Profile data loaded:', profileResult.data);\n52:       console.log('✅ Rankings data loaded:', rankingsResult.data);\n53:       console.log('✅ Wallet data loaded:', walletResult.data);"
    },
    {
      "file": "src/components/UserProfileHeader.tsx",
      "line": 52,
      "content": "console.log('✅ Rankings data loaded:', rankingsResult.data);",
      "context": "50: \n51:       console.log('✅ Profile data loaded:', profileResult.data);\n52:       console.log('✅ Rankings data loaded:', rankingsResult.data);\n53:       console.log('✅ Wallet data loaded:', walletResult.data);\n54: "
    },
    {
      "file": "src/components/UserProfileHeader.tsx",
      "line": 53,
      "content": "console.log('✅ Wallet data loaded:', walletResult.data);",
      "context": "51:       console.log('✅ Profile data loaded:', profileResult.data);\n52:       console.log('✅ Rankings data loaded:', rankingsResult.data);\n53:       console.log('✅ Wallet data loaded:', walletResult.data);\n54: \n55:       setProfile(profileResult.data);"
    },
    {
      "file": "src/components/auth/FacebookLoginButton.tsx",
      "line": 39,
      "content": "console.log('Facebook login initiated successfully');",
      "context": "37:         }\n38:       } else {\n39:         console.log('Facebook login initiated successfully');\n40:       }\n41:     } catch (error) {"
    },
    {
      "file": "src/components/auth/GoogleLoginButton.tsx",
      "line": 39,
      "content": "console.log('Google login initiated successfully');",
      "context": "37:         }\n38:       } else {\n39:         console.log('Google login initiated successfully');\n40:       }\n41:     } catch (error) {"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 77,
      "content": "console.log('🎯 [DEBUG] acceptChallenge successful!');",
      "context": "75:       console.log('🎯 [DEBUG] Calling acceptChallenge...');\n76:       await acceptChallenge(challenge.id);\n77:       console.log('🎯 [DEBUG] acceptChallenge successful!');\n78:       toast.success('🎯 Tham gia thách đấu thành công!');\n79:     } catch (error) {"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 869,
      "content": "// console.log('Club approval completed for challenge:', challenge.id);",
      "context": "867:             isClubAdmin={isClubAdmin}\n868:             onApprovalComplete={() => {\n869:               // console.log('Club approval completed for challenge:', challenge.id);\n870:               // Refresh challenge data if needed\n871:             }}"
    },
    {
      "file": "src/components/challenges/IntegratedScoreManager.tsx",
      "line": 141,
      "content": "console.log('📋 Challenge completed and marked for club confirmation');",
      "context": "139:       toast.success(`Trận đấu hoàn tất! Người thắng: ${winnerName}. Đang chờ CLB xác nhận kết quả.`);\n140:       \n141:       console.log('📋 Challenge completed and marked for club confirmation');\n142:       \n143:       setTimeout(() => window.location.reload(), 1500);"
    },
    {
      "file": "src/components/club/ClubTournamentManagement.tsx",
      "line": 56,
      "content": "console.log('✅ Tournament created successfully:', tournament);",
      "context": "54: \n55:   const handleTournamentSuccess = (tournament: any) => {\n56:     console.log('✅ Tournament created successfully:', tournament);\n57:     toast.success('Giải đấu đã được tạo thành công!');\n58: "
    },
    {
      "file": "src/components/club/optimized/ClubMembersOptimized.tsx",
      "line": 347,
      "content": "console.log('✅ Approval function completed:', approvalResult);",
      "context": "345:       }\n346: \n347:       console.log('✅ Approval function completed:', approvalResult);\n348: \n349:       // Show success message"
    },
    {
      "file": "src/components/legacy/CombinedSPALeaderboard.tsx",
      "line": 178,
      "content": "console.log('✅ Can claim legacy entry:', entry.nick_name);",
      "context": "176:     // For legacy entries, always show claim button if user is logged in\n177:     if (entry.user_type === 'legacy') {\n178:       console.log('✅ Can claim legacy entry:', entry.nick_name);\n179:       return true;\n180:     }"
    },
    {
      "file": "src/components/legacy/CombinedSPALeaderboard.tsx",
      "line": 193,
      "content": "console.log('🎉 Legacy code claim successful, refreshing leaderboard...');",
      "context": "191: \n192:   const handleLegacyCodeClaimSuccess = () => {\n193:     console.log('🎉 Legacy code claim successful, refreshing leaderboard...');\n194:     loadData(); // Refresh leaderboard data\n195:   };"
    },
    {
      "file": "src/components/legacy/LegacyClaimForm.tsx",
      "line": 60,
      "content": "console.log('✅ Submit success:', data);",
      "context": "58:         alert(`Lỗi: ${error.message}`);\n59:       } else {\n60:         console.log('✅ Submit success:', data);\n61:         setSubmitted(true);\n62:         setFormData({"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 229,
      "content": "console.log(`✅ Marked notification ${notificationId.slice(0,8)}... as read`);",
      "context": "227:       }\n228: \n229:       console.log(`✅ Marked notification ${notificationId.slice(0,8)}... as read`);\n230:     } catch (error) {\n231:       console.error('Error marking notification as read:', error);"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 259,
      "content": "console.log(`✅ Marked ${unreadNotifications.length} notifications as read`);",
      "context": "257:       }\n258: \n259:       console.log(`✅ Marked ${unreadNotifications.length} notifications as read`);\n260:       toast.success('Đã đánh dấu tất cả thông báo là đã đọc');\n261:     } catch (error) {"
    },
    {
      "file": "src/components/profile/EditableProfileForm.tsx",
      "line": 178,
      "content": "console.log('✅ Profile updated successfully');",
      "context": "176:       }\n177: \n178:       console.log('✅ Profile updated successfully');\n179:       toast.success('Cập nhật thông tin thành công');\n180:       onProfileUpdate?.();"
    },
    {
      "file": "src/components/pwa/PWAFeatures.tsx",
      "line": 52,
      "content": "console.log('🎉 PWA: App installed successfully!');",
      "context": "50:       setShowPrompt(false);\n51:       setDeferredPrompt(null);\n52:       console.log('🎉 PWA: App installed successfully!');\n53:     };\n54: "
    },
    {
      "file": "src/components/pwa/PWAFeatures.tsx",
      "line": 72,
      "content": "console.log('✅ PWA: User accepted the install prompt');",
      "context": "70:       \n71:       if (outcome === 'accepted') {\n72:         console.log('✅ PWA: User accepted the install prompt');\n73:         onInstall?.();\n74:       } else {"
    },
    {
      "file": "src/components/pwa/PWAFeatures.tsx",
      "line": 176,
      "content": "console.log('🔧 PWA: Service Worker registered successfully');",
      "context": "174:       navigator.serviceWorker.register('/sw.js')\n175:         .then((registration) => {\n176:           console.log('🔧 PWA: Service Worker registered successfully');\n177:           \n178:           // Check for updates"
    },
    {
      "file": "src/components/test/TestCopyTemplate.tsx",
      "line": 180,
      "content": "console.log('Copy template to test1 tournament successful');",
      "context": "178:       if (success) {\n179:         toast.success('✅ Đã copy template vào giải test1 thành công!');\n180:         console.log('Copy template to test1 tournament successful');\n181:       } else {\n182:         toast.error('❌ Lỗi khi copy template');"
    },
    {
      "file": "src/components/testing/ProductionDeploymentDashboard.tsx",
      "line": 165,
      "content": "console.log('✅ Responsive system v2 rollout completed');",
      "context": "163:   const completeRollout = () => {\n164:     setDeploymentStatus('complete');\n165:     console.log('✅ Responsive system v2 rollout completed');\n166:   };\n167: "
    },
    {
      "file": "src/components/tournament/BracketVisualization.tsx",
      "line": 235,
      "content": "console.log('✅ Bracket data loaded:', bracketInfo);",
      "context": "233: \n234:       setBracketData(bracketInfo);\n235:       console.log('✅ Bracket data loaded:', bracketInfo);\n236:       console.log('✅ Matches loaded:', enhancedMatches.length);\n237:     } catch (error) {"
    },
    {
      "file": "src/components/tournament/BracketVisualization.tsx",
      "line": 236,
      "content": "console.log('✅ Matches loaded:', enhancedMatches.length);",
      "context": "234:       setBracketData(bracketInfo);\n235:       console.log('✅ Bracket data loaded:', bracketInfo);\n236:       console.log('✅ Matches loaded:', enhancedMatches.length);\n237:     } catch (error) {\n238:       console.error('Error fetching bracket data:', error);"
    },
    {
      "file": "src/components/tournament/EnhancedMatchCard.tsx",
      "line": 453,
      "content": "console.log('✅ [EnhancedMatchCard] RPC response:', data);",
      "context": "451:                   }\n452: \n453:                   console.log('✅ [EnhancedMatchCard] RPC response:', data);\n454: \n455:                   if ("
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 390,
      "content": "console.log('✅ Enhanced matches with players:', enhancedMatches);",
      "context": "388:       );\n389: \n390:       console.log('✅ Enhanced matches with players:', enhancedMatches);\n391:       setPendingMatches(enhancedMatches);\n392:     } catch (error) {"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 477,
      "content": "console.log('✅ Assignment results:', {",
      "context": "475:           data;\n476: \n477:         console.log('✅ Assignment results:', {\n478:           assignments_made,\n479:           total_matches,"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 277,
      "content": "console.log('✅ Tournament created with full prize distribution:', {",
      "context": "275:         // 🎉 Tournament đã được tạo với ĐẦY ĐỦ 16 vị trí giải thưởng trong bảng tournaments!\n276:         if (result) {\n277:           console.log('✅ Tournament created with full prize distribution:', {\n278:             id: result.id,\n279:             name: result.name,"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 290,
      "content": "console.log('✅ Tournament created with embedded prize data!');",
      "context": "288:           toast.success(`🏆 Giải đấu \"${result.name}\" đã được tạo thành công với đầy đủ 16 vị trí giải thưởng!`);\n289:         }\n290:         console.log('✅ Tournament created with embedded prize data!');\n291: \n292:         // 🎯 Create tournament results template after successful creation"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 326,
      "content": "console.log('✅ Tournament created successfully:', result);",
      "context": "324:       }\n325: \n326:       console.log('✅ Tournament created successfully:', result);\n327: \n328:       if (result) {"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 329,
      "content": "console.log('✅ Tournament created:', result);",
      "context": "327: \n328:       if (result) {\n329:         console.log('✅ Tournament created:', result);\n330: \n331:         // Clear draft from localStorage on successful creation"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 357,
      "content": "console.log('🔚 Form submission completed');",
      "context": "355:     } finally {\n356:       setIsSubmitting(false);\n357:       console.log('🔚 Form submission completed');\n358:     }\n359:   };"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1101,
      "content": "console.log('✅ Tournament created:', createdTournament.id);",
      "context": "1099: \n1100:                   const createdTournament = data[0];\n1101:                   console.log('✅ Tournament created:', createdTournament.id);\n1102: \n1103:                   // 2. TẠO TOURNAMENT PRIZES từ state hoặc fallback"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1110,
      "content": "console.log('✅ Using data from UnifiedPrizesManager:', tournamentPrizes.length, 'prizes');",
      "context": "1108:                   // PRIORITY 1: Sử dụng data từ UnifiedPrizesManager nếu có\n1109:                   if (tournamentPrizes && tournamentPrizes.length > 0) {\n1110:                     console.log('✅ Using data from UnifiedPrizesManager:', tournamentPrizes.length, 'prizes');\n1111:                     defaultPrizes = tournamentPrizes.map(prize => ({\n1112:                       tournament_id: createdTournament.id,"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1191,
      "content": "console.log('✅ Tournament prizes created successfully:', resultData.length, 'records');",
      "context": "1189:                   } else {\n1190:                     const resultData = await response.json();\n1191:                     console.log('✅ Tournament prizes created successfully:', resultData.length, 'records');\n1192:                     toast.success('✨ Đã tạo đầy đủ phần thưởng cho 16 vị trí!');\n1193:                   }"
    },
    {
      "file": "src/components/tournament/ForceCompleteTournamentButton.tsx",
      "line": 61,
      "content": "console.log('✅ Tournament results calculated:', data);",
      "context": "59:       }\n60: \n61:       console.log('✅ Tournament results calculated:', data);\n62: \n63:       // Type cast the response data"
    },
    {
      "file": "src/components/tournament/RewardsEditModal.tsx",
      "line": 236,
      "content": "console.log('🔍 RewardsEditModal - Save successful');",
      "context": "234:       setLocalRewards(formData);\n235: \n236:       console.log('🔍 RewardsEditModal - Save successful');\n237:     } catch (error) {\n238:       console.error('Failed to save rewards:', error);"
    },
    {
      "file": "src/components/tournament/SimpleRegistrationModal.tsx",
      "line": 100,
      "content": "console.log('✅ Registration created:', data);",
      "context": "98:       }\n99: \n100:       console.log('✅ Registration created:', data);\n101: \n102:       toast.success("
    },
    {
      "file": "src/components/tournament/SingleEliminationMatchCard.tsx",
      "line": 363,
      "content": "console.log('✅ Score updated successfully:', data);",
      "context": "361:                   }\n362: \n363:                   console.log('✅ Score updated successfully:', data);\n364:                   toast.success('🎯 Đã cập nhật tỷ số thành công!');\n365: "
    },
    {
      "file": "src/components/tournament/TournamentCompletionButton.tsx",
      "line": 57,
      "content": "console.log('✅ Tournament completion response:', data);",
      "context": "55:       }\n56: \n57:       console.log('✅ Tournament completion response:', data);\n58: \n59:       if (data?.success) {"
    },
    {
      "file": "src/components/tournament/TournamentDataSyncButton.tsx",
      "line": 51,
      "content": "console.log('✅ Tournament sync response:', data);",
      "context": "49:       }\n50: \n51:       console.log('✅ Tournament sync response:', data);\n52: \n53:       setSyncResult(data);"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 576,
      "content": "console.log('✅ SABO Tournament Engine advanced successfully:', result);",
      "context": "574:             const result = await SABOTournamentEngine.processAutomaticAdvancement(selectedTournament.id, matchData);\n575:             if (result.success) {\n576:               console.log('✅ SABO Tournament Engine advanced successfully:', result);\n577:             } else {\n578:               console.log('⚠️ SABO Tournament Engine advancement issues:', result.message);"
    },
    {
      "file": "src/components/tournament/TournamentPlayerAvatar.tsx",
      "line": 79,
      "content": "console.log('✅ Final player data:', result);",
      "context": "77:       };\n78: \n79:       console.log('✅ Final player data:', result);\n80:       return result;\n81:     },"
    },
    {
      "file": "src/components/tournament/TournamentRealTimeSync.tsx",
      "line": 163,
      "content": "console.log('✅ Real-time sync connected successfully');",
      "context": "161: \n162:         if (status === 'SUBSCRIBED') {\n163:           console.log('✅ Real-time sync connected successfully');\n164:         } else if (status === 'CHANNEL_ERROR') {\n165:           console.error('❌ Real-time sync connection error');"
    },
    {
      "file": "src/components/tournament/templates/SingleEliminationTemplate.tsx",
      "line": 389,
      "content": "console.log('✅ Match completed successfully:', result);",
      "context": "387: \n388:       if (result?.success) {\n389:         console.log('✅ Match completed successfully:', result);\n390:         toast.success(result.message || 'Cập nhật tỷ số thành công!');\n391: "
    },
    {
      "file": "src/components/tournaments/MatchScoreInput.tsx",
      "line": 84,
      "content": "console.log('✅ Score updated successfully:', data);",
      "context": "82:       }\n83: \n84:       console.log('✅ Score updated successfully:', data);\n85:       const winner = player1Score > player2Score ? player1Name : player2Name;\n86:       toast({"
    },
    {
      "file": "src/components/tournaments/SABO32AdvancementFixer.tsx",
      "line": 45,
      "content": "console.log('✅ Fix advancement result:', data);",
      "context": "43:       }\n44: \n45:       console.log('✅ Fix advancement result:', data);\n46:       \n47:       toast.success('Đã fix advancement thành công!', {"
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 89,
      "content": "console.log('✅ Score submitted successfully:', scoreResult);",
      "context": "87:       }\n88: \n89:       console.log('✅ Score submitted successfully:', scoreResult);\n90: \n91:       // Check server response for final match status and tournament completion"
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 94,
      "content": "console.log('🏆 Final match completed!');",
      "context": "92:       const result = scoreResult as any;\n93:       if (result?.tournament_completed && result?.is_final_match) {\n94:         console.log('🏆 Final match completed!');\n95:         toast.success(\n96:           '🏆 Trận chung kết đã hoàn thành! Chúc mừng nhà vô địch!'"
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 120,
      "content": "console.log('✅ Winner advanced successfully:', advanceResult);",
      "context": "118:           );\n119:         } else {\n120:           console.log('✅ Winner advanced successfully:', advanceResult);\n121:           toast.success(\n122:             '✅ Đã cập nhật tỷ số và chuyển người thắng lên vòng tiếp theo!'"
    },
    {
      "file": "src/components/ui/card-avatar.tsx",
      "line": 120,
      "content": "console.log('✅ Avatar loaded successfully:', currentAvatar);",
      "context": "118:                 }}\n119:                 onLoad={() => {\n120:                   console.log('✅ Avatar loaded successfully:', currentAvatar);\n121:                 }}\n122:                 style={{ "
    },
    {
      "file": "src/config/emailConfig.ts",
      "line": 66,
      "content": "console.log('✅ Email system configuration loaded');",
      "context": "64: };\n65: \n66: console.log('✅ Email system configuration loaded');\n67: console.log('📧 Auto-email triggers:', Object.keys(AUTO_EMAIL_CONFIG));\n68: console.log('🎯 System ready for Vietnamese Billiards Platform');"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 69,
      "content": "console.log('[SimpleProfileContext] Profile fetched successfully:', {",
      "context": "67:       }\n68: \n69:       console.log('[SimpleProfileContext] Profile fetched successfully:', {\n70:         id: data?.id,\n71:         verified_rank: data?.verified_rank,"
    },
    {
      "file": "src/contexts/SimpleTournamentContext.tsx",
      "line": 205,
      "content": "console.log('✅ Rewards validation passed, updating database...');",
      "context": "203:         }\n204: \n205:         console.log('✅ Rewards validation passed, updating database...');\n206: \n207:         const { error } = await supabase"
    },
    {
      "file": "src/contexts/SimpleTournamentContext.tsx",
      "line": 221,
      "content": "console.log('✅ Database updated successfully');",
      "context": "219:         }\n220: \n221:         console.log('✅ Database updated successfully');\n222: \n223:         // Update local state"
    },
    {
      "file": "src/contexts/SimpleTournamentContext.tsx",
      "line": 237,
      "content": "console.log('✅ Local state updated');",
      "context": "235:         );\n236: \n237:         console.log('✅ Local state updated');\n238:         toast.success('Đã lưu phần thưởng giải đấu');\n239:         return true;"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 213,
      "content": "console.log('✅ Tournament loaded:', data);",
      "context": "211:         }\n212: \n213:         console.log('✅ Tournament loaded:', data);\n214:         setTournament(data);\n215: "
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 356,
      "content": "console.log('✅ Latest tournament loaded:', data);",
      "context": "354:       }\n355: \n356:       console.log('✅ Latest tournament loaded:', data);\n357: \n358:       // Create template data with updated dates"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 521,
      "content": "console.log('✅ Tournament prizes saved successfully:', prizes.length, 'entries');",
      "context": "519:       }\n520: \n521:       console.log('✅ Tournament prizes saved successfully:', prizes.length, 'entries');\n522:     } catch (error) {\n523:       console.error('❌ Error in saveTournamentPrizes:', error);"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 771,
      "content": "console.log('✅ [DEBUG] Tournament created successfully:', newTournament);",
      "context": "769:       }\n770: \n771:       console.log('✅ [DEBUG] Tournament created successfully:', newTournament);\n772: \n773:       // Apply reward template if available"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 782,
      "content": "console.log('✅ Reward template applied successfully');",
      "context": "780: \n781:         if (success) {\n782:           console.log('✅ Reward template applied successfully');\n783:         } else {\n784:           console.warn("
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 797,
      "content": "console.log('✅ Tournament prizes saved successfully');",
      "context": "795:       try {\n796:         await saveTournamentPrizes(newTournament.id, prizeTemplate);\n797:         console.log('✅ Tournament prizes saved successfully');\n798:       } catch (prizeError) {\n799:         console.error('⚠️ Failed to save tournament prizes:', prizeError);"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 193,
      "content": "console.log('✅ Tournament created successfully:', result);",
      "context": "191:         }\n192: \n193:         console.log('✅ Tournament created successfully:', result);\n194: \n195:         // Send notification to club members"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 216,
      "content": "console.log('📢 Club members notified successfully');",
      "context": "214:             // Don't throw - tournament was created successfully\n215:           } else {\n216:             console.log('📢 Club members notified successfully');\n217:           }\n218:         } catch (notificationError) {"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 278,
      "content": "console.log('✅ Admin role granted in profiles table');",
      "context": "276:                 console.error('❌ Failed to grant admin role in profiles:', error);\n277:               } else if (!error) {\n278:                 console.log('✅ Admin role granted in profiles table');\n279:               } else {\n280:                 console.log('⚠️ Profile admin role blocked by constraint, using user_roles instead');"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 296,
      "content": "console.log('✅ Admin role added to user_roles table');",
      "context": "294:                 console.error('❌ Failed to add admin role to user_roles:', error);\n295:               } else if (!error) {\n296:                 console.log('✅ Admin role added to user_roles table');\n297:               }\n298:             });"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 424,
      "content": "console.log('🔧 Auth: Sign out completed successfully');",
      "context": "422:       await supabase.auth.signOut({ scope: 'global' });\n423: \n424:       console.log('🔧 Auth: Sign out completed successfully');\n425: \n426:       // Redirect to public landing page"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 565,
      "content": "console.log('✅ Phone password login successful');",
      "context": "563:       }\n564:       \n565:       console.log('✅ Phone password login successful');\n566:       return { data, error };\n567:     } catch (error) {"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 626,
      "content": "console.log('🔧 Auth: Session refreshed successfully');",
      "context": "624:         throw error;\n625:       }\n626:       console.log('🔧 Auth: Session refreshed successfully');\n627:     } catch (error) {\n628:       console.error('🔧 Auth: Session refresh failed:', error);"
    },
    {
      "file": "src/hooks/useAutoAdvancement.ts",
      "line": 40,
      "content": "console.log('✅ Semifinal auto advancement successful:', result);",
      "context": "38: \n39:         if (result.success) {\n40:           console.log('✅ Semifinal auto advancement successful:', result);\n41:           toast.success(\n42:             `Đã thiết lập ${result.matches_processed || 2} trận bán kết!`"
    },
    {
      "file": "src/hooks/useAutoAdvancement.ts",
      "line": 81,
      "content": "console.log('✅ Final auto advancement successful:', finalResult);",
      "context": "79: \n80:         if (finalResult.success) {\n81:           console.log('✅ Final auto advancement successful:', finalResult);\n82:           toast.success('Đã hoàn thiện trận chung kết!');\n83:           return {"
    },
    {
      "file": "src/hooks/useAutoMatchNotifications.tsx",
      "line": 108,
      "content": "console.log('✅ Auto match notification created:', notification);",
      "context": "106:         });\n107: \n108:         console.log('✅ Auto match notification created:', notification);\n109:       } catch (error) {\n110:         console.error('Error in createMatchNotification:', error);"
    },
    {
      "file": "src/hooks/useAutoTransitionChallenges.ts",
      "line": 47,
      "content": "console.log(`✅ Successfully transitioned ${challengeIds.length} challenges to ongoing:`, challengeIds);",
      "context": "45:         }\n46: \n47:         console.log(`✅ Successfully transitioned ${challengeIds.length} challenges to ongoing:`, challengeIds);\n48: \n49:       } catch (error) {"
    },
    {
      "file": "src/hooks/useAutoUpdateChallengeStatus.ts",
      "line": 40,
      "content": "console.log(`✅ Updated ${challenges.length} challenges to ongoing status:`, challengeIds);",
      "context": "38:             console.error('Error updating challenge status:', updateError);\n39:           } else {\n40:             console.log(`✅ Updated ${challenges.length} challenges to ongoing status:`, challengeIds);\n41:           }\n42:         }"
    },
    {
      "file": "src/hooks/useAutoUpdateChallengeStatus.ts",
      "line": 75,
      "content": "console.log(`✅ Updated challenge ${challengeId} to ongoing status`);",
      "context": "73:     }\n74: \n75:     console.log(`✅ Updated challenge ${challengeId} to ongoing status`);\n76:     return { success: true, data };\n77:   } catch (error) {"
    },
    {
      "file": "src/hooks/useBracketRepair.ts",
      "line": 41,
      "content": "console.log('✅ Bracket repair completed:', data);",
      "context": "39:     },\n40:     onSuccess: data => {\n41:       console.log('✅ Bracket repair completed:', data);\n42: \n43:       if (data?.error) {"
    },
    {
      "file": "src/hooks/useChallengeWorkflow.tsx",
      "line": 114,
      "content": "console.log('Score submitted successfully:', result);",
      "context": "112:     },\n113:     onSuccess: result => {\n114:       console.log('Score submitted successfully:', result);\n115: \n116:       // Use refetchQueries instead of invalidateQueries to avoid full page reload"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 33,
      "content": "console.log('✅ [useChallenges] Fetching challenges for user:', user.id);",
      "context": "31:       setError(null);\n32: \n33:       console.log('✅ [useChallenges] Fetching challenges for user:', user.id);\n34: \n35:       // ✅ CRITICAL FIX: Fetch ALL challenges including open ones from other users"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 282,
      "content": "console.log('✅ [useChallenges] Challenge inserted successfully:', {",
      "context": "280:       }\n281: \n282:       console.log('✅ [useChallenges] Challenge inserted successfully:', {\n283:         id: data.id,\n284:         location: (data as any).location,"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 341,
      "content": "console.log('✅ Challenge notification created successfully');",
      "context": "339:           } : undefined\n340:         });\n341:         console.log('✅ Challenge notification created successfully');\n342:       } catch (notificationError) {\n343:         console.warn('Failed to create challenge notification:', notificationError);"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 400,
      "content": "console.log('✅ Challenge accepted successfully:', result);",
      "context": "398:       }\n399: \n400:       console.log('✅ Challenge accepted successfully:', result);\n401:       toast.success(\n402:         'Tham gia thách đấu thành công! Trận đấu đã được lên lịch.'"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 432,
      "content": "console.log('✅ Challenge accepted notification created successfully');",
      "context": "430:             }\n431:           });\n432:           console.log('✅ Challenge accepted notification created successfully');\n433:         }\n434:       } catch (notificationError) {"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 549,
      "content": "console.log('✅ Challenge accepted successfully:', data);",
      "context": "547:       }\n548: \n549:       console.log('✅ Challenge accepted successfully:', data);\n550: \n551:       // ✅ NEW: Create match record automatically when challenge is accepted"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 594,
      "content": "console.log('✅ Match record created successfully:', matchRecord);",
      "context": "592:         );\n593:       } else {\n594:         console.log('✅ Match record created successfully:', matchRecord);\n595:         toast.success(\n596:           'Tham gia thách đấu thành công! Trận đấu đã được lên lịch.'"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 672,
      "content": "console.log('✅ Challenge declined notification created successfully');",
      "context": "670:             }\n671:           });\n672:           console.log('✅ Challenge declined notification created successfully');\n673:         }\n674:       } catch (notificationError) {"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 801,
      "content": "console.log('✅ Profile affects current challenges, refreshing...');",
      "context": "799: \n800:           if (hasRelevantChallenge) {\n801:             console.log('✅ Profile affects current challenges, refreshing...');\n802:             setTimeout(() => fetchChallenges(), 100);\n803:           }"
    },
    {
      "file": "src/hooks/useCompletedChallenges.ts",
      "line": 13,
      "content": "console.log('🔍 Fetching completed challenges for user:', user.id);",
      "context": "11:       if (!user?.id) return [];\n12: \n13:       console.log('🔍 Fetching completed challenges for user:', user.id);\n14: \n15:       const { data, error } = await supabase"
    },
    {
      "file": "src/hooks/useCompletedChallenges.ts",
      "line": 52,
      "content": "console.log('✅ Completed challenges fetched:', data?.length || 0);",
      "context": "50:       }\n51: \n52:       console.log('✅ Completed challenges fetched:', data?.length || 0);\n53:       return data || [];\n54:     },"
    },
    {
      "file": "src/hooks/useCompletedTournamentTemplates.tsx",
      "line": 190,
      "content": "console.log('✅ Real-time sync connected for completed tournaments');",
      "context": "188:         setIsConnected(status === 'SUBSCRIBED');\n189:         if (status === 'SUBSCRIBED') {\n190:           console.log('✅ Real-time sync connected for completed tournaments');\n191:         }\n192:       });"
    },
    {
      "file": "src/hooks/useEmailNotifications.tsx",
      "line": 18,
      "content": "console.log('Welcome email sent successfully');",
      "context": "16:             profile.full_name || 'Bạn'\n17:           );\n18:           console.log('Welcome email sent successfully');\n19:         } catch (error) {\n20:           console.error('Failed to send welcome email:', error);"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 99,
      "content": "console.log('✅ Auto-expired challenges updated in database');",
      "context": "97:           console.error('❌ Error auto-expiring challenges:', error);\n98:         } else {\n99:           console.log('✅ Auto-expired challenges updated in database');\n100:           \n101:           // Update local state to remove expired challenges from UI"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 205,
      "content": "console.log('✅ Found current user profile:', {",
      "context": "203:         // Save current user profile\n204:         if (profile.user_id === user?.id) {\n205:           console.log('✅ Found current user profile:', {\n206:             user_id: profile.user_id,\n207:             display_name: profile.display_name"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 222,
      "content": "console.log('✅ Updated current user with SPA:', {",
      "context": "220:             spa_points: ranking.spa_points || 0\n221:           };\n222:           console.log('✅ Updated current user with SPA:', {\n223:             user_id: ranking.user_id,\n224:             spa_points: ranking.spa_points"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 255,
      "content": "console.log('✅ Loaded current user profile via fallback:', {",
      "context": "253:           };\n254:           setCurrentUserProfile(fallbackProfile);\n255:           console.log('✅ Loaded current user profile via fallback:', {\n256:             display_name: fallbackProfile.display_name,\n257:             spa_points: fallbackProfile.spa_points"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 286,
      "content": "console.log('✅ [useEnhancedChallengesV3] Loaded challenges:', {",
      "context": "284:       setChallenges(enrichedChallenges as any[]);\n285:       \n286:       console.log('✅ [useEnhancedChallengesV3] Loaded challenges:', {\n287:         total: enrichedChallenges.length,\n288:         byStatus: {"
    },
    {
      "file": "src/hooks/useEnhancedTournamentMatches.ts",
      "line": 83,
      "content": "console.log('✅ Enhanced matches loaded:', matchesWithProfiles.length);",
      "context": "81:         setMatches(matchesWithProfiles);\n82:         setLastUpdateTime(new Date());\n83:         console.log('✅ Enhanced matches loaded:', matchesWithProfiles.length);\n84:       } catch (err: any) {\n85:         console.error('❌ Error in enhanced fetchMatches:', err);"
    },
    {
      "file": "src/hooks/useEnhancedTournamentMatches.ts",
      "line": 183,
      "content": "console.log('✅ Enhanced real-time connected');",
      "context": "181:         console.log(`🔗 Enhanced subscription status: ${status}`);\n182:         if (status === 'SUBSCRIBED') {\n183:           console.log('✅ Enhanced real-time connected');\n184:         }\n185:       });"
    },
    {
      "file": "src/hooks/useFileUpload.tsx",
      "line": 96,
      "content": "console.log('Upload successful:', data);",
      "context": "94:       }\n95: \n96:       console.log('Upload successful:', data);\n97: \n98:       // Get public URL"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 151,
      "content": "console.log('Score updated successfully');",
      "context": "149:       }\n150: \n151:       console.log('Score updated successfully');\n152:       return match;\n153:     },"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 155,
      "content": "console.log('Score update success:', data);",
      "context": "153:     },\n154:     onSuccess: data => {\n155:       console.log('Score update success:', data);\n156:       queryClient.invalidateQueries({\n157:         queryKey: ['tournament-matches', tournamentId],"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 294,
      "content": "console.log('Score edit successful:', data);",
      "context": "292:       }\n293: \n294:       console.log('Score edit successful:', data);\n295:       return data;\n296:     },"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 298,
      "content": "console.log('Score edit success:', data);",
      "context": "296:     },\n297:     onSuccess: (data: any) => {\n298:       console.log('Score edit success:', data);\n299:       queryClient.invalidateQueries({\n300:         queryKey: ['tournament-matches', tournamentId],"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 606,
      "content": "console.log('✅ Match record created successfully:', matchRecord);",
      "context": "604:           );\n605:         } else {\n606:           console.log('✅ Match record created successfully:', matchRecord);\n607:         }\n608: "
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 656,
      "content": "console.log('✅ Notification sent successfully to challenger');",
      "context": "654:               );\n655:             } else {\n656:               console.log('✅ Notification sent successfully to challenger');\n657:             }\n658:           } catch (notificationErr) {"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 221,
      "content": "console.log('✅ [SUCCESS] Minimal profile created successfully:', newProfile);",
      "context": "219:           }\n220:         } else {\n221:           console.log('✅ [SUCCESS] Minimal profile created successfully:', newProfile);\n222:         }\n223:       } else if (profileCheckError) {"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 227,
      "content": "console.log('✅ [SUCCESS] Profile exists:', existingProfile);",
      "context": "225:         throw new Error('Profile check failed: ' + profileCheckError.message);\n226:       } else {\n227:         console.log('✅ [SUCCESS] Profile exists:', existingProfile);\n228:       }\n229: "
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 269,
      "content": "console.log('✅ [SUCCESS] inserted with evidence_files:', newRequest);",
      "context": "267:         } else {\n268:           newRequest = insData;\n269:           console.log('✅ [SUCCESS] inserted with evidence_files:', newRequest);\n270:         }\n271:       }"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 287,
      "content": "console.log('✅ [SUCCESS] retry insert succeeded:', newRequest);",
      "context": "285:           }\n286:           newRequest = insData2;\n287:           console.log('✅ [SUCCESS] retry insert succeeded:', newRequest);\n288:         } else if (!data.evidence_files?.length) {\n289:           // No evidence provided originally; perform single insert"
    },
    {
      "file": "src/hooks/useRealtimeTournamentData.ts",
      "line": 44,
      "content": "console.log('✅ Match score/status updated, triggering refresh');",
      "context": "42:           // Force immediate refresh for match updates\n43:           if (payload.eventType === 'UPDATE') {\n44:             console.log('✅ Match score/status updated, triggering refresh');\n45: \n46:             // Special handling for semifinals completion"
    },
    {
      "file": "src/hooks/useRecentTournaments.ts",
      "line": 82,
      "content": "console.log(`✅ Loaded ${tournamentsList.length} recent tournaments`);",
      "context": "80:       setTournaments(tournamentsList);\n81:       \n82:       console.log(`✅ Loaded ${tournamentsList.length} recent tournaments`);\n83:       return tournamentsList;\n84: "
    },
    {
      "file": "src/hooks/useRecentTournaments.ts",
      "line": 139,
      "content": "console.log('✅ Tournament template loaded:', data);",
      "context": "137:       }\n138: \n139:       console.log('✅ Tournament template loaded:', data);\n140: \n141:       // Create template data with updated dates"
    },
    {
      "file": "src/hooks/useSABO32ScoreSubmission.ts",
      "line": 213,
      "content": "console.log(`✅ Advancement completed: ${updates.length} matches updated`);",
      "context": "211:     }\n212: \n213:     console.log(`✅ Advancement completed: ${updates.length} matches updated`);\n214:   };\n215: "
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 41,
      "content": "console.log('✅ Losers R101 completion successful:', result);",
      "context": "39:         const result = data as any;\n40:         if (result?.success) {\n41:           console.log('✅ Losers R101 completion successful:', result);\n42:           toast.success('Đã xử lý xong vòng Losers R101!');\n43:           return result as SABOAdvancementResult;"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 84,
      "content": "console.log('✅ Losers R102 completion successful:', result);",
      "context": "82:         const result = data as any;\n83:         if (result?.success) {\n84:           console.log('✅ Losers R102 completion successful:', result);\n85:           toast.success('Đã xử lý xong vòng Losers R102!');\n86:           return result as SABOAdvancementResult;"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 127,
      "content": "console.log('✅ Losers R103 completion successful:', result);",
      "context": "125:         const result = data as any;\n126:         if (result?.success) {\n127:           console.log('✅ Losers R103 completion successful:', result);\n128:           toast.success('Đã xử lý xong vòng Losers R103!');\n129:           return result as SABOAdvancementResult;"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 170,
      "content": "console.log('✅ Losers R201 completion successful:', result);",
      "context": "168:         const result = data as any;\n169:         if (result?.success) {\n170:           console.log('✅ Losers R201 completion successful:', result);\n171:           toast.success('Đã xử lý xong vòng Losers R201!');\n172:           return result as SABOAdvancementResult;"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 213,
      "content": "console.log('✅ Losers R202 completion successful:', result);",
      "context": "211:         const result = data as any;\n212:         if (result?.success) {\n213:           console.log('✅ Losers R202 completion successful:', result);\n214:           toast.success('Đã xử lý xong vòng Losers R202!');\n215:           return result as SABOAdvancementResult;"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 256,
      "content": "console.log('✅ Semifinals setup successful:', result);",
      "context": "254:         const result = data as any;\n255:         if (result?.success) {\n256:           console.log('✅ Semifinals setup successful:', result);\n257:           toast.success('Đã thiết lập trận bán kết!');\n258:           return result as SABOAdvancementResult;"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 299,
      "content": "console.log('✅ Semifinals completion successful:', result);",
      "context": "297:         const result = data as any;\n298:         if (result?.success) {\n299:           console.log('✅ Semifinals completion successful:', result);\n300:           toast.success('Đã xử lý xong kết quả bán kết!');\n301:           return result as SABOAdvancementResult;"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 339,
      "content": "console.log('✅ Tournament finalization successful:', result);",
      "context": "337:         const result = data as any;\n338:         if (result?.success) {\n339:           console.log('✅ Tournament finalization successful:', result);\n340:           toast.success('Đã hoàn thiện giải đấu!');\n341:           return result as SABOAdvancementResult;"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 382,
      "content": "console.log('✅ Tournament status update successful:', result);",
      "context": "380:         const result = data as any;\n381:         if (result?.success) {\n382:           console.log('✅ Tournament status update successful:', result);\n383:           return result as SABOAdvancementResult;\n384:         } else {"
    },
    {
      "file": "src/hooks/useSABOBracket.ts",
      "line": 45,
      "content": "console.log('✅ Bracket created successfully:', data);",
      "context": "43:     },\n44:     onSuccess: (data, variables) => {\n45:       console.log('✅ Bracket created successfully:', data);\n46: \n47:       // Invalidate tournament queries to refresh bracket"
    },
    {
      "file": "src/hooks/useSABOBracket.ts",
      "line": 135,
      "content": "console.log('✅ SABO Tournament Engine score submission successful:', data);",
      "context": "133:     },\n134:     onSuccess: (data, variables) => {\n135:       console.log('✅ SABO Tournament Engine score submission successful:', data);\n136: \n137:       // Invalidate queries to refresh bracket"
    },
    {
      "file": "src/hooks/useSABOBracket.ts",
      "line": 179,
      "content": "console.log('✅ Manual advancement successful:', data);",
      "context": "177:     },\n178:     onSuccess: data => {\n179:       console.log('✅ Manual advancement successful:', data);\n180: \n181:       // Invalidate queries to refresh bracket"
    },
    {
      "file": "src/hooks/useSaboHandicap.ts",
      "line": 19,
      "content": "success: (msg: string) => console.log('Toast Success:', msg)",
      "context": "17: const toast = {\n18:   error: (msg: string) => console.warn('Toast Error:', msg),\n19:   success: (msg: string) => console.log('Toast Success:', msg)\n20: };\n21: "
    },
    {
      "file": "src/hooks/useSystemHealthCheck.tsx",
      "line": 150,
      "content": "console.log('[HealthCheck] Health check completed:', results);",
      "context": "148:     }\n149: \n150:     console.log('[HealthCheck] Health check completed:', results);\n151:   };\n152: "
    },
    {
      "file": "src/hooks/useTournamentManagement.ts",
      "line": 163,
      "content": "console.log('Tournament status updated successfully');",
      "context": "161:       }\n162: \n163:       console.log('Tournament status updated successfully');\n164:       await fetchTournament();\n165: "
    },
    {
      "file": "src/hooks/useTournamentMatches.ts",
      "line": 76,
      "content": "console.log('✅ Fetched matches:', matchesData?.length || 0);",
      "context": "74:       }\n75: \n76:       console.log('✅ Fetched matches:', matchesData?.length || 0);\n77: \n78:       // Collect all unique user IDs"
    },
    {
      "file": "src/hooks/useTournamentRegistrations.ts",
      "line": 62,
      "content": "console.log('✅ Fetched registrations:', registrations?.length || 0);",
      "context": "60:       }\n61: \n62:       console.log('✅ Fetched registrations:', registrations?.length || 0);\n63: \n64:       // If no registrations, return empty array"
    },
    {
      "file": "src/hooks/useTournamentResults.ts",
      "line": 79,
      "content": "console.log('✅ Tournament results fetched:', resultsData.length);",
      "context": "77:       });\n78: \n79:       console.log('✅ Tournament results fetched:', resultsData.length);\n80: \n81:       // Transform data to match TournamentResultWithPlayer interface"
    },
    {
      "file": "src/hooks/useTournamentRewardSync.ts",
      "line": 33,
      "content": "console.log('✅ Sync completed:', data);",
      "context": "31:       }\n32: \n33:       console.log('✅ Sync completed:', data);\n34:       return data;\n35:     } catch (err: any) {"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 37,
      "content": "console.log('✅ Post-bracket save workflow completed successfully');",
      "context": "35:     await updateTournamentAnalytics(tournamentId);\n36: \n37:     console.log('✅ Post-bracket save workflow completed successfully');\n38:   } catch (error) {\n39:     console.error('💥 Post-bracket save workflow failed:', error);"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 68,
      "content": "console.log('✅ Tournament status updated to ongoing');",
      "context": "66:     throw new Error(`Failed to update tournament status: ${error.message}`);\n67: \n68:   console.log('✅ Tournament status updated to ongoing');\n69: };\n70: "
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 105,
      "content": "console.log(`✅ Processed seeding for ${participants.length} participants`);",
      "context": "103:   }\n104: \n105:   console.log(`✅ Processed seeding for ${participants.length} participants`);\n106: };\n107: "
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 130,
      "content": "console.log('✅ Tournament workflow steps initialized');",
      "context": "128:   });\n129: \n130:   console.log('✅ Tournament workflow steps initialized');\n131: };\n132: "
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 167,
      "content": "console.log(`✅ Created schedule for ${matches.length} matches`);",
      "context": "165:     throw new Error(`Failed to create match schedule: ${error.message}`);\n166: \n167:   console.log(`✅ Created schedule for ${matches.length} matches`);\n168: };\n169: "
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 190,
      "content": "console.log('✅ Tournament monitoring setup completed');",
      "context": "188:     console.warn('⚠️ Failed to log monitoring setup:', logError.message);\n189: \n190:   console.log('✅ Tournament monitoring setup completed');\n191: };\n192: "
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 235,
      "content": "console.log(`✅ Sent notifications to ${participants.length} participants`);",
      "context": "233:     if (error) throw error;\n234: \n235:     console.log(`✅ Sent notifications to ${participants.length} participants`);\n236:   } catch (error) {\n237:     console.error('❌ Failed to send notifications:', error);"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 278,
      "content": "console.log('✅ Tournament analytics updated');",
      "context": "276:     if (error) throw error;\n277: \n278:     console.log('✅ Tournament analytics updated');\n279:   } catch (error) {\n280:     console.error('❌ Failed to update analytics:', error);"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 324,
      "content": "console.log('✅ Tournament rollback completed');",
      "context": "322:     });\n323: \n324:     console.log('✅ Tournament rollback completed');\n325:   } catch (rollbackError) {\n326:     console.error('💥 Rollback failed:', rollbackError);"
    },
    {
      "file": "src/pages/ClubApprovalDemo.tsx",
      "line": 129,
      "content": "console.log('Club approval completed in demo!');",
      "context": "127:           isClubAdmin={true}\n128:           onApprovalComplete={() => {\n129:             console.log('Club approval completed in demo!');\n130:             setDemoState('completed');\n131:           }}"
    },
    {
      "file": "src/pages/ClubApprovalManagement.tsx",
      "line": 89,
      "content": "console.log('Approval completed for challenge:', challengeId);",
      "context": "87: \n88:   const handleApprovalComplete = (challengeId: string) => {\n89:     console.log('Approval completed for challenge:', challengeId);\n90:     // In real implementation, this would refetch data\n91:   };"
    },
    {
      "file": "src/pages/EnhancedRegisterPage.tsx",
      "line": 141,
      "content": "console.log('✅ Password set successfully for phone user');",
      "context": "139:             toast.error('Đăng ký thành công nhưng có lỗi khi thiết lập mật khẩu. Vui lòng sử dụng OTP để đăng nhập.');\n140:           } else {\n141:             console.log('✅ Password set successfully for phone user');\n142:           }\n143:         }"
    },
    {
      "file": "src/pages/Index.tsx",
      "line": 27,
      "content": "console.log('[Index] ✅ Index page mounted successfully');",
      "context": "25: \n26:   React.useEffect(() => {\n27:     console.log('[Index] ✅ Index page mounted successfully');\n28: \n29:     return () => {"
    },
    {
      "file": "src/pages/NotificationsFullPage.tsx",
      "line": 89,
      "content": "console.log('✅ Fetched notifications:', data?.length || 0);",
      "context": "87:       }\n88: \n89:       console.log('✅ Fetched notifications:', data?.length || 0);\n90:       setNotifications((data as unknown as Notification[]) || []);\n91:     } catch (error) {"
    },
    {
      "file": "src/pages/SABO32DemoPage.tsx",
      "line": 74,
      "content": "console.log('✅ Tournament created successfully:', data);",
      "context": "72:       }\n73: \n74:       console.log('✅ Tournament created successfully:', data);\n75:       toast.success('🎯 SABO-32 Tournament created with 32 players!');\n76:       "
    },
    {
      "file": "src/pages/SABO32DemoPageNew.tsx",
      "line": 74,
      "content": "console.log('✅ Tournament created successfully:', data);",
      "context": "72:       }\n73: \n74:       console.log('✅ Tournament created successfully:', data);\n75:       toast.success('🎯 SABO-32 Tournament created with 32 players!');\n76:       "
    },
    {
      "file": "src/pages/WalletPage.tsx",
      "line": 96,
      "content": "// ...removed console.log('Payment successful:', transactionId)",
      "context": "94: \n95:   const handlePaymentSuccess = (transactionId: string) => {\n96:     // ...removed console.log('Payment successful:', transactionId)\n97:     // Refresh wallet data\n98:     setShowPaymentModal(false);"
    },
    {
      "file": "src/pages/WalletPage.tsx",
      "line": 111,
      "content": "// ...removed console.log('Transfer successful:', { recipientId, amount, message })",
      "context": "109:     message: string\n110:   ) => {\n111:     // ...removed console.log('Transfer successful:', { recipientId, amount, message })\n112:     // Refresh wallet data\n113:     setShowTransferModal(false);"
    },
    {
      "file": "src/pages/challenges/EnhancedChallengesPageV3.tsx",
      "line": 157,
      "content": "console.log('Challenge cancelled successfully:', data);",
      "context": "155:       }\n156: \n157:       console.log('Challenge cancelled successfully:', data);\n158: \n159:       // Refresh challenges to update UI"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 237,
      "content": "console.log('✅ Score submitted successfully. Triggering UI refresh...');",
      "context": "235:       }\n236: \n237:       console.log('✅ Score submitted successfully. Triggering UI refresh...');\n238:       toast.success('Đã nhập tỷ số thành công! Đang chờ đối thủ xác nhận.');\n239:       setIsOpen(false);"
    },
    {
      "file": "src/pages/challenges/components/sections/ActiveChallengesSection.tsx",
      "line": 55,
      "content": "console.log('✅ Queries invalidated at:', Date.now());",
      "context": "53:     ]);\n54: \n55:     console.log('✅ Queries invalidated at:', Date.now());\n56: \n57:     // Also call the original callback"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 58,
      "content": "console.log('✅ Server-side generation success:', rpcData);",
      "context": "56:           .rpc('generate_tournament_matches' as any, { p_tournament_id: this.tournamentId });\n57:         if (!rpcError && rpcData && (rpcData as any).success) {\n58:           console.log('✅ Server-side generation success:', rpcData);\n59:           // Load matches vừa tạo\n60:           const { data: createdMatches } = await supabase"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 75,
      "content": "console.warn('⚠️ RPC did not return success flag, fallback to client generator');",
      "context": "73:           console.warn('⚠️ RPC generate_tournament_matches failed, fallback to client generator:', rpcError.message);\n74:         } else {\n75:           console.warn('⚠️ RPC did not return success flag, fallback to client generator');\n76:         }\n77:       } catch (e) {"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 98,
      "content": "console.log(`✅ Generated ${this.matches.length} matches for ${this.players.length} players`);",
      "context": "96:       this.generateSABOFinals();           // 3 matches\n97: \n98:       console.log(`✅ Generated ${this.matches.length} matches for ${this.players.length} players`);\n99: \n100:       // Step 4: Save to SABO matches table"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 107,
      "content": "console.log('🎉 All matches saved successfully!');",
      "context": "105: \n106:       if (savedCount === this.matches.length) {\n107:         console.log('🎉 All matches saved successfully!');\n108:         return {\n109:           success: true,"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 156,
      "content": "console.log('✅ Standard query success:', registrations.length);",
      "context": "154:         } else {\n155:           registrations = result.data || [];\n156:           console.log('✅ Standard query success:', registrations.length);\n157:         }\n158:       } catch (error) {"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 177,
      "content": "console.log('✅ Simplified query success:', registrations.length);",
      "context": "175:           } else {\n176:             registrations = result.data || [];\n177:             console.log('✅ Simplified query success:', registrations.length);\n178:             regError = null; // Clear the error since we got results\n179:           }"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 203,
      "content": "console.log('✅ Explicit query success, filtered to:', registrations.length);",
      "context": "201:               .filter(r => r.registration_status === 'confirmed')\n202:               .slice(0, 16);\n203:             console.log('✅ Explicit query success, filtered to:', registrations.length);\n204:             regError = null;\n205:           }"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 336,
      "content": "console.log('✅ Winner bracket: 14 matches (8+4+2, stops at 2 finalists)');",
      "context": "334:     }\n335: \n336:     console.log('✅ Winner bracket: 14 matches (8+4+2, stops at 2 finalists)');\n337:   }\n338: "
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 415,
      "content": "console.log('✅ Loser brackets: 10 matches (Branch A: 7, Branch B: 3)');",
      "context": "413:     });\n414: \n415:     console.log('✅ Loser brackets: 10 matches (Branch A: 7, Branch B: 3)');\n416:   }\n417: "
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 450,
      "content": "console.log('✅ Finals: 3 matches (2 semifinals + 1 final)');",
      "context": "448:     });\n449: \n450:     console.log('✅ Finals: 3 matches (2 semifinals + 1 final)');\n451:   }\n452: }"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 66,
      "content": "console.log('✅ SABO matches table accessible');",
      "context": "64:       }\n65: \n66:       console.log('✅ SABO matches table accessible');\n67:       return true;\n68:     } catch (error) {"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 173,
      "content": "console.log('✅ SABO matches cleared');",
      "context": "171:       }\n172: \n173:       console.log('✅ SABO matches cleared');\n174:       return true;\n175:     } catch (error) {"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 269,
      "content": "console.log(`✅ Individual SABO save: round ${match.round_number} match ${match.match_number}`);",
      "context": "267:               } else {\n268:                 savedCount++;\n269:                 console.log(`✅ Individual SABO save: round ${match.round_number} match ${match.match_number}`);\n270:               }\n271:             } catch (individualException) {"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 277,
      "content": "console.log(`✅ SABO Batch saved: ${data.length} matches`);",
      "context": "275:         } else {\n276:           savedCount += data.length;\n277:           console.log(`✅ SABO Batch saved: ${data.length} matches`);\n278:         }\n279:       } catch (batchError) {"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 284,
      "content": "console.log(`✅ SABO Total saved: ${savedCount}/${matches.length} matches`);",
      "context": "282:     }\n283: \n284:     console.log(`✅ SABO Total saved: ${savedCount}/${matches.length} matches`);\n285:     if (savedCount !== matches.length) {\n286:       console.warn('⚠️ Some matches failed to save. Verify table schema or RLS policies.');"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 25,
      "content": "console.log(`✅ Table ${tableName} accessible`);",
      "context": "23:       }\n24: \n25:       console.log(`✅ Table ${tableName} accessible`);\n26:       return { exists: true, data };\n27:     } catch (error) {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 46,
      "content": "console.log(`✅ Found matches table: ${tableName}`);",
      "context": "44:       const { exists } = await this.checkTableStructure(tableName);\n45:       if (exists) {\n46:         console.log(`✅ Found matches table: ${tableName}`);\n47:         return tableName;\n48:       }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 78,
      "content": "console.log(`✅ Test insert successful`);",
      "context": "76:       }\n77: \n78:       console.log(`✅ Test insert successful`);\n79:       \n80:       // Clean up test data"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 126,
      "content": "console.log('✅ Existing matches cleared');",
      "context": "124:       }\n125: \n126:       console.log('✅ Existing matches cleared');\n127:       return true;\n128:     } catch (error) {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 193,
      "content": "console.log(`✅ Individual save successful`);",
      "context": "191:               await supabaseService.from(finalTableName).insert([match]);\n192:               savedCount++;\n193:               console.log(`✅ Individual save successful`);\n194:             } catch (individualError) {\n195:               console.error(`❌ Individual save failed:`, individualError);"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 200,
      "content": "console.log(`✅ Batch saved: ${data.length} matches`);",
      "context": "198:         } else {\n199:           savedCount += data.length;\n200:           console.log(`✅ Batch saved: ${data.length} matches`);\n201:         }\n202:       } catch (batchError) {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 207,
      "content": "console.log(`✅ Total saved: ${savedCount}/${matches.length} matches`);",
      "context": "205:     }\n206: \n207:     console.log(`✅ Total saved: ${savedCount}/${matches.length} matches`);\n208:     return savedCount;\n209:   }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 25,
      "content": "console.log(`✅ Table ${tableName} accessible`);",
      "context": "23:       }\n24: \n25:       console.log(`✅ Table ${tableName} accessible`);\n26:       return { exists: true, data };\n27:     } catch (error) {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 46,
      "content": "console.log(`✅ Found matches table: ${tableName}`);",
      "context": "44:       const { exists } = await this.checkTableStructure(tableName);\n45:       if (exists) {\n46:         console.log(`✅ Found matches table: ${tableName}`);\n47:         return tableName;\n48:       }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 78,
      "content": "console.log(`✅ Test insert successful`);",
      "context": "76:       }\n77: \n78:       console.log(`✅ Test insert successful`);\n79:       \n80:       // Clean up test data"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 127,
      "content": "console.log('✅ Existing matches cleared');",
      "context": "125:       }\n126: \n127:       console.log('✅ Existing matches cleared');\n128:       return true;\n129:     } catch (error) {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 194,
      "content": "console.log(`✅ Individual save successful`);",
      "context": "192:               await supabaseService.from(finalTableName).insert([match]);\n193:               savedCount++;\n194:               console.log(`✅ Individual save successful`);\n195:             } catch (individualError) {\n196:               console.error(`❌ Individual save failed:`, individualError);"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 201,
      "content": "console.log(`✅ Batch saved: ${data.length} matches`);",
      "context": "199:         } else {\n200:           savedCount += data.length;\n201:           console.log(`✅ Batch saved: ${data.length} matches`);\n202:         }\n203:       } catch (batchError) {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 208,
      "content": "console.log(`✅ Total saved: ${savedCount}/${matches.length} matches`);",
      "context": "206:     }\n207: \n208:     console.log(`✅ Total saved: ${savedCount}/${matches.length} matches`);\n209:     return savedCount;\n210:   }"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 117,
      "content": "console.log('✅ Join query worked:', joinData.length, 'players');",
      "context": "115: \n116:       if (!joinError && joinData?.length) {\n117:         console.log('✅ Join query worked:', joinData.length, 'players');\n118:         return joinData.map((reg, index) => ({\n119:           user_id: reg.user_id,"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 160,
      "content": "console.log('✅ Separate queries worked:', players.length, 'players');",
      "context": "158:       });\n159: \n160:       console.log('✅ Separate queries worked:', players.length, 'players');\n161:       return players;\n162: "
    },
    {
      "file": "src/services/challengeNotificationEventHandler.ts",
      "line": 494,
      "content": "console.log('Match completed, waiting for result submission');",
      "context": "492:   private async handleMatchCompleted(payload: ChallengeStatusChangedPayload): Promise<void> {\n493:     // This will be handled by handleMatchResult when results are submitted\n494:     console.log('Match completed, waiting for result submission');\n495:   }\n496: "
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 65,
      "content": "console.log('✅ Notification created successfully:', notification.id);",
      "context": "63:       }\n64: \n65:       console.log('✅ Notification created successfully:', notification.id);\n66:       return this.transformDatabaseNotification(notification);\n67:     } catch (error) {"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 149,
      "content": "console.log('✅ Batch notifications sent successfully');",
      "context": "147:       }\n148: \n149:       console.log('✅ Batch notifications sent successfully');\n150: \n151:       // Send real-time notifications"
    },
    {
      "file": "src/services/rankApprovalService.ts",
      "line": 183,
      "content": "console.log(`✅ [RankApproval] Completed in ${duration}ms`);",
      "context": "181:       \n182:       const duration = Date.now() - startTime;\n183:       console.log(`✅ [RankApproval] Completed in ${duration}ms`);\n184:       \n185:       return {"
    },
    {
      "file": "src/services/rankApprovalService.ts",
      "line": 232,
      "content": "console.log(`📊 [RankApproval] Batch complete: ${successCount}/${requestIds.length} successful`);",
      "context": "230:     \n231:     const successCount = results.filter(r => r.success).length;\n232:     console.log(`📊 [RankApproval] Batch complete: ${successCount}/${requestIds.length} successful`);\n233:     \n234:     return results;"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 95,
      "content": "console.log('✅ Score submitted successfully:', data);",
      "context": "93:       }\n94: \n95:       console.log('✅ Score submitted successfully:', data);\n96: \n97:       // Xử lý advancement tự động"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 238,
      "content": "console.log(`✅ ${functionName} completed:`, data);",
      "context": "236:       }\n237: \n238:       console.log(`✅ ${functionName} completed:`, data);\n239:       return data;\n240: "
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 59,
      "content": "console.log('✅ Advancement result:', data);",
      "context": "57:     }\n58: \n59:     console.log('✅ Advancement result:', data);\n60:     return data as unknown as AdvancementResult;\n61:   } catch (error: any) {"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 187,
      "content": "console.log('✅ Auto-advancement completed:', result.message);",
      "context": "185:     const result = await fixBracketProgression(tournamentId);\n186:     if (result.success) {\n187:       console.log('✅ Auto-advancement completed:', result.message);\n188:     } else {\n189:       console.error('❌ Auto-advancement failed:', result.error);"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 125,
      "content": "console.log('✅ Đã thêm task dịch thuật:', newTask);",
      "context": "123:       this.saveTasks();\n124: \n125:       console.log('✅ Đã thêm task dịch thuật:', newTask);\n126: \n127:       // Auto-process with a small delay"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 187,
      "content": "console.log(`✅ Dịch thành công: ${task.page_path}`);",
      "context": "185:       }\n186: \n187:       console.log(`✅ Dịch thành công: ${task.page_path}`);\n188:     } catch (error) {\n189:       console.error(`❌ Lỗi khi dịch ${task.page_path}:`, error);"
    },
    {
      "file": "src/tournaments/sabo/SABO32TournamentEngine.ts",
      "line": 46,
      "content": "console.log('✅ SABO-32 tournament created:', {",
      "context": "44:     ];\n45:     \n46:     console.log('✅ SABO-32 tournament created:', {\n47:       totalMatches: allMatches.length,\n48:       groupA: groupAMatches.length,"
    },
    {
      "file": "src/tournaments/sabo/SABO32TournamentEngine.ts",
      "line": 322,
      "content": "console.log(`🏆 Group ${groupId} completed:`, {",
      "context": "320:     tournamentId: string\n321:   ): void {\n322:     console.log(`🏆 Group ${groupId} completed:`, {\n323:       winner1: groupWinners.winner1,\n324:       winner2: groupWinners.winner2"
    },
    {
      "file": "src/tournaments/sabo/components/SABOMatchCard.tsx",
      "line": 57,
      "content": "console.log('🎯 [SABOMatchCard] Match completed data:', {",
      "context": "55:   React.useEffect(() => {\n56:     if (isCompleted) {\n57:       console.log('🎯 [SABOMatchCard] Match completed data:', {\n58:         id: match.id,\n59:         score_player1: match.score_player1,"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 58,
      "content": "console.log('✅ SABO-32 matches fetched:', data?.length || 0);",
      "context": "56:       }\n57: \n58:       console.log('✅ SABO-32 matches fetched:', data?.length || 0);\n59:       \n60:       // Transform to SABO32Match format"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 114,
      "content": "console.log('✅ SABO-32 match result updated successfully');",
      "context": "112:       }\n113: \n114:       console.log('✅ SABO-32 match result updated successfully');\n115: \n116:       // Handle advancement logic for SABO-32"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 219,
      "content": "console.log('✅ Winner advanced to cross-bracket final');",
      "context": "217:         .eq('id', finalMatch.id);\n218:       \n219:       console.log('✅ Winner advanced to cross-bracket final');\n220:     }\n221:   };"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 240,
      "content": "console.log('🎉 Both groups completed! Populating cross-bracket...');",
      "context": "238:       \n239:       if (groupAFinal && groupBFinal) {\n240:         console.log('🎉 Both groups completed! Populating cross-bracket...');\n241:         \n242:         // Determine qualifiers from each group"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 271,
      "content": "console.log('✅ Cross-bracket semifinals populated successfully');",
      "context": "269:           .eq('match_number', 2);\n270:           \n271:         console.log('✅ Cross-bracket semifinals populated successfully');\n272:         toast.success('🎯 Cross-bracket finals are now ready!');\n273:       }"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 72,
      "content": "console.log('✅ Match result updated successfully');",
      "context": "70:       }\n71: \n72:       console.log('✅ Match result updated successfully');\n73: \n74:       // ✅ STEP 2: Handle advancement logic safely"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 121,
      "content": "console.log('✅ Winner advanced successfully');",
      "context": "119:               console.error('❌ Winner advancement failed:', winnerError);\n120:             } else {\n121:               console.log('✅ Winner advanced successfully');\n122:             }\n123:           }"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 156,
      "content": "console.log('✅ Loser advanced successfully');",
      "context": "154:                 console.error('❌ Loser advancement failed:', loserError);\n155:               } else {\n156:                 console.log('✅ Loser advanced successfully');\n157:               }\n158:             }"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 175,
      "content": "console.log('✅ SABO score submission successful:', data);",
      "context": "173:     },\n174:     onSuccess: (data, variables) => {\n175:       console.log('✅ SABO score submission successful:', data);\n176: \n177:       queryClient.invalidateQueries({ queryKey: ['tournament-matches'] });"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOSemifinalsFix.ts",
      "line": 27,
      "content": "console.log('✅ Semifinals fix result:', data);",
      "context": "25:       }\n26: \n27:       console.log('✅ Semifinals fix result:', data);\n28:       return data as unknown as FixResult;\n29:     },"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 58,
      "content": "console.log('✅ Fetched SABO matches:', matchesData?.length || 0);",
      "context": "56:       }\n57: \n58:       console.log('✅ Fetched SABO matches:', matchesData?.length || 0);\n59:       \n60:       // Debug: Check first match structure"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 41,
      "content": "console.log('✅ Emergency auth recovery completed');",
      "context": "39:     });\n40: \n41:     console.log('✅ Emergency auth recovery completed');\n42: \n43:     // Previously forced redirect to /auth?recovery=true (gây khó chịu người dùng)"
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 40,
      "content": "console.log('✅ Auth state cleanup completed');",
      "context": "38:   });\n39: \n40:   console.log('✅ Auth state cleanup completed');\n41: };\n42: "
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 55,
      "content": "console.log('✅ Global sign out completed');",
      "context": "53:     // Attempt global sign out\n54:     await supabase.auth.signOut({ scope: 'global' });\n55:     console.log('✅ Global sign out completed');\n56:   } catch (error) {\n57:     console.warn('⚠️ Sign out error (will continue):', error);"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 52,
      "content": "// console.log('✅ Successfully advanced winner:', data);",
      "context": "50:     }\n51: \n52:     // console.log('✅ Successfully advanced winner:', data);\n53:     return {\n54:       success: true,"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 95,
      "content": "// console.log('✅ Tournament progression fixed:', data);",
      "context": "93:     }\n94: \n95:     // console.log('✅ Tournament progression fixed:', data);\n96:     return {\n97:       success: true,"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 164,
      "content": "console.log('✅ Tournament progression is consistent');",
      "context": "162:       await fixAllTournamentProgression(tournamentId);\n163:     } else {\n164:       console.log('✅ Tournament progression is consistent');\n165:     }\n166:   } catch (_err) {"
    },
    {
      "file": "src/utils/bracketFallback.ts",
      "line": 127,
      "content": "console.log('✅ Bracket generation completed successfully!');",
      "context": "125:     }\n126:     \n127:     console.log('✅ Bracket generation completed successfully!');\n128:     \n129:     return {"
    },
    {
      "file": "src/utils/challengeCleanup.ts",
      "line": 35,
      "content": "console.log(`✅ Manual cleanup completed: ${result} challenges expired`);",
      "context": "33:     }\n34:     \n35:     console.log(`✅ Manual cleanup completed: ${result} challenges expired`);\n36:     \n37:     return {"
    },
    {
      "file": "src/utils/challengeCleanup.ts",
      "line": 73,
      "content": "console.log(`✅ Deep cleanup completed: ${result} old challenges removed`);",
      "context": "71:     }\n72:     \n73:     console.log(`✅ Deep cleanup completed: ${result} old challenges removed`);\n74:     \n75:     return {"
    },
    {
      "file": "src/utils/createSABO32Function.ts",
      "line": 135,
      "content": "console.log('✅ SABO-32 advancement function created successfully');",
      "context": "133:       console.error('Error creating function:', error);\n134:     } else {\n135:       console.log('✅ SABO-32 advancement function created successfully');\n136:     }\n137:   } catch (err) {"
    },
    {
      "file": "src/utils/debugTournamentRefresh.ts",
      "line": 9,
      "content": "console.log('✅ Clearing React Query cache...');",
      "context": "7:   // Method 1: Clear React Query cache\n8:   if ((window as any).queryClient) {\n9:     console.log('✅ Clearing React Query cache...');\n10:     (window as any).queryClient.invalidateQueries();\n11:     (window as any).queryClient.refetchQueries();"
    },
    {
      "file": "src/utils/debugTournamentRefresh.ts",
      "line": 16,
      "content": "console.log('✅ Refreshing Supabase real-time connections...');",
      "context": "14:   // Method 2: Clear Supabase channels and reconnect\n15:   if ((window as any).supabase) {\n16:     console.log('✅ Refreshing Supabase real-time connections...');\n17:     const supabase = (window as any).supabase;\n18:     supabase.removeAllChannels();"
    },
    {
      "file": "src/utils/debugTournamentRefresh.ts",
      "line": 23,
      "content": "console.log('✅ Force reloading page...');",
      "context": "21:   // Method 3: Force page reload\n22:   setTimeout(() => {\n23:     console.log('✅ Force reloading page...');\n24:     window.location.reload();\n25:   }, 1000);"
    },
    {
      "file": "src/utils/migrationStartup.ts",
      "line": 8,
      "content": "console.log('Migration system cleanup completed');",
      "context": "6: \n7: export const cleanupMigrationSystem = (): void => {\n8:   console.log('Migration system cleanup completed');\n9: };\n10: "
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 27,
      "content": "console.log('✅ Kết nối thành công');",
      "context": "25:     } else {\n26:       results.connection = true;\n27:       console.log('✅ Kết nối thành công');\n28:     }\n29: "
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 55,
      "content": "console.log(`✅ Tìm thấy ${profiles.length} users`);",
      "context": "53:       results.userCount = profiles.length;\n54:       results.hasData = profiles.length > 0;\n55:       console.log(`✅ Tìm thấy ${profiles.length} users`);\n56:       if (profiles.length > 0) {\n57:         console.log('📝 Users mẫu:', profiles.slice(0, 3));"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 76,
      "content": "console.log(`✅ Bảng ${table}: ${data.length} records`);",
      "context": "74: \n75:         if (!error && data) {\n76:           console.log(`✅ Bảng ${table}: ${data.length} records`);\n77:         } else {\n78:           console.log("
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 110,
      "content": "console.log(`📊 Có dữ liệu: ${results.hasData ? '✅ Có' : '❌ Không'}`);",
      "context": "108:     console.log(`📋 Số bảng: ${results.tables.length}`);\n109:     console.log(`👥 Số users: ${results.userCount}`);\n110:     console.log(`📊 Có dữ liệu: ${results.hasData ? '✅ Có' : '❌ Không'}`);\n111: \n112:     if (results.errors.length > 0) {"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 145,
      "content": "console.log('✅ Hoàn thành kiểm tra!');",
      "context": "143:   quickDatabaseCheck()\n144:     .then(results => {\n145:       console.log('✅ Hoàn thành kiểm tra!');\n146:       return results;\n147:     })"
    },
    {
      "file": "src/utils/relationshipAutoFix.ts",
      "line": 227,
      "content": "console.log(`✅ Fixed ${result.file} (${result.changesApplied} changes)`);",
      "context": "225: \n226:     report.results.forEach(result => {\n227:       console.log(`✅ Fixed ${result.file} (${result.changesApplied} changes)`);\n228:       // fs.writeFileSync(result.file, result.fixedContent);\n229:     });"
    },
    {
      "file": "src/utils/relationshipAutoFix.ts",
      "line": 255,
      "content": "console.log('✅ Auto-fix completed successfully!');",
      "context": "253: \n254:     if (report.success) {\n255:       console.log('✅ Auto-fix completed successfully!');\n256:     } else {\n257:       console.log('❌ Auto-fix failed.');"
    },
    {
      "file": "src/utils/supabaseHealth.ts",
      "line": 22,
      "content": "// console.log('Supabase connection successful!', data);",
      "context": "20:     }\n21: \n22:     // console.log('Supabase connection successful!', data);\n23:     return { success: true, data };\n24:   } catch (error: unknown) {"
    },
    {
      "file": "src/utils/tournamentRewards.ts",
      "line": 84,
      "content": "console.log('✅ [calculateRewards] Using user-set prize_pool:', totalPrize);",
      "context": "82:   if (tournament.prize_pool && tournament.prize_pool > 0) {\n83:     totalPrize = tournament.prize_pool;\n84:     console.log('✅ [calculateRewards] Using user-set prize_pool:', totalPrize);\n85:   } else if (tournament.entry_fee && tournament.max_participants) {\n86:     totalPrize = tournament.entry_fee * tournament.max_participants * 0.75; // ✅ FIXED: Use 75% as fallback calculation"
    }
  ],
  "performance": [
    {
      "file": "src/components/Navigation.tsx",
      "line": 102,
      "content": "console.warn('User status check timed out');",
      "context": "100:     // Add timeout to prevent hanging\n101:     const timeoutId = setTimeout(() => {\n102:       console.warn('User status check timed out');\n103:       setIsClubOwner(false);\n104:       setIsAdmin(false);"
    },
    {
      "file": "src/components/UserProfileHeader.tsx",
      "line": 74,
      "content": "console.log('🔔 Setting up real-time subscriptions for profile updates');",
      "context": "72:     if (!user) return;\n73: \n74:     console.log('🔔 Setting up real-time subscriptions for profile updates');\n75: \n76:     const profileChannel = supabase"
    },
    {
      "file": "src/components/UserProfileHeader.tsx",
      "line": 87,
      "content": "console.log('📊 Profile updated via real-time:', payload);",
      "context": "85:         },\n86:         payload => {\n87:           console.log('📊 Profile updated via real-time:', payload);\n88:           setProfile(payload.new);\n89:         }"
    },
    {
      "file": "src/components/UserProfileHeader.tsx",
      "line": 100,
      "content": "console.log('🏆 Rankings updated via real-time:', payload);",
      "context": "98:         },\n99:         payload => {\n100:           console.log('🏆 Rankings updated via real-time:', payload);\n101:           setRankings(payload.new);\n102:         }"
    },
    {
      "file": "src/components/UserProfileHeader.tsx",
      "line": 113,
      "content": "console.log('💰 Wallet updated via real-time:', payload);",
      "context": "111:         },\n112:         payload => {\n113:           console.log('💰 Wallet updated via real-time:', payload);\n114:           setWallet(payload.new);\n115:         }"
    },
    {
      "file": "src/components/UserProfileHeader.tsx",
      "line": 118,
      "content": "console.log('🔔 Real-time subscription status:', status);",
      "context": "116:       )\n117:       .subscribe(status => {\n118:         console.log('🔔 Real-time subscription status:', status);\n119:       });\n120: "
    },
    {
      "file": "src/components/UserProfileHeader.tsx",
      "line": 122,
      "content": "console.log('🔕 Cleaning up real-time subscriptions');",
      "context": "120: \n121:     return () => {\n122:       console.log('🔕 Cleaning up real-time subscriptions');\n123:       supabase.removeChannel(profileChannel);\n124:     };"
    },
    {
      "file": "src/components/WalletBalance.tsx",
      "line": 84,
      "content": "console.log('Wallet updated via realtime:', payload);",
      "context": "82:         },\n83:         payload => {\n84:           console.log('Wallet updated via realtime:', payload);\n85:           if (payload.new && typeof payload.new === 'object') {\n86:             const newData = payload.new as any;"
    },
    {
      "file": "src/components/performance/PerformanceMonitor.tsx",
      "line": 166,
      "content": "console.log(`🚀 Performance: ${componentName} rendered in ${duration.toFixed(2)}ms`);",
      "context": "164:     const duration = endTime - startTime;\n165:     \n166:     console.log(`🚀 Performance: ${componentName} rendered in ${duration.toFixed(2)}ms`);\n167:     \n168:     if (duration > 100) {"
    },
    {
      "file": "src/components/performance/PerformanceMonitor.tsx",
      "line": 169,
      "content": "console.warn(`⚠️ Performance Warning: ${componentName} took ${duration.toFixed(2)}ms to render`);",
      "context": "167:     \n168:     if (duration > 100) {\n169:       console.warn(`⚠️ Performance Warning: ${componentName} took ${duration.toFixed(2)}ms to render`);\n170:     }\n171:   };"
    },
    {
      "file": "src/components/ranking/SPAPointsCard.tsx",
      "line": 124,
      "content": "console.log('🔔 [SPAPointsCard] Setting up real-time subscription');",
      "context": "122: \n123:     // Set up real-time subscription\n124:     console.log('🔔 [SPAPointsCard] Setting up real-time subscription');\n125:     const subscription = supabase\n126:       .channel('spa-points-card-updates')"
    },
    {
      "file": "src/components/tournament/SingleEliminationMatchCard.tsx",
      "line": 367,
      "content": "console.log('🔄 Trusting real-time updates to refresh UI');",
      "context": "365: \n366:                   // Don't reload page, let real-time updates handle it\n367:                   console.log('🔄 Trusting real-time updates to refresh UI');\n368:                 } catch (error) {\n369:                   console.error('Error updating score:', error);"
    },
    {
      "file": "src/components/tournament/TournamentAutomationStatus.tsx",
      "line": 129,
      "content": "console.log('🔄 Real-time match update:', payload);",
      "context": "127:         },\n128:         payload => {\n129:           console.log('🔄 Real-time match update:', payload);\n130:           fetchMatchStatus(); // Refresh data when matches change\n131: "
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 158,
      "content": "console.log('[SimpleProfileContext] Cleaning up real-time subscription');",
      "context": "156: \n157:     return () => {\n158:       console.log('[SimpleProfileContext] Cleaning up real-time subscription');\n159:       supabase.removeChannel(channel);\n160:     };"
    },
    {
      "file": "src/hooks/useChallengeNotifications.tsx",
      "line": 244,
      "content": "console.log('🔔 Setting up real-time notifications for user:', user.id);",
      "context": "242:     if (!user?.id || !realtime) return;\n243: \n244:     console.log('🔔 Setting up real-time notifications for user:', user.id);\n245: \n246:     const unsubscribe = challengeNotificationService.subscribeToUserNotifications("
    },
    {
      "file": "src/hooks/useChallengeNotifications.tsx",
      "line": 249,
      "content": "console.log('🔔 New real-time notification:', notification);",
      "context": "247:       user.id,\n248:       (notification: ChallengeNotification) => {\n249:         console.log('🔔 New real-time notification:', notification);\n250:         \n251:         // Add to notifications list"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 581,
      "content": "console.log('🔄 Real-time challenge update (throttled):', payload);",
      "context": "579:         },\n580:         payload => {\n581:           console.log('🔄 Real-time challenge update (throttled):', payload);\n582:           throttledRefresh();\n583:         }"
    },
    {
      "file": "src/hooks/useEnhancedNotifications.tsx",
      "line": 149,
      "content": "console.log('Real-time notification update:', payload);",
      "context": "147:         },\n148:         payload => {\n149:           console.log('Real-time notification update:', payload);\n150: \n151:           // Refresh the summary to get accurate counts and latest notifications"
    },
    {
      "file": "src/hooks/usePerformanceOptimization.ts",
      "line": 76,
      "content": "console.log(`👆 User interaction: ${action} at ${performance.now()}ms`);",
      "context": "74:     trackUserInteraction: (action: string) => {\n75:       if (process.env.NODE_ENV === 'development') {\n76:         console.log(`👆 User interaction: ${action} at ${performance.now()}ms`);\n77:       }\n78:     },"
    },
    {
      "file": "src/hooks/usePerformanceOptimization.ts",
      "line": 82,
      "content": "console.log(`🎨 Component rendered: ${componentName} at ${performance.now()}ms`);",
      "context": "80:     trackComponentRender: (componentName: string) => {\n81:       if (process.env.NODE_ENV === 'development') {\n82:         console.log(`🎨 Component rendered: ${componentName} at ${performance.now()}ms`);\n83:       }\n84:     }"
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 168,
      "content": "console.log('[useProfile] Profile rank updated via real-time:', {",
      "context": "166: \n167:           if (oldRank !== newRank) {\n168:             console.log('[useProfile] Profile rank updated via real-time:', {\n169:               old: oldRank,\n170:               new: newRank,"
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 243,
      "content": "console.log('[useProfile] Real-time subscription status:', status);",
      "context": "241:       )\n242:       .subscribe(status => {\n243:         console.log('[useProfile] Real-time subscription status:', status);\n244:       });\n245: "
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 247,
      "content": "console.log('[useProfile] Cleaning up real-time subscription');",
      "context": "245: \n246:     return () => {\n247:       console.log('[useProfile] Cleaning up real-time subscription');\n248:       supabase.removeChannel(channel);\n249:     };"
    },
    {
      "file": "src/hooks/useRealtimeSubscriptions.tsx",
      "line": 89,
      "content": "// ...removed console.log('Real-time subscription status:', status)",
      "context": "87:     // Handle connection status\n88:     const subscription = channel.subscribe(status => {\n89:       // ...removed console.log('Real-time subscription status:', status)\n90: \n91:       if (status === 'SUBSCRIBED') {"
    },
    {
      "file": "src/hooks/useRealtimeSubscriptions.tsx",
      "line": 114,
      "content": "// ...removed console.log('Cleaning up real-time subscriptions')",
      "context": "112:     return () => {\n113:       if (channelRef.current) {\n114:         // ...removed console.log('Cleaning up real-time subscriptions')\n115:         supabase.removeChannel(channelRef.current);\n116:         channelRef.current = null;"
    },
    {
      "file": "src/hooks/useRealtimeSubscriptions.tsx",
      "line": 297,
      "content": "// ...removed console.log('Setting up tournament real-time subscription')",
      "context": "295: \n296:   useEffect(() => {\n297:     // ...removed console.log('Setting up tournament real-time subscription')\n298: \n299:     const channel = supabase.channel(`tournaments-${Date.now()}`);"
    },
    {
      "file": "src/hooks/useRealtimeTournament.ts",
      "line": 80,
      "content": "console.log('🔄 Tournament updated via real-time:', payload);",
      "context": "78:         },\n79:         payload => {\n80:           console.log('🔄 Tournament updated via real-time:', payload);\n81: \n82:           switch (payload.eventType) {"
    },
    {
      "file": "src/hooks/useRealtimeTournaments.ts",
      "line": 80,
      "content": "console.log('🔄 Setting up real-time subscription for tournaments list');",
      "context": "78:   // Real-time subscription\n79:   useEffect(() => {\n80:     console.log('🔄 Setting up real-time subscription for tournaments list');\n81: \n82:     const channel = supabase"
    },
    {
      "file": "src/hooks/useRealtimeTournaments.ts",
      "line": 92,
      "content": "console.log('🔄 Tournaments list updated via real-time:', payload);",
      "context": "90:         },\n91:         payload => {\n92:           console.log('🔄 Tournaments list updated via real-time:', payload);\n93: \n94:           switch (payload.eventType) {"
    },
    {
      "file": "src/hooks/useRealtimeTournaments.ts",
      "line": 137,
      "content": "console.log('🔄 Cleaning up real-time subscription for tournaments list');",
      "context": "135: \n136:     return () => {\n137:       console.log('🔄 Cleaning up real-time subscription for tournaments list');\n138:       supabase.removeChannel(channel);\n139:     };"
    },
    {
      "file": "src/hooks/useSABO32Realtime.ts",
      "line": 35,
      "content": "console.log('🔄 Setting up SABO-32 realtime subscription for tournament:', tournamentId);",
      "context": "33:     if (!enabled || !tournamentId) return;\n34: \n35:     console.log('🔄 Setting up SABO-32 realtime subscription for tournament:', tournamentId);\n36: \n37:     // Create realtime subscription"
    },
    {
      "file": "src/hooks/useSABO32Realtime.ts",
      "line": 46,
      "content": "console.log('🔄 SABO-32 realtime update:', payload);",
      "context": "44:         filter: `tournament_id=eq.${tournamentId}`\n45:       }, (payload) => {\n46:         console.log('🔄 SABO-32 realtime update:', payload);\n47:         debouncedUpdate();\n48:       })"
    },
    {
      "file": "src/hooks/useSABO32Realtime.ts",
      "line": 53,
      "content": "console.log('🔄 Cleaning up SABO-32 realtime subscription');",
      "context": "51:     return () => {\n52:       if (subscriptionRef.current) {\n53:         console.log('🔄 Cleaning up SABO-32 realtime subscription');\n54:         subscriptionRef.current.unsubscribe();\n55:       }"
    },
    {
      "file": "src/hooks/useSPABalance.tsx",
      "line": 57,
      "content": "console.log('SPA balance updated via realtime:', payload);",
      "context": "55:         },\n56:         payload => {\n57:           console.log('SPA balance updated via realtime:', payload);\n58:           if (payload.new && 'spa_points' in payload.new) {\n59:             setBalance(payload.new.spa_points as number);"
    },
    {
      "file": "src/hooks/useTournamentMatches.ts",
      "line": 223,
      "content": "console.log('🔄 Cleaning up optimized real-time subscription');",
      "context": "221: \n222:     return () => {\n223:       console.log('🔄 Cleaning up optimized real-time subscription');\n224:       clearTimeout(debounceTimer);\n225:       supabase.removeChannel(channel);"
    },
    {
      "file": "src/hooks/useTournamentRealtime.ts",
      "line": 279,
      "content": "console.log('🛑 Cleaning up real-time subscriptions');",
      "context": "277: \n278:     return () => {\n279:       console.log('🛑 Cleaning up real-time subscriptions');\n280:       registrationChannel.unsubscribe();\n281:       tournamentChannel.unsubscribe();"
    },
    {
      "file": "src/hooks/useTournamentRealtimeSync.tsx",
      "line": 13,
      "content": "console.log('Setting up real-time listeners for user:', user.id);",
      "context": "11:     if (!user?.id) return;\n12: \n13:     console.log('Setting up real-time listeners for user:', user.id);\n14: \n15:     // Listen to tournament_registrations changes"
    },
    {
      "file": "src/hooks/useTournamentRealtimeSync.tsx",
      "line": 27,
      "content": "console.log('Real-time registration change:', payload);",
      "context": "25:         },\n26:         payload => {\n27:           console.log('Real-time registration change:', payload);\n28: \n29:           const tournamentId ="
    },
    {
      "file": "src/hooks/useTournamentRealtimeSync.tsx",
      "line": 52,
      "content": "console.log('Cleaning up real-time listeners');",
      "context": "50: \n51:     return () => {\n52:       console.log('Cleaning up real-time listeners');\n53:       supabase.removeChannel(channel);\n54:     };"
    },
    {
      "file": "src/hooks/useTournamentRegistrations.ts",
      "line": 164,
      "content": "console.log('🔄 Registration real-time update:', payload);",
      "context": "162:         },\n163:         payload => {\n164:           console.log('🔄 Registration real-time update:', payload);\n165: \n166:           // Immediately refetch to ensure accuracy with profile data"
    },
    {
      "file": "src/hooks/useTournamentRegistrations.ts",
      "line": 173,
      "content": "console.log('🔄 Cleaning up registration real-time subscription');",
      "context": "171: \n172:     return () => {\n173:       console.log('🔄 Cleaning up registration real-time subscription');\n174:       supabase.removeChannel(channel);\n175:     };"
    },
    {
      "file": "src/hooks/useTournamentResults.ts",
      "line": 144,
      "content": "console.log('🔄 Tournament results real-time update:', payload);",
      "context": "142:         },\n143:         payload => {\n144:           console.log('🔄 Tournament results real-time update:', payload);\n145: \n146:           // Immediately refetch results to ensure accuracy"
    },
    {
      "file": "src/hooks/useTournamentResults.ts",
      "line": 153,
      "content": "console.log('🔄 Cleaning up tournament results real-time subscription');",
      "context": "151: \n152:     return () => {\n153:       console.log('🔄 Cleaning up tournament results real-time subscription');\n154:       supabase.removeChannel(channel);\n155:     };"
    },
    {
      "file": "src/pages/NewComponentsShowcase.tsx",
      "line": 424,
      "content": "onSendMessage={(msg) => console.log('Send message:', msg)}",
      "context": "422:                   ]}\n423:                   onToggleFullscreen={() => console.log('Toggle fullscreen')}\n424:                   onSendMessage={(msg) => console.log('Send message:', msg)}\n425:                   onCheer={(playerId) => console.log('Cheer for:', playerId)}\n426:                   onShare={() => console.log('Share match')}"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 585,
      "content": "console.log('📨 Real-time notification sent to user:', userId, {",
      "context": "583:   // Real-time notification (placeholder for future WebSocket integration)\n584:   private static async sendRealtimeNotification(userId: string, message: Message) {\n585:     console.log('📨 Real-time notification sent to user:', userId, {\n586:       id: message.id,\n587:       subject: message.subject,"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 316,
      "content": "console.log('🔄 Cleaning up SABO real-time subscription');",
      "context": "314: \n315:     return () => {\n316:       console.log('🔄 Cleaning up SABO real-time subscription');\n317:       clearTimeout(debounceTimer);\n318:       supabase.removeChannel(channel);"
    },
    {
      "file": "src/utils/tournamentOptimization.ts",
      "line": 76,
      "content": "console.log(`⚡ ${operation} for tournament ${tournamentId}: ${duration}ms`);",
      "context": "74: ) => {\n75:   const duration = Date.now() - startTime;\n76:   console.log(`⚡ ${operation} for tournament ${tournamentId}: ${duration}ms`);\n77: \n78:   // Log slow operations"
    },
    {
      "file": "src/utils/tournamentOptimization.ts",
      "line": 80,
      "content": "console.warn(`🐌 Slow operation detected: ${operation} took ${duration}ms`);",
      "context": "78:   // Log slow operations\n79:   if (duration > 2000) {\n80:     console.warn(`🐌 Slow operation detected: ${operation} took ${duration}ms`);\n81:   }\n82: };"
    }
  ],
  "testing": [
    {
      "file": "src/components/test/AutoExpireTestComponent.tsx",
      "line": 46,
      "content": "console.log('🧪 Running manual auto-expire test...');",
      "context": "44: \n45:   const runManualExpireTest = async () => {\n46:     console.log('🧪 Running manual auto-expire test...');\n47:     await autoExpireChallenges();\n48:     setTestStats(prev => ({"
    },
    {
      "file": "src/components/test/TestCopyTemplate.tsx",
      "line": 19,
      "content": "console.log('Using existing templates:', rewardsData);",
      "context": "17:       if (templates.length > 0) {\n18:         rewardsData = convertTemplatesToRewards(templates);\n19:         console.log('Using existing templates:', rewardsData);\n20:       } else {\n21:         // Create sample rewards data for all 16 positions"
    },
    {
      "file": "src/components/test/TestCopyTemplate.tsx",
      "line": 173,
      "content": "console.log('Using sample rewards data:', rewardsData);",
      "context": "171:           specialAwards: [],\n172:         };\n173:         console.log('Using sample rewards data:', rewardsData);\n174:       }\n175: "
    },
    {
      "file": "src/components/testing/PerformanceMonitor.tsx",
      "line": 113,
      "content": "console.warn('Layout shift monitoring not supported');",
      "context": "111:         observer.observe({ entryTypes: ['layout-shift'] });\n112:       } catch (e) {\n113:         console.warn('Layout shift monitoring not supported');\n114:       }\n115:     }"
    },
    {
      "file": "src/components/testing/PostDeploymentMonitoring.tsx",
      "line": 148,
      "content": "console.log('📝 User feedback submitted:', newFeedback);",
      "context": "146:     });\n147: \n148:     console.log('📝 User feedback submitted:', newFeedback);\n149:   };\n150: "
    },
    {
      "file": "src/components/testing/ProductionDeploymentDashboard.tsx",
      "line": 160,
      "content": "console.log('🚀 Starting gradual rollout of responsive system v2');",
      "context": "158:   const initiateRollout = () => {\n159:     setDeploymentStatus('rolling');\n160:     console.log('🚀 Starting gradual rollout of responsive system v2');\n161:   };\n162: "
    },
    {
      "file": "src/components/testing/ProductionDeploymentDashboard.tsx",
      "line": 173,
      "content": "console.log('🚨 Emergency rollback initiated');",
      "context": "171:     disableFlag('experimentalLayouts');\n172:     disableFlag('responsiveAnalytics');\n173:     console.log('🚨 Emergency rollback initiated');\n174:   };\n175: "
    },
    {
      "file": "src/components/testing/ResponsiveAnalyticsTracker.tsx",
      "line": 87,
      "content": "console.log(",
      "context": "85: \n86:       // Log breakpoint transition\n87:       console.log(\n88:         `📊 Breakpoint transition: ${previousBreakpoint} → ${responsive.breakpoint}`\n89:       );"
    },
    {
      "file": "src/components/testing/ResponsiveAnalyticsTracker.tsx",
      "line": 139,
      "content": "console.log('📊 Started responsive analytics tracking');",
      "context": "137:     });\n138: \n139:     console.log('📊 Started responsive analytics tracking');\n140:   };\n141: "
    },
    {
      "file": "src/components/testing/ResponsiveAnalyticsTracker.tsx",
      "line": 156,
      "content": "console.log('📊 Responsive Analytics Report:', report);",
      "context": "154:       };\n155: \n156:       console.log('📊 Responsive Analytics Report:', report);\n157: \n158:       // Send to analytics service (example)"
    },
    {
      "file": "src/components/testing/ResponsiveAnalyticsTracker.tsx",
      "line": 169,
      "content": "console.log('📤 Sending to analytics service:', data);",
      "context": "167:   const sendToAnalyticsService = (data: any) => {\n168:     // Example: Send to Google Analytics, Mixpanel, etc.\n169:     console.log('📤 Sending to analytics service:', data);\n170: \n171:     // Example implementation:"
    },
    {
      "file": "src/components/testing/TournamentEndToEndTest.tsx",
      "line": 260,
      "content": "console.warn(",
      "context": "258:             !advancementResult.success\n259:           ) {\n260:             console.warn(\n261:               `Advancement warning for match ${match.id}:`,\n262:               advancementResult"
    },
    {
      "file": "src/components/testing/UserExperienceValidator.tsx",
      "line": 373,
      "content": "onTouchStart={() => console.log('Touch detected')}",
      "context": "371:           ref={touchTestRef}\n372:           className='p-8 border-2 border-dashed border-muted-foreground/50 rounded-lg text-center'\n373:           onTouchStart={() => console.log('Touch detected')}\n374:         >\n375:           <TouchpadIcon className='h-8 w-8 mx-auto mb-2 text-muted-foreground' />"
    }
  ],
  "other": [
    {
      "file": "src/components/AutomatedProfileRefresh.tsx",
      "line": 16,
      "content": "console.log(",
      "context": "14:     if (!user) return;\n15: \n16:     console.log(\n17:       '[AutomatedProfileRefresh] Setting up rank approval listener for user:',\n18:       user.id"
    },
    {
      "file": "src/components/AutomatedProfileRefresh.tsx",
      "line": 33,
      "content": "console.log(",
      "context": "31:         },\n32:         payload => {\n33:           console.log(\n34:             '[AutomatedProfileRefresh] Notification received:',\n35:             payload"
    },
    {
      "file": "src/components/AutomatedProfileRefresh.tsx",
      "line": 47,
      "content": "console.log('[AutomatedProfileRefresh] Rank approval detected');",
      "context": "45:             notification.message?.includes('approved')\n46:           ) {\n47:             console.log('[AutomatedProfileRefresh] Rank approval detected');\n48: \n49:             // Show immediate feedback"
    },
    {
      "file": "src/components/AutomatedProfileRefresh.tsx",
      "line": 62,
      "content": "console.log(",
      "context": "60:       )\n61:       .subscribe(status => {\n62:         console.log(\n63:           '[AutomatedProfileRefresh] Notification subscription status:',\n64:           status"
    },
    {
      "file": "src/components/AutomatedProfileRefresh.tsx",
      "line": 69,
      "content": "console.log(",
      "context": "67: \n68:     return () => {\n69:       console.log(\n70:         '[AutomatedProfileRefresh] Cleaning up notification listener'\n71:       );"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 50,
      "content": "console.log('🎯 Processing SPA transfer for challenge:', challengeData.id);",
      "context": "48:   const processSpaTransfer = async (challengeData: any) => {\n49:     try {\n50:       console.log('🎯 Processing SPA transfer for challenge:', challengeData.id);\n51: \n52:       const {"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 63,
      "content": "console.log('❌ No winner_id found in challenge data');",
      "context": "61: \n62:       if (!winner_id) {\n63:         console.log('❌ No winner_id found in challenge data');\n64:         return false;\n65:       }"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 68,
      "content": "console.log('⚠️ No bet_points, using default values');",
      "context": "66: \n67:       if (!bet_points) {\n68:         console.log('⚠️ No bet_points, using default values');\n69:       }\n70: "
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 76,
      "content": "console.log('📊 SPA Transfer:');",
      "context": "74:       const loserAmount = bet_points || 25;   // Default 25 if no bet_points\n75: \n76:       console.log('📊 SPA Transfer:');\n77:       console.log('   Winner gets:', '+' + winnerAmount);\n78:       console.log('   Loser loses:', '-' + loserAmount);"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 77,
      "content": "console.log('   Winner gets:', '+' + winnerAmount);",
      "context": "75: \n76:       console.log('📊 SPA Transfer:');\n77:       console.log('   Winner gets:', '+' + winnerAmount);\n78:       console.log('   Loser loses:', '-' + loserAmount);\n79:       console.log('   Challenger is winner:', challengerIsWinner);"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 78,
      "content": "console.log('   Loser loses:', '-' + loserAmount);",
      "context": "76:       console.log('📊 SPA Transfer:');\n77:       console.log('   Winner gets:', '+' + winnerAmount);\n78:       console.log('   Loser loses:', '-' + loserAmount);\n79:       console.log('   Challenger is winner:', challengerIsWinner);\n80: "
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 79,
      "content": "console.log('   Challenger is winner:', challengerIsWinner);",
      "context": "77:       console.log('   Winner gets:', '+' + winnerAmount);\n78:       console.log('   Loser loses:', '-' + loserAmount);\n79:       console.log('   Challenger is winner:', challengerIsWinner);\n80: \n81:       // Use correct functions for add/subtract"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 156,
      "content": "console.log('⚠️ Already processing this challenge, ignoring duplicate request');",
      "context": "154:     // Prevent double processing\n155:     if (approving === challengeId) {\n156:       console.log('⚠️ Already processing this challenge, ignoring duplicate request');\n157:       return;\n158:     }"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 162,
      "content": "console.log(`🎯 Club approval: ${approved ? 'APPROVED' : 'REJECTED'} challenge ${challengeId}`);",
      "context": "160:     try {\n161:       setApproving(challengeId);\n162:       console.log(`🎯 Club approval: ${approved ? 'APPROVED' : 'REJECTED'} challenge ${challengeId}`);\n163: \n164:       // Update challenge status directly"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 184,
      "content": "console.log('🎉 Challenge approved - processing SPA transfer...');",
      "context": "182:       // If approved, process SPA transfer and notifications\n183:       if (approved) {\n184:         console.log('🎉 Challenge approved - processing SPA transfer...');\n185:         \n186:         // Get the challenge details for SPA processing and notifications"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 194,
      "content": "console.log('Winner ID:', challengeForSpa.winner_id.substring(0, 8) + '...');",
      "context": "192: \n193:         if (challengeForSpa && challengeForSpa.winner_id) {\n194:           console.log('Winner ID:', challengeForSpa.winner_id.substring(0, 8) + '...');\n195:           console.log('Bet Points:', challengeForSpa.bet_points);\n196:           "
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 195,
      "content": "console.log('Bet Points:', challengeForSpa.bet_points);",
      "context": "193:         if (challengeForSpa && challengeForSpa.winner_id) {\n194:           console.log('Winner ID:', challengeForSpa.winner_id.substring(0, 8) + '...');\n195:           console.log('Bet Points:', challengeForSpa.bet_points);\n196:           \n197:           // Process SPA transfer (ONLY ONCE)"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 243,
      "content": "console.log('⚠️ No winner_id found, skipping SPA transfer and notifications');",
      "context": "241:           \n242:         } else {\n243:           console.log('⚠️ No winner_id found, skipping SPA transfer and notifications');\n244:         }\n245:       }"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 270,
      "content": "// console.log('🔄 Fetching challenges...');",
      "context": "268:   const fetchChallenges = async () => {\n269:     try {\n270:       // console.log('🔄 Fetching challenges...');\n271:       \n272:       const { data, error } = await supabase"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 293,
      "content": "// console.log('📋 Challenges data:', data);",
      "context": "291: \n292:       // console.log('✅ Fetched challenges:', data?.length || 0);\n293:       // console.log('📋 Challenges data:', data);\n294:       setChallenges(data || []);\n295:     } catch (error) {"
    },
    {
      "file": "src/components/CleanChallengesTab.tsx",
      "line": 323,
      "content": "// console.log('📊 Challenge counts:', {",
      "context": "321:   );\n322: \n323:   // console.log('📊 Challenge counts:', {\n324:   //   total: challenges.length,\n325:   //   pending: pendingChallenges.length,"
    },
    {
      "file": "src/components/ClubMemberManagement.tsx",
      "line": 134,
      "content": "console.log('Profile updated, refreshing members:', payload);",
      "context": "132:         },\n133:         payload => {\n134:           console.log('Profile updated, refreshing members:', payload);\n135:           fetchClubMembers(); // Refresh entire list\n136:         }"
    },
    {
      "file": "src/components/ClubMemberManagement.tsx",
      "line": 147,
      "content": "console.log('Rank request updated, refreshing members:', payload);",
      "context": "145:         },\n146:         payload => {\n147:           console.log('Rank request updated, refreshing members:', payload);\n148:           fetchClubMembers(); // Refresh when new approvals happen\n149:         }"
    },
    {
      "file": "src/components/ClubRegistrationMultiStepForm.tsx",
      "line": 232,
      "content": "console.log('Submitting registration data:', registrationData);",
      "context": "230:       };\n231: \n232:       console.log('Submitting registration data:', registrationData);\n233: \n234:       const { error } = await supabase.from('club_profiles').upsert(registrationData);"
    },
    {
      "file": "src/components/ClubStatsDashboard.tsx",
      "line": 71,
      "content": "console.log('Challenges updated - refreshing stats');",
      "context": "69:         },\n70:         () => {\n71:           console.log('Challenges updated - refreshing stats');\n72:           fetchClubStats(clubId);\n73:         }"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 76,
      "content": "console.log('🏪 ClubTournamentManagement mounting, user:', user?.id);",
      "context": "74: \n75:     useEffect(() => {\n76:       console.log('🏪 ClubTournamentManagement mounting, user:', user?.id);\n77: \n78:       if (user?.id) {"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 85,
      "content": "console.log('🏢 Loading club data for user:', user?.id);",
      "context": "83:     const loadClubAndTournaments = async () => {\n84:       try {\n85:         console.log('🏢 Loading club data for user:', user?.id);\n86: \n87:         const id = await getClubId();"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 88,
      "content": "console.log('🔍 Club ID resolved:', id);",
      "context": "86: \n87:         const id = await getClubId();\n88:         console.log('🔍 Club ID resolved:', id);\n89: \n90:         setClubId(id);"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 95,
      "content": "console.warn('⚠️ No club ID found for user');",
      "context": "93:           await loadTournaments(id);\n94:         } else {\n95:           console.warn('⚠️ No club ID found for user');\n96:         }\n97:       } catch (error) {"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 105,
      "content": "console.log('🏆 Club ID changed:', clubId);",
      "context": "103: \n104:     useEffect(() => {\n105:       console.log('🏆 Club ID changed:', clubId);\n106:       if (clubId) {\n107:         fetchTournaments();"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 132,
      "content": "console.log('Tournament change detected:', payload);",
      "context": "130:           },\n131:           payload => {\n132:             console.log('Tournament change detected:', payload);\n133:             // Immediate refresh without delay for realtime effect\n134:             fetchTournaments();"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 145,
      "content": "console.log('🔍 Getting club ID for user:', user?.id);",
      "context": "143: \n144:     const getClubId = async () => {\n145:       console.log('🔍 Getting club ID for user:', user?.id);\n146: \n147:       try {"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 171,
      "content": "console.warn('⚠️ No club ID available for tournament loading');",
      "context": "169: \n170:       if (!targetClubId) {\n171:         console.warn('⚠️ No club ID available for tournament loading');\n172:         return;\n173:       }"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 175,
      "content": "console.log('🏆 Loading tournaments for club:', targetClubId);",
      "context": "173:       }\n174: \n175:       console.log('🏆 Loading tournaments for club:', targetClubId);\n176: \n177:       try {"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 191,
      "content": "console.log('📊 Tournament query result:', {",
      "context": "189:           .order('created_at', { ascending: false });\n190: \n191:         console.log('📊 Tournament query result:', {\n192:           clubId: targetClubId,\n193:           count: data?.length || 0,"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 208,
      "content": "console.log('📈 Tournament status breakdown:', statusBreakdown);",
      "context": "206:           return acc;\n207:         }, {});\n208:         console.log('📈 Tournament status breakdown:', statusBreakdown);\n209: \n210:         // Show success message if data loaded"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 212,
      "content": "console.log(",
      "context": "210:         // Show success message if data loaded\n211:         if (cleanTournaments.length === 0) {\n212:           console.log(\n213:             '✅ No tournaments found for club - this is expected if admin deleted all'\n214:           );"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 308,
      "content": "console.log('🔍 Filtering tournaments:', {",
      "context": "306: \n307:     const filteredTournaments = React.useMemo(() => {\n308:       console.log('🔍 Filtering tournaments:', {\n309:         total: tournaments.length,\n310:         activeFilter: activeFilter,"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 315,
      "content": "console.log('📊 Showing all tournaments');",
      "context": "313: \n314:       if (!statusFilters[activeFilter as keyof typeof statusFilters]) {\n315:         console.log('📊 Showing all tournaments');\n316:         return tournaments;\n317:       }"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 325,
      "content": "console.log('📊 Filtered result:', {",
      "context": "323:       );\n324: \n325:       console.log('📊 Filtered result:', {\n326:         originalCount: tournaments.length,\n327:         filteredCount: filtered.length,"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 701,
      "content": "console.log('🔄 Loading registrations for tournament:', tournament.id);",
      "context": "699:     try {\n700:       setLoading(true);\n701:       console.log('🔄 Loading registrations for tournament:', tournament.id);\n702: \n703:       // Load tournament registrations first"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 988,
      "content": "console.log('No bracket found, ready to create one');",
      "context": "986:     } catch (error) {\n987:       // No bracket exists yet\n988:       console.log('No bracket found, ready to create one');\n989:     }\n990:   };"
    },
    {
      "file": "src/components/ClubTournamentManagement.tsx",
      "line": 1395,
      "content": "console.log('Tournament action:', action);",
      "context": "1393:               tournamentId={tournament.id}\n1394:               onAction={action => {\n1395:                 console.log('Tournament action:', action);\n1396:                 if (onUpdate) {\n1397:                   setTimeout(onUpdate, 500);"
    },
    {
      "file": "src/components/EnhancedChallengesList.tsx",
      "line": 34,
      "content": "console.log('Challenge response:', {",
      "context": "32:     try {\n33:       // Handle challenge response logic here\n34:       console.log('Challenge response:', {\n35:         challengeId: selectedChallenge?.id,\n36:         status,"
    },
    {
      "file": "src/components/MyChallengesTab.tsx",
      "line": 81,
      "content": "console.log('🔄 [MyChallengesTab] Fetching challenges for user:', user.id);",
      "context": "79: \n80:     try {\n81:       console.log('🔄 [MyChallengesTab] Fetching challenges for user:', user.id);\n82:       \n83:       // Fetch incoming challenges with challenger profile"
    },
    {
      "file": "src/components/MyChallengesTab.tsx",
      "line": 93,
      "content": "console.log('📥 [MyChallengesTab] Incoming challenges raw:', incoming);",
      "context": "91:       if (incomingError) throw incomingError;\n92: \n93:       console.log('📥 [MyChallengesTab] Incoming challenges raw:', incoming);\n94: \n95:       // Fetch challenger profiles for incoming challenges"
    },
    {
      "file": "src/components/MyChallengesTab.tsx",
      "line": 128,
      "content": "console.log('📤 [MyChallengesTab] Outgoing challenges raw:', outgoing);",
      "context": "126:       if (outgoingError) throw outgoingError;\n127: \n128:       console.log('📤 [MyChallengesTab] Outgoing challenges raw:', outgoing);\n129: \n130:       const outgoingWithProfiles = await Promise.all("
    },
    {
      "file": "src/components/MyChallengesTab.tsx",
      "line": 192,
      "content": "console.log('Challenge accepted, would create match for:', challengeId);",
      "context": "190:         const challenge = incomingChallenges.find(c => c.id === challengeId);\n191:         // Note: Match creation will be handled when match_system table is properly configured\n192:         console.log('Challenge accepted, would create match for:', challengeId);\n193:       }\n194: "
    },
    {
      "file": "src/components/Navigation.tsx",
      "line": 191,
      "content": "console.log(",
      "context": "189:                 to={item.href}\n190:                 onClick={() => {\n191:                   console.log(\n192:                     `🔗 [Navigation] Clicking on: ${item.name} -> ${item.href}`\n193:                   );"
    },
    {
      "file": "src/components/OpponentCard.tsx",
      "line": 48,
      "content": "console.log('Swiped left - Pass');",
      "context": "46:   const swipeCallbacks = {\n47:     onSwipeLeft: (id: string) => {\n48:       console.log('Swiped left - Pass');\n49:       onSwipeLeft(id);\n50:     },"
    },
    {
      "file": "src/components/OpponentCard.tsx",
      "line": 52,
      "content": "console.log('Swiped right - Challenge');",
      "context": "50:     },\n51:     onSwipeRight: (id: string) => {\n52:       console.log('Swiped right - Challenge');\n53:       onChallenge(id);\n54:     },"
    },
    {
      "file": "src/components/OpponentCard.tsx",
      "line": 56,
      "content": "console.log('Swiped up - Super Like');",
      "context": "54:     },\n55:     onSwipeUp: (id: string) => {\n56:       console.log('Swiped up - Super Like');\n57:       onSwipeRight(id); // Treat as interest\n58:     },"
    },
    {
      "file": "src/components/OpponentCard.tsx",
      "line": 60,
      "content": "console.log('Swiped down - View Profile');",
      "context": "58:     },\n59:     onSwipeDown: (id: string) => {\n60:       console.log('Swiped down - View Profile');\n61:       onViewProfile?.(id);\n62:     },"
    },
    {
      "file": "src/components/ProfileHeader.tsx",
      "line": 237,
      "content": "console.log('Profile avatar failed to load:', avatarUrl || profile.avatar_url);",
      "context": "235:                   className=\"object-cover\"\n236:                   onError={(e) => {\n237:                     console.log('Profile avatar failed to load:', avatarUrl || profile.avatar_url);\n238:                     e.currentTarget.style.display = 'none';\n239:                   }}"
    },
    {
      "file": "src/components/RankRegistration.tsx",
      "line": 61,
      "content": "console.log('Fetching clubs...');",
      "context": "59:     try {\n60:       setIsLoadingClubs(true);\n61:       console.log('Fetching clubs...');\n62: \n63:       // Query club_profiles table with approved status"
    },
    {
      "file": "src/components/RankRegistration.tsx",
      "line": 74,
      "content": "console.log('No approved clubs found, trying all club profiles...');",
      "context": "72:         \n73:         // Fallback: get all club profiles\n74:         console.log('No approved clubs found, trying all club profiles...');\n75:         const { data: allClubProfiles, error: allError } = await supabase\n76:           .from('club_profiles')"
    },
    {
      "file": "src/components/RankRegistration.tsx",
      "line": 85,
      "content": "console.log('All club profiles found:', allClubProfiles?.length || 0);",
      "context": "83:         }\n84: \n85:         console.log('All club profiles found:', allClubProfiles?.length || 0);\n86:         setClubs(allClubProfiles || []);\n87:       } else {"
    },
    {
      "file": "src/components/RankRegistration.tsx",
      "line": 88,
      "content": "console.log('Approved club profiles found:', clubProfiles?.length || 0);",
      "context": "86:         setClubs(allClubProfiles || []);\n87:       } else {\n88:         console.log('Approved club profiles found:', clubProfiles?.length || 0);\n89:         setClubs(clubProfiles || []);\n90:       }"
    },
    {
      "file": "src/components/RankRegistrationClean.tsx",
      "line": 61,
      "content": "console.log('Fetching clubs...');",
      "context": "59:     try {\n60:       setIsLoadingClubs(true);\n61:       console.log('Fetching clubs...');\n62: \n63:       // Query club_profiles table with approved status"
    },
    {
      "file": "src/components/RankRegistrationClean.tsx",
      "line": 74,
      "content": "console.log('No approved clubs found, trying all club profiles...');",
      "context": "72:         \n73:         // Fallback: get all club profiles\n74:         console.log('No approved clubs found, trying all club profiles...');\n75:         const { data: allClubProfiles, error: allError } = await supabase\n76:           .from('club_profiles')"
    },
    {
      "file": "src/components/RankRegistrationClean.tsx",
      "line": 85,
      "content": "console.log('All club profiles found:', allClubProfiles?.length || 0);",
      "context": "83:         }\n84: \n85:         console.log('All club profiles found:', allClubProfiles?.length || 0);\n86:         setClubs(allClubProfiles || []);\n87:       } else {"
    },
    {
      "file": "src/components/RankRegistrationClean.tsx",
      "line": 88,
      "content": "console.log('Approved club profiles found:', clubProfiles?.length || 0);",
      "context": "86:         setClubs(allClubProfiles || []);\n87:       } else {\n88:         console.log('Approved club profiles found:', clubProfiles?.length || 0);\n89:         setClubs(clubProfiles || []);\n90:       }"
    },
    {
      "file": "src/components/RankRegistrationForm.tsx",
      "line": 97,
      "content": "console.log('No verified clubs, trying all club profiles...');",
      "context": "95: \n96:       if (error) {\n97:         console.log('No verified clubs, trying all club profiles...');\n98:         const { data: allClubs, error: allError } = await supabase\n99:           .from('club_profiles')"
    },
    {
      "file": "src/components/RankVerificationRequests.tsx",
      "line": 63,
      "content": "console.log('No club profile found for user:', user.id);",
      "context": "61: \n62:       if (clubError || !clubData) {\n63:         console.log('No club profile found for user:', user.id);\n64:         setLoading(false);\n65:         return;"
    },
    {
      "file": "src/components/RankVerificationRequests.tsx",
      "line": 245,
      "content": "console.log('Feed post created for rank verification');",
      "context": "243:               });\n244: \n245:               console.log('Feed post created for rank verification');\n246:             } catch (postError) {\n247:               console.error('Error creating feed post:', postError);"
    },
    {
      "file": "src/components/RegisterForm.tsx",
      "line": 142,
      "content": "console.log('Checking existing user with email:', email, 'phone:', phone);",
      "context": "140:   // Check for existing email/phone before registration\n141:   const checkExistingUser = async (email: string, phone: string) => {\n142:     console.log('Checking existing user with email:', email, 'phone:', phone);\n143: \n144:     // Check email in auth.users through profiles"
    },
    {
      "file": "src/components/RegisterForm.tsx",
      "line": 167,
      "content": "console.log('Registration attempt:', {",
      "context": "165:     setIsLoading(true);\n166:     try {\n167:       console.log('Registration attempt:', {\n168:         email: data.email,\n169:         fullName: data.fullName,"
    },
    {
      "file": "src/components/SimpleLegacySearch.tsx",
      "line": 29,
      "content": "console.log('Found results:', data);",
      "context": "27:       } else {\n28:         setResults(data || []);\n29:         console.log('Found results:', data);\n30:       }\n31:     } catch (err) {"
    },
    {
      "file": "src/components/SocialActions.tsx",
      "line": 51,
      "content": "// ...removed console.log('Comment functionality not implemented')",
      "context": "49:             onComment(postId);\n50:           } else {\n51:             // ...removed console.log('Comment functionality not implemented')\n52:           }\n53:         }}"
    },
    {
      "file": "src/components/SocialActions.tsx",
      "line": 96,
      "content": "// ...removed console.log('Challenge functionality not implemented')",
      "context": "94:               onChallenge(postId);\n95:             } else {\n96:               // ...removed console.log('Challenge functionality not implemented')\n97:             }\n98:           }}"
    },
    {
      "file": "src/components/TableBookingForm.tsx",
      "line": 80,
      "content": "console.log('Mock table booking:', {",
      "context": "78: \n79:       // Mock booking submission since table_bookings table doesn't exist\n80:       console.log('Mock table booking:', {\n81:         club_id: club.id,\n82:         user_id: user.user.id,"
    },
    {
      "file": "src/components/UserProfileHeader.tsx",
      "line": 25,
      "content": "console.log('🔍 Loading complete profile data for user:', user.id);",
      "context": "23:     setLoading(true);\n24:     try {\n25:       console.log('🔍 Loading complete profile data for user:', user.id);\n26: \n27:       // Get profile, rankings, and wallet data in parallel"
    },
    {
      "file": "src/components/WalletBalance.tsx",
      "line": 41,
      "content": "console.log('Fetching wallet data for user:', user.id);",
      "context": "39: \n40:       try {\n41:         console.log('Fetching wallet data for user:', user.id);\n42: \n43:         // Fetch wallet balance"
    },
    {
      "file": "src/components/WithdrawModal.tsx",
      "line": 58,
      "content": "console.log('Mock withdrawal request:', {",
      "context": "56:     try {\n57:       // Mock withdrawal request since wallet_transactions table doesn't exist\n58:       console.log('Mock withdrawal request:', {\n59:         wallet_id: wallet.id,\n60:         transaction_type: 'withdraw',"
    },
    {
      "file": "src/components/auth/AuthToast.tsx",
      "line": 289,
      "content": "console.log('Resending verification email...');",
      "context": "287:           onClick: () => {\n288:             // This would trigger resend logic\n289:             console.log('Resending verification email...');\n290:           },\n291:         },"
    },
    {
      "file": "src/components/auth/FacebookLoginButton.tsx",
      "line": 14,
      "content": "console.log('Initiating Facebook login...');",
      "context": "12:     setLoading(true);\n13:     try {\n14:       console.log('Initiating Facebook login...');\n15:       const { error } = await signInWithFacebook();\n16: "
    },
    {
      "file": "src/components/auth/GoogleLoginButton.tsx",
      "line": 14,
      "content": "console.log('Initiating Google login...');",
      "context": "12:     setLoading(true);\n13:     try {\n14:       console.log('Initiating Google login...');\n15:       const { error } = await signInWithGoogle();\n16: "
    },
    {
      "file": "src/components/auth/ProtectedRoute.tsx",
      "line": 28,
      "content": "console.log('🔧 ProtectedRoute: No user or session, redirecting to auth', {",
      "context": "26:   // Check for both user and session for stronger authentication\n27:   if (!user || !session) {\n28:     console.log('🔧 ProtectedRoute: No user or session, redirecting to auth', {\n29:       hasUser: !!user,\n30:       hasSession: !!session,"
    },
    {
      "file": "src/components/auth/PublicRoute.tsx",
      "line": 28,
      "content": "console.log('🔧 PublicRoute: Authenticated, redirecting to', target);",
      "context": "26:   if (user && session) {\n27:     const target = isOwner ? '/club-management' : '/dashboard';\n28:     console.log('🔧 PublicRoute: Authenticated, redirecting to', target);\n29:     return <Navigate to={target} replace />;\n30:   }"
    },
    {
      "file": "src/components/challenges/ActiveChallengeHighlight.tsx",
      "line": 41,
      "content": "console.log('🔍 ActiveChallengeHighlight render:', {",
      "context": "39: \n40:   // Debug log\n41:   console.log('🔍 ActiveChallengeHighlight render:', {\n42:     totalChallenges: challenges?.length || 0,\n43:     acceptedChallenges: acceptedChallenges.length,"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 60,
      "content": "console.log('🎯 [DEBUG] EnhancedChallengeCard rendered for challenge:', originalChallenge.id);",
      "context": "58:   currentUserProfile\n59: }) => {\n60:   console.log('🎯 [DEBUG] EnhancedChallengeCard rendered for challenge:', originalChallenge.id);\n61:   \n62:   // Convert to ExtendedChallenge for enhanced features"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 73,
      "content": "console.log('🎯 [DEBUG] handleJoinChallenge called for challenge:', challenge.id);",
      "context": "71:   // 🚀 NEW: Simple join challenge handler\n72:   const handleJoinChallenge = async () => {\n73:     console.log('🎯 [DEBUG] handleJoinChallenge called for challenge:', challenge.id);\n74:     try {\n75:       console.log('🎯 [DEBUG] Calling acceptChallenge...');"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 75,
      "content": "console.log('🎯 [DEBUG] Calling acceptChallenge...');",
      "context": "73:     console.log('🎯 [DEBUG] handleJoinChallenge called for challenge:', challenge.id);\n74:     try {\n75:       console.log('🎯 [DEBUG] Calling acceptChallenge...');\n76:       await acceptChallenge(challenge.id);\n77:       console.log('🎯 [DEBUG] acceptChallenge successful!');"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 98,
      "content": "console.log('🎯 [DEBUG] handleStartMatch called for challenge:', challenge.id);",
      "context": "96:   // Start match handler - simplified to only update challenge status\n97:   const handleStartMatch = async () => {\n98:     console.log('🎯 [DEBUG] handleStartMatch called for challenge:', challenge.id);\n99:     try {\n100:       const { createClient } = await import('@supabase/supabase-js');"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 118,
      "content": "console.log('🎯 [DEBUG] Challenge status updated to ongoing');",
      "context": "116:       }\n117: \n118:       console.log('🎯 [DEBUG] Challenge status updated to ongoing');\n119:       toast.success('🏁 Trận đấu đã được bắt đầu!');\n120:       "
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 134,
      "content": "console.log('🎯 [DEBUG] handleEnterScore called for challenge:', challenge.id);",
      "context": "132:   // 🚀 NEW: Enter score handler\n133:   const handleEnterScore = async () => {\n134:     console.log('🎯 [DEBUG] handleEnterScore called for challenge:', challenge.id);\n135:     toast.info('🎮 Tính năng nhập tỷ số đang được phát triển');\n136:     "
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 161,
      "content": "// console.log('🔍 [EnhancedChallengeCard] Rank eligibility check:', {",
      "context": "159:     \n160:     // Only log in development mode if needed for debugging\n161:     // console.log('🔍 [EnhancedChallengeCard] Rank eligibility check:', {\n162:     //   challengeId: challenge.id,\n163:     //   required_rank: challenge.required_rank,"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 188,
      "content": "console.log('🎯 [DEBUG] Challenge conditions:', {",
      "context": "186: \n187:   // Debug logging after functions are defined\n188:   console.log('🎯 [DEBUG] Challenge conditions:', {\n189:     challengeId: challenge.id,\n190:     status: challenge.status,"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 213,
      "content": "// console.log('🎯 Live Handicap Calculation:', {",
      "context": "211: \n212:         // Only log in development mode if needed for debugging\n213:         // console.log('🎯 Live Handicap Calculation:', {\n214:         //   challengeId: challenge.id,\n215:         //   challengerRank,"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 225,
      "content": "// console.warn('Missing rank data for handicap calculation:', {",
      "context": "223:         // Only warn if both ranks are missing (normal for open challenges)\n224:         if (!challengerRank && !opponentRank) {\n225:           // console.warn('Missing rank data for handicap calculation:', {\n226:           //   challengeId: challenge.id,\n227:           //   challengerRank,"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 663,
      "content": "console.log('🎯 [DEBUG] Score update callback:', { challengerScore, opponentScore, challengeId: challenge.id });",
      "context": "661:                 challengeId={challenge.id}\n662:                 onScoreUpdate={async (challengerScore: number, opponentScore: number) => {\n663:                   console.log('🎯 [DEBUG] Score update callback:', { challengerScore, opponentScore, challengeId: challenge.id });\n664:                   \n665:                   // TODO: Implement actual score update API call"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 712,
      "content": "console.log('🎯 [DEBUG] Rendering JOIN button for challenge:', challenge.id, 'isCreator:', isCreator, 'isRankEligible:', isRankEligible());",
      "context": "710:                     {/* Join button - only show if user is NOT the creator AND has required rank */}\n711:                     {!isCreator && isRankEligible() && (() => {\n712:                       console.log('🎯 [DEBUG] Rendering JOIN button for challenge:', challenge.id, 'isCreator:', isCreator, 'isRankEligible:', isRankEligible());\n713:                       return (\n714:                         <Button"
    },
    {
      "file": "src/components/challenges/EnhancedChallengeCard.tsx",
      "line": 718,
      "content": "console.log('🎯 [DEBUG] Join button clicked!');",
      "context": "716:                           className=\"bg-gradient-to-r from-emerald-500 to-green-600 hover:from-emerald-600 hover:to-green-700 dark:from-emerald-400 dark:to-green-500 dark:hover:from-emerald-500 dark:hover:to-green-600 text-white border-0 shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200\"\n717:                           onClick={(e) => {\n718:                             console.log('🎯 [DEBUG] Join button clicked!');\n719:                             e.stopPropagation();\n720:                             handleJoinChallenge();"
    },
    {
      "file": "src/components/challenges/IntegratedScoreManager.tsx",
      "line": 101,
      "content": "console.log('🎯 Completing challenge with club confirmation:', {",
      "context": "99:       }\n100: \n101:       console.log('🎯 Completing challenge with club confirmation:', {\n102:         challengeId,\n103:         challengerScore,"
    },
    {
      "file": "src/components/challenges/MatchScoreModal.tsx",
      "line": 50,
      "content": "console.log('Submitting scores:', {",
      "context": "48: \n49:     try {\n50:       console.log('Submitting scores:', {\n51:         challengerScore,\n52:         opponentScore,"
    },
    {
      "file": "src/components/club/ClubRankVerificationTab.tsx",
      "line": 67,
      "content": "console.log('Rank request change:', payload);",
      "context": "65:           },\n66:           payload => {\n67:             console.log('Rank request change:', payload);\n68:             // Reload data when there's a change\n69:             loadRankRequests();"
    },
    {
      "file": "src/components/club/ClubTournamentManagement.tsx",
      "line": 48,
      "content": "console.log('🔧 ClubTournamentManagementInternal rendering...');",
      "context": "46: // Internal component that uses TournamentState\n47: const ClubTournamentManagementInternal: React.FC = () => {\n48:   console.log('🔧 ClubTournamentManagementInternal rendering...');\n49:   const [managementActiveTab, setManagementActiveTab] = useState('create');\n50: "
    },
    {
      "file": "src/components/club/ClubTournamentManagement.tsx",
      "line": 106,
      "content": "console.log(",
      "context": "104:             <TournamentProvider>\n105:               {(() => {\n106:                 console.log(\n107:                   '🎯 About to render EnhancedTournamentForm inside providers'\n108:                 );"
    },
    {
      "file": "src/components/club/ClubTournamentManagement.tsx",
      "line": 113,
      "content": "console.log('❌ Form canceled');",
      "context": "111:                     onSuccess={handleTournamentSuccess}\n112:                     onCancel={() => {\n113:                       console.log('❌ Form canceled');\n114:                     }}\n115:                   />"
    },
    {
      "file": "src/components/club/ClubTournamentManagement.tsx",
      "line": 138,
      "content": "console.log('🔧 ClubTournamentManagement rendering with clubId:', clubId);",
      "context": "136:   clubId,\n137: }) => {\n138:   console.log('🔧 ClubTournamentManagement rendering with clubId:', clubId);\n139: \n140:   try {"
    },
    {
      "file": "src/components/club/RankVerificationTab.tsx",
      "line": 66,
      "content": "console.log('No club profile ID found:', clubProfile);",
      "context": "64:   const loadRankRequests = async () => {\n65:     if (!clubProfile?.id) {\n66:       console.log('No club profile ID found:', clubProfile);\n67:       return;\n68:     }"
    },
    {
      "file": "src/components/club/RankVerificationTab.tsx",
      "line": 72,
      "content": "console.log('Loading rank requests for club:', clubProfile.id);",
      "context": "70:     try {\n71:       setLoading(true);\n72:       console.log('Loading rank requests for club:', clubProfile.id);\n73: \n74:       // For now, let's just set empty requests since rank_verifications table doesn't exist"
    },
    {
      "file": "src/components/club/RankVerificationTab.tsx",
      "line": 76,
      "content": "console.log(",
      "context": "74:       // For now, let's just set empty requests since rank_verifications table doesn't exist\n75:       // This is a placeholder implementation\n76:       console.log(\n77:         'Rank verification feature not implemented - using placeholder'\n78:       );"
    },
    {
      "file": "src/components/club/mobile/ClubProfileMobile.tsx",
      "line": 247,
      "content": "console.log('Club logo failed to load:', club.logo_url);",
      "context": "245:                 className=\"object-cover\"\n246:                 onError={(e) => {\n247:                   console.log('Club logo failed to load:', club.logo_url);\n248:                   e.currentTarget.style.display = 'none';\n249:                 }}"
    },
    {
      "file": "src/components/club/optimized/ClubMembersOptimized.tsx",
      "line": 309,
      "content": "console.log(",
      "context": "307:     setProcessing(requestId);\n308:     try {\n309:       console.log(\n310:         'Starting approval process for user:',\n311:         userId,"
    },
    {
      "file": "src/components/club/optimized/ClubMembersOptimized.tsx",
      "line": 326,
      "content": "console.log('🔧 Processing approval with manual function...');",
      "context": "324: \n325:       // FIXED: Use manual approval function to bypass trigger permission issues\n326:       console.log('🔧 Processing approval with manual function...');\n327: \n328:       // Use the manual approval function instead of direct update"
    },
    {
      "file": "src/components/debug/DebugTournamentComponent.tsx",
      "line": 10,
      "content": "console.log('Tournament ID:', tournamentId);",
      "context": "8:   useEffect(() => {\n9:     console.log('=== SABO32 Tournament Debug ===');\n10:     console.log('Tournament ID:', tournamentId);\n11:     console.log('Loading:', isLoading);\n12:     console.log('Error:', error?.message || null);"
    },
    {
      "file": "src/components/debug/DebugTournamentComponent.tsx",
      "line": 11,
      "content": "console.log('Loading:', isLoading);",
      "context": "9:     console.log('=== SABO32 Tournament Debug ===');\n10:     console.log('Tournament ID:', tournamentId);\n11:     console.log('Loading:', isLoading);\n12:     console.log('Error:', error?.message || null);\n13:     console.log('Matches count:', matches?.length || 0);"
    },
    {
      "file": "src/components/debug/DebugTournamentComponent.tsx",
      "line": 13,
      "content": "console.log('Matches count:', matches?.length || 0);",
      "context": "11:     console.log('Loading:', isLoading);\n12:     console.log('Error:', error?.message || null);\n13:     console.log('Matches count:', matches?.length || 0);\n14:     \n15:     if (matches && matches.length > 0) {"
    },
    {
      "file": "src/components/debug/DebugTournamentComponent.tsx",
      "line": 16,
      "content": "console.log('Sample matches:', matches.slice(0, 3));",
      "context": "14:     \n15:     if (matches && matches.length > 0) {\n16:       console.log('Sample matches:', matches.slice(0, 3));\n17:       \n18:       // Log all unique bracket types"
    },
    {
      "file": "src/components/debug/DebugTournamentComponent.tsx",
      "line": 20,
      "content": "console.log('All bracket types found:', bracketTypes);",
      "context": "18:       // Log all unique bracket types\n19:       const bracketTypes = [...new Set(matches.map(m => m.bracket_type))];\n20:       console.log('All bracket types found:', bracketTypes);\n21:       \n22:       // Group by bracket type"
    },
    {
      "file": "src/components/debug/DebugTournamentComponent.tsx",
      "line": 25,
      "content": "console.log(`- ${type}: ${typeMatches.length} matches`);",
      "context": "23:       bracketTypes.forEach(type => {\n24:         const typeMatches = matches.filter(m => m.bracket_type === type);\n25:         console.log(`- ${type}: ${typeMatches.length} matches`);\n26:       });\n27:     } else {"
    },
    {
      "file": "src/components/debug/DebugTournamentComponent.tsx",
      "line": 28,
      "content": "console.log('No matches found - checking reason...');",
      "context": "26:       });\n27:     } else {\n28:       console.log('No matches found - checking reason...');\n29:     }\n30:   }, [tournamentId, matches, isLoading, error]);"
    },
    {
      "file": "src/components/error/ResponsiveErrorBoundary.tsx",
      "line": 63,
      "content": "console.log('Screen dimensions:', {",
      "context": "61:     console.error('Error caught:', error);\n62:     console.error('Error info:', errorInfo);\n63:     console.log('Screen dimensions:', {\n64:       width: window.innerWidth,\n65:       height: window.innerHeight,"
    },
    {
      "file": "src/components/feed/CommentModal.tsx",
      "line": 150,
      "content": "console.log('Report comment:', commentId);",
      "context": "148:   const handleReportComment = (commentId: string) => {\n149:     // Handle report comment\n150:     console.log('Report comment:', commentId);\n151:   };\n152: "
    },
    {
      "file": "src/components/feed/ShareModal.tsx",
      "line": 111,
      "content": "console.log('Share via direct message');",
      "context": "109:   const handleDirectMessage = () => {\n110:     // Handle direct message sharing\n111:     console.log('Share via direct message');\n112:     onClose();\n113:   };"
    },
    {
      "file": "src/components/layouts/RoleBasedLayout.tsx",
      "line": 48,
      "content": "console.log(",
      "context": "46:   // Club owners get club-specific layout ONLY for management routes\n47:   if (user && isClubOwner && isOwnerManagementRoute) {\n48:     console.log(\n49:       '[RoleBasedLayout] Using ClubResponsiveLayout for owner management'\n50:     );"
    },
    {
      "file": "src/components/layouts/RoleBasedLayout.tsx",
      "line": 55,
      "content": "console.log('[RoleBasedLayout] Using ResponsiveLayout (player/public)');",
      "context": "53: \n54:   // Regular users get standard responsive layout (including club owners viewing public pages)\n55:   console.log('[RoleBasedLayout] Using ResponsiveLayout (player/public)');\n56:   return <ResponsiveLayout>{children}</ResponsiveLayout>;\n57: };"
    },
    {
      "file": "src/components/legacy/CombinedSPALeaderboard.tsx",
      "line": 157,
      "content": "console.log('❌ No user logged in');",
      "context": "155:     // Simplified: Show claim button for all unclaimed legacy entries\n156:     if (!user) {\n157:       console.log('❌ No user logged in');\n158:       return false;\n159:     }"
    },
    {
      "file": "src/components/legacy/CombinedSPALeaderboard.tsx",
      "line": 162,
      "content": "console.log('❌ Entry already registered/claimed:', entry.nick_name);",
      "context": "160: \n161:     if (entry.is_registered) {\n162:       console.log('❌ Entry already registered/claimed:', entry.nick_name);\n163:       return false;\n164:     }"
    },
    {
      "file": "src/components/legacy/CombinedSPALeaderboard.tsx",
      "line": 167,
      "content": "console.log('❌ Entry cannot be claimed:', entry.nick_name);",
      "context": "165: \n166:     if (!entry.can_claim) {\n167:       console.log('❌ Entry cannot be claimed:', entry.nick_name);\n168:       return false;\n169:     }"
    },
    {
      "file": "src/components/legacy/CombinedSPALeaderboard.tsx",
      "line": 172,
      "content": "console.log('❌ Entry has pending claim:', entry.nick_name);",
      "context": "170: \n171:     if (entry.has_pending_claim) {\n172:       console.log('❌ Entry has pending claim:', entry.nick_name);\n173:       return false;\n174:     }"
    },
    {
      "file": "src/components/legacy/CombinedSPALeaderboard.tsx",
      "line": 182,
      "content": "console.log('❌ Not a legacy entry:', entry.nick_name);",
      "context": "180:     }\n181: \n182:     console.log('❌ Not a legacy entry:', entry.nick_name);\n183:     return false;\n184:   };"
    },
    {
      "file": "src/components/legacy/CombinedSPALeaderboard.tsx",
      "line": 187,
      "content": "console.log('🎁 Opening legacy code claim modal for:', entry.nick_name);",
      "context": "185: \n186:   const handleClaimClick = (entry: LeaderboardEntry) => {\n187:     console.log('🎁 Opening legacy code claim modal for:', entry.nick_name);\n188:     setSelectedEntry(entry);\n189:     setIsLegacyCodeModalOpen(true);"
    },
    {
      "file": "src/components/marketplace/MarketplaceItemCard.tsx",
      "line": 188,
      "content": "console.log('Contact seller for item:', item.id);",
      "context": "186:                 e.stopPropagation();\n187:                 // Handle contact seller\n188:                 console.log('Contact seller for item:', item.id);\n189:               }}\n190:             >"
    },
    {
      "file": "src/components/marketplace/MarketplaceItemCard.tsx",
      "line": 199,
      "content": "console.log('Buy now item:', item.id);",
      "context": "197:                 e.stopPropagation();\n198:                 // Handle buy now\n199:                 console.log('Buy now item:', item.id);\n200:               }}\n201:             >"
    },
    {
      "file": "src/components/mobile/MobileHeader.tsx",
      "line": 213,
      "content": "console.log('Avatar failed to load:', contextAvatar || profile?.avatar_url);",
      "context": "211:                       className=\"object-cover\"\n212:                       onError={(e) => {\n213:                         console.log('Avatar failed to load:', contextAvatar || profile?.avatar_url);\n214:                         e.currentTarget.style.display = 'none';\n215:                       }}"
    },
    {
      "file": "src/components/mobile/MobileLeaderboard.tsx",
      "line": 360,
      "content": "console.log('Leaderboard avatar failed to load:', player.avatar_url);",
      "context": "358:                         className=\"object-cover\"\n359:                         onError={(e) => {\n360:                           console.log('Leaderboard avatar failed to load:', player.avatar_url);\n361:                           e.currentTarget.style.display = 'none';\n362:                         }}"
    },
    {
      "file": "src/components/mobile/SocialProfileCard.tsx",
      "line": 58,
      "content": "console.log('🧪 Using mock data for development testing');",
      "context": "56:       // Development mode: Use mock data for testing with user-* IDs\n57:       if (process.env.NODE_ENV === 'development' && userId.startsWith('user-')) {\n58:         console.log('🧪 Using mock data for development testing');\n59:         \n60:         const mockProfiles = {"
    },
    {
      "file": "src/components/mobile/common/MobileFloatingActionButton.tsx",
      "line": 26,
      "content": "action: () => console.log('Challenge created'),",
      "context": "24:       icon: Swords,\n25:       label: 'Thách đấu',\n26:       action: () => console.log('Challenge created'),\n27:       color: 'bg-orange-500 hover:bg-orange-600',\n28:     },"
    },
    {
      "file": "src/components/mobile/common/MobileFloatingActionButton.tsx",
      "line": 32,
      "content": "action: () => console.log('Tournament created'),",
      "context": "30:       icon: Trophy,\n31:       label: 'Tạo giải',\n32:       action: () => console.log('Tournament created'),\n33:       color: 'bg-purple-500 hover:bg-purple-600',\n34:     },"
    },
    {
      "file": "src/components/mobile/common/MobileFloatingActionButton.tsx",
      "line": 38,
      "content": "action: () => console.log('Share content'),",
      "context": "36:       icon: Camera,\n37:       label: 'Chia sẻ',\n38:       action: () => console.log('Share content'),\n39:       color: 'bg-green-500 hover:bg-green-600',\n40:     },"
    },
    {
      "file": "src/components/modals/ImprovedCreateChallengeModal.tsx",
      "line": 266,
      "content": "console.log('🕐 Timezone conversion:', {",
      "context": "264:         scheduledTimeUTC = convertVietnamToUTC(formData.scheduled_time);\n265:         \n266:         console.log('🕐 Timezone conversion:', {\n267:           userInput: formData.scheduled_time,\n268:           convertedUTC: scheduledTimeUTC"
    },
    {
      "file": "src/components/modals/ImprovedCreateChallengeModal.tsx",
      "line": 289,
      "content": "console.log('🚀 [ImprovedCreateChallengeModal] Sending challenge data:', {",
      "context": "287:       };\n288: \n289:       console.log('🚀 [ImprovedCreateChallengeModal] Sending challenge data:', {\n290:         ...challengeData,\n291:         location_check: challengeData.location ? '✅ Has location' : '❌ Missing location',"
    },
    {
      "file": "src/components/navigation/QuickActions.tsx",
      "line": 29,
      "content": "action: () => console.log('Create tournament'),",
      "context": "27:       label: 'New Tournament',\n28:       icon: Trophy,\n29:       action: () => console.log('Create tournament'),\n30:       variant: 'tournament'\n31:     },"
    },
    {
      "file": "src/components/navigation/QuickActions.tsx",
      "line": 36,
      "content": "action: () => console.log('Join challenge'),",
      "context": "34:       label: 'Join Challenge',\n35:       icon: Target,\n36:       action: () => console.log('Join challenge'),\n37:       variant: 'challenge'\n38:     },"
    },
    {
      "file": "src/components/navigation/QuickActions.tsx",
      "line": 43,
      "content": "action: () => console.log('Find players'),",
      "context": "41:       label: 'Find Players',\n42:       icon: Users,\n43:       action: () => console.log('Find players'),\n44:       variant: 'secondary'\n45:     },"
    },
    {
      "file": "src/components/navigation/QuickActions.tsx",
      "line": 50,
      "content": "action: () => console.log('View schedule'),",
      "context": "48:       label: 'Schedule',\n49:       icon: Calendar,\n50:       action: () => console.log('View schedule'),\n51:       variant: 'secondary'\n52:     }"
    },
    {
      "file": "src/components/navigation/QuickActions.tsx",
      "line": 59,
      "content": "action: () => console.log('Open search')",
      "context": "57:       id: 'search',\n58:       icon: Search,\n59:       action: () => console.log('Open search')\n60:     },\n61:     {"
    },
    {
      "file": "src/components/navigation/QuickActions.tsx",
      "line": 64,
      "content": "action: () => console.log('Open notifications'),",
      "context": "62:       id: 'notifications',\n63:       icon: Bell,\n64:       action: () => console.log('Open notifications'),\n65:       badge: 3\n66:     },"
    },
    {
      "file": "src/components/navigation/QuickActions.tsx",
      "line": 70,
      "content": "action: () => console.log('Open settings')",
      "context": "68:       id: 'settings',\n69:       icon: Settings,\n70:       action: () => console.log('Open settings')\n71:     }\n72:   ];"
    },
    {
      "file": "src/components/navigation/QuickActions.tsx",
      "line": 97,
      "content": "onClick={() => console.log('Open quick actions menu')}",
      "context": "95:           variant=\"secondary\"\n96:           size=\"sm\"\n97:           onClick={() => console.log('Open quick actions menu')}\n98:           className=\"flex items-center space-x-2\"\n99:         >"
    },
    {
      "file": "src/components/notifications/ChallengeNotificationBell.tsx",
      "line": 171,
      "content": "console.log('New notification received:', payload);",
      "context": "169:         },\n170:         (payload) => {\n171:           console.log('New notification received:', payload);\n172:           const newNotification = payload.new as Notification;\n173:           "
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 57,
      "content": "console.log('🔄 Force refreshing notification state...');",
      "context": "55:   // Force refresh mechanism to fix badge sync issues\n56:   const forceRefresh = async () => {\n57:     console.log('🔄 Force refreshing notification state...');\n58:     \n59:     // Clear all local state"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 74,
      "content": "console.log('🎯 UnifiedNotificationBell mounted, force refreshing...');",
      "context": "72:   useEffect(() => {\n73:     if (user) {\n74:       console.log('🎯 UnifiedNotificationBell mounted, force refreshing...');\n75:       forceRefresh();\n76:     }"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 147,
      "content": "console.log('Note: localStorage clear failed (no cache found)');",
      "context": "145:           localStorage.removeItem(`notifications_${user.id}`);\n146:         } catch (e) {\n147:           console.log('Note: localStorage clear failed (no cache found)');\n148:         }\n149:         "
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 172,
      "content": "console.log('⚠️  User not authenticated - clearing badge');",
      "context": "170:           const { data: authData } = await supabase.auth.getUser();\n171:           if (!authData.user) {\n172:             console.log('⚠️  User not authenticated - clearing badge');\n173:             setNotifications([]);\n174:             setUnreadCount(0);"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 187,
      "content": "console.log(`📊 Notification fetch: Total=${notificationData.length}, Unread=${newUnreadCount}`,",
      "context": "185:       const newUnreadCount = unreadNotifications.length;\n186:       \n187:       console.log(`📊 Notification fetch: Total=${notificationData.length}, Unread=${newUnreadCount}`, \n188:         forceRefresh ? '(FORCED REFRESH)' : '');\n189:       setUnreadCount(newUnreadCount);"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 342,
      "content": "console.log('New notification received:', payload);",
      "context": "340:             (payload) => {\n341:               try {\n342:                 console.log('New notification received:', payload);\n343:                 const newNotification = payload.new as Notification;\n344:                 "
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 349,
      "content": "console.log('Duplicate notification detected, skipping...');",
      "context": "347:                   const exists = prev.some(n => n.id === newNotification.id);\n348:                   if (exists) {\n349:                     console.log('Duplicate notification detected, skipping...');\n350:                     return prev;\n351:                   }"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 379,
      "content": "console.log('Notification updated:', payload);",
      "context": "377:             (payload) => {\n378:               try {\n379:                 console.log('Notification updated:', payload);\n380:                 const updatedNotification = payload.new as Notification;\n381:                 "
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 431,
      "content": "console.log('🔄 Window focused - gentle refresh (throttled)');",
      "context": "429:       const now = Date.now();\n430:       if (user?.id && (now - lastFocusTime) > THROTTLE_DELAY) {\n431:         console.log('🔄 Window focused - gentle refresh (throttled)');\n432:         lastFocusTime = now;\n433:         fetchNotifications(false); // Gentle refresh, no force"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 440,
      "content": "console.log('🔄 Page became visible - gentle refresh (throttled)');",
      "context": "438:       const now = Date.now();\n439:       if (!document.hidden && user?.id && (now - lastFocusTime) > THROTTLE_DELAY) {\n440:         console.log('🔄 Page became visible - gentle refresh (throttled)');\n441:         lastFocusTime = now;\n442:         fetchNotifications(false); // Gentle refresh, no force"
    },
    {
      "file": "src/components/notifications/UnifiedNotificationBell.tsx",
      "line": 460,
      "content": "console.log('⏰ Periodic refresh - gentle refresh only');",
      "context": "458: \n459:     const refreshInterval = setInterval(() => {\n460:       console.log('⏰ Periodic refresh - gentle refresh only');\n461:       fetchNotifications(false); // Gentle refresh only, no force\n462:     }, 180000); // Refresh every 3 minutes instead of 30 seconds"
    },
    {
      "file": "src/components/performance/CLSMonitor.tsx",
      "line": 40,
      "content": "console.warn('🚨 Significant layout shift detected:', {",
      "context": "38:           // Log significant layout shifts\n39:           if (shiftValue > threshold) {\n40:             console.warn('🚨 Significant layout shift detected:', {\n41:               value: shiftValue.toFixed(4),\n42:               cumulativeValue: clsValue.toFixed(4),"
    },
    {
      "file": "src/components/performance/CLSMonitor.tsx",
      "line": 64,
      "content": "console.log(`📊 Final CLS Score: ${clsValue.toFixed(4)}`, {",
      "context": "62:     const reportCLS = () => {\n63:       if (clsValue > 0) {\n64:         console.log(`📊 Final CLS Score: ${clsValue.toFixed(4)}`, {\n65:           rating:\n66:             clsValue <= 0.1"
    },
    {
      "file": "src/components/profile/EditableProfileForm.tsx",
      "line": 158,
      "content": "console.log('🔄 Starting profile update...', {",
      "context": "156:     }\n157: \n158:     console.log('🔄 Starting profile update...', {\n159:       userId: user.id,\n160:       formData,"
    },
    {
      "file": "src/components/profile/ProfileTabs.tsx",
      "line": 19,
      "content": "console.log('ProfileTabs rendered with userRole:', userRole);",
      "context": "17:   // Debug logging\n18:   useEffect(() => {\n19:     console.log('ProfileTabs rendered with userRole:', userRole);\n20:     console.log('showClubTab:', showClubTab);\n21:   }, [userRole]);"
    },
    {
      "file": "src/components/profile/ProfileTabs.tsx",
      "line": 20,
      "content": "console.log('showClubTab:', showClubTab);",
      "context": "18:   useEffect(() => {\n19:     console.log('ProfileTabs rendered with userRole:', userRole);\n20:     console.log('showClubTab:', showClubTab);\n21:   }, [userRole]);\n22: "
    },
    {
      "file": "src/components/profile/UnifiedProfileForm.tsx",
      "line": 75,
      "content": "console.log('Unified profile avatar failed to load:', profile.avatar_url);",
      "context": "73:                   className=\"object-cover\"\n74:                   onError={(e) => {\n75:                     console.log('Unified profile avatar failed to load:', profile.avatar_url);\n76:                     e.currentTarget.style.display = 'none';\n77:                   }}"
    },
    {
      "file": "src/components/pwa/PWAFeatures.tsx",
      "line": 75,
      "content": "console.log('❌ PWA: User dismissed the install prompt');",
      "context": "73:         onInstall?.();\n74:       } else {\n75:         console.log('❌ PWA: User dismissed the install prompt');\n76:         onDismiss?.();\n77:       }"
    },
    {
      "file": "src/components/ranking/SPAPointsCard.tsx",
      "line": 72,
      "content": "console.log(",
      "context": "70: \n71:     const fetchTransactions = async () => {\n72:       console.log(\n73:         '🔍 [SPAPointsCard] Fetching SPA transactions for user:',\n74:         user.id"
    },
    {
      "file": "src/components/ranking/SPAPointsCard.tsx",
      "line": 93,
      "content": "console.log(",
      "context": "91:         }\n92: \n93:         console.log(\n94:           '✅ [SPAPointsCard] Fetched',\n95:           data?.length || 0,"
    },
    {
      "file": "src/components/ranking/SPAPointsCard.tsx",
      "line": 136,
      "content": "console.log(",
      "context": "134:         },\n135:         payload => {\n136:           console.log(\n137:             '🆕 [SPAPointsCard] New SPA transaction received:',\n138:             payload"
    },
    {
      "file": "src/components/ranking/SPAPointsCard.tsx",
      "line": 156,
      "content": "console.log('📡 [SPAPointsCard] Subscription status:', status);",
      "context": "154:       )\n155:       .subscribe(status => {\n156:         console.log('📡 [SPAPointsCard] Subscription status:', status);\n157:       });\n158: "
    },
    {
      "file": "src/components/security/SecuritySettings.tsx",
      "line": 64,
      "content": "// ...removed console.log('Password changed')",
      "context": "62:     if (newPassword === confirmPassword && newPassword.length >= 8) {\n63:       // Handle password change\n64:       // ...removed console.log('Password changed')\n65:       setCurrentPassword('');\n66:       setNewPassword('');"
    },
    {
      "file": "src/components/tournament/BracketVisualization.tsx",
      "line": 74,
      "content": "console.log('🔄 Profile updated, refreshing bracket...');",
      "context": "72:         },\n73:         () => {\n74:           console.log('🔄 Profile updated, refreshing bracket...');\n75:           fetchBracketData();\n76:         }"
    },
    {
      "file": "src/components/tournament/BracketVisualization.tsx",
      "line": 86,
      "content": "console.log('🔄 Match updated, refreshing bracket...');",
      "context": "84:         },\n85:         () => {\n86:           console.log('🔄 Match updated, refreshing bracket...');\n87:           fetchBracketData();\n88:         }"
    },
    {
      "file": "src/components/tournament/BracketVisualization.tsx",
      "line": 93,
      "content": "console.log('🔌 Unsubscribing from bracket updates');",
      "context": "91: \n92:     return () => {\n93:       console.log('🔌 Unsubscribing from bracket updates');\n94:       channel.unsubscribe();\n95:     };"
    },
    {
      "file": "src/components/tournament/BracketVisualization.tsx",
      "line": 102,
      "content": "console.log('🔍 Fetching bracket data for tournament:', tournamentId);",
      "context": "100:       setLoading(true);\n101: \n102:       console.log('🔍 Fetching bracket data for tournament:', tournamentId);\n103: \n104:       // Get tournament data first"
    },
    {
      "file": "src/components/tournament/DoubleEliminationMatchCard.tsx",
      "line": 411,
      "content": "console.log(",
      "context": "409: \n410:                 try {\n411:                   console.log(\n412:                     '🎯 [DoubleEliminationMatchCard] Submitting DE score:',\n413:                     {"
    },
    {
      "file": "src/components/tournament/DoubleEliminationMatchCard.tsx",
      "line": 459,
      "content": "console.log(",
      "context": "457:                   }\n458: \n459:                   console.log(\n460:                     '✅ [DoubleEliminationMatchCard] RPC Response:',\n461:                     data"
    },
    {
      "file": "src/components/tournament/DoubleEliminationMatchCard.tsx",
      "line": 485,
      "content": "console.log(",
      "context": "483:                   ) {\n484:                     const advancement = data.advancement as any;\n485:                     console.log(\n486:                       '🎯 [DoubleEliminationMatchCard] Advancement result:',\n487:                       advancement"
    },
    {
      "file": "src/components/tournament/DoubleEliminationMatchCard.tsx",
      "line": 504,
      "content": "console.log(",
      "context": "502:                   // Force a small delay to allow DB changes to propagate\n503:                   setTimeout(() => {\n504:                     console.log(\n505:                       '🔄 [DoubleEliminationMatchCard] Database should have updated, realtime should refresh'\n506:                     );"
    },
    {
      "file": "src/components/tournament/EnhancedMatchCard.tsx",
      "line": 80,
      "content": "console.log('🔥 FORCE RENDER - EnhancedMatchCard:', {",
      "context": "78:   const canInputScore = isClubOwner && match.player1_id && match.player2_id;\n79: \n80:   console.log('🔥 FORCE RENDER - EnhancedMatchCard:', {\n81:     matchId: match.id,\n82:     status: match.status,"
    },
    {
      "file": "src/components/tournament/EnhancedMatchCard.tsx",
      "line": 419,
      "content": "console.log(",
      "context": "417: \n418:                 try {\n419:                   console.log(\n420:                     '🎯 [EnhancedMatchCard] Submitting match score via RPC:',\n421:                     {"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 291,
      "content": "console.log(",
      "context": "289: \n290:     try {\n291:       console.log(\n292:         '🔍 Fetching pending matches for tournament:',\n293:         selectedTournament"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 328,
      "content": "console.log('📊 Raw matches data:', matches);",
      "context": "326:       if (error) throw error;\n327: \n328:       console.log('📊 Raw matches data:', matches);\n329:       console.log(\n330:         '📊 Number of unassigned matches found:',"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 329,
      "content": "console.log(",
      "context": "327: \n328:       console.log('📊 Raw matches data:', matches);\n329:       console.log(\n330:         '📊 Number of unassigned matches found:',\n331:         matches?.length || 0"
    },
    {
      "file": "src/components/tournament/EnhancedTableManager.tsx",
      "line": 438,
      "content": "console.log('🚀 Starting auto-assignment with:', {",
      "context": "436:       }\n437: \n438:       console.log('🚀 Starting auto-assignment with:', {\n439:         tournament_id: selectedTournament,\n440:         club_id: clubId,"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 78,
      "content": "// console.log('🎯 EnhancedTournamentForm rendering...');",
      "context": "76:   onCancel,\n77: }) => {\n78:   // console.log('🎯 EnhancedTournamentForm rendering...');\n79:   const navigate = useNavigate();\n80:   const {"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 98,
      "content": "//   console.log('🏆 [EnhancedTournamentForm] tournamentPrizes state changed:', tournamentPrizes.length, 'prizes');",
      "context": "96:   // Debug: Log when tournamentPrizes state changes\n97:   // useEffect(() => {\n98:   //   console.log('🏆 [EnhancedTournamentForm] tournamentPrizes state changed:', tournamentPrizes.length, 'prizes');\n99:   //   if (tournamentPrizes.length > 0) {\n100:   //     console.log('🏆 [EnhancedTournamentForm] First prize:', tournamentPrizes[0]);"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 100,
      "content": "//     console.log('🏆 [EnhancedTournamentForm] First prize:', tournamentPrizes[0]);",
      "context": "98:   //   console.log('🏆 [EnhancedTournamentForm] tournamentPrizes state changed:', tournamentPrizes.length, 'prizes');\n99:   //   if (tournamentPrizes.length > 0) {\n100:   //     console.log('🏆 [EnhancedTournamentForm] First prize:', tournamentPrizes[0]);\n101:   //   }\n102:   // }, [tournamentPrizes]);"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 128,
      "content": "console.log('📋 Restored form draft from localStorage');",
      "context": "126:         const draftData = JSON.parse(savedDraft);\n127:         setFormDraft(draftData);\n128:         console.log('📋 Restored form draft from localStorage');\n129:       } catch (err) {\n130:         console.error('❌ Error parsing saved draft:', err);"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 143,
      "content": "console.log('🏁 Form initialized with:', initialData ? 'data' : 'empty');",
      "context": "141:         form.reset(initialData);\n142:         setFormInitialized(true);\n143:         console.log('🏁 Form initialized with:', initialData ? 'data' : 'empty');\n144:       }\n145:     }"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 207,
      "content": "// console.log('🔥 SUBMIT BUTTON CLICKED');",
      "context": "205:     e?: React.FormEvent\n206:   ) => {\n207:     // console.log('🔥 SUBMIT BUTTON CLICKED');\n208:     // console.log('📊 Form State:', {\n209:     //   isSubmitting,"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 208,
      "content": "// console.log('📊 Form State:', {",
      "context": "206:   ) => {\n207:     // console.log('🔥 SUBMIT BUTTON CLICKED');\n208:     // console.log('📊 Form State:', {\n209:     //   isSubmitting,\n210:     //   formSubmitting,"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 214,
      "content": "// console.log('🎯 handleSubmit called with data:', data);",
      "context": "212:     //   formErrors: form.formState.errors,\n213:     // });\n214:     // console.log('🎯 handleSubmit called with data:', data);\n215:     // console.log('🔍 DEBUG Form Data:', {\n216:     //   tournament_start: data.tournament_start,"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 215,
      "content": "// console.log('🔍 DEBUG Form Data:', {",
      "context": "213:     // });\n214:     // console.log('🎯 handleSubmit called with data:', data);\n215:     // console.log('🔍 DEBUG Form Data:', {\n216:     //   tournament_start: data.tournament_start,\n217:     //   tournament_end: data.tournament_end,"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 222,
      "content": "// console.log('🔍 DEBUG Tournament State:', {",
      "context": "220:     //   name: data.name\n221:     // });\n222:     // console.log('🔍 DEBUG Tournament State:', {\n223:     //   tournament_start: tournament?.tournament_start,\n224:     //   tournament_end: tournament?.tournament_end,"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 229,
      "content": "// console.log('🏆 Tournament prizes in state:', tournamentPrizes.length, 'prizes');",
      "context": "227:     //   name: tournament?.name\n228:     // });\n229:     // console.log('🏆 Tournament prizes in state:', tournamentPrizes.length, 'prizes');\n230:     // console.log('⏳ Starting form submission...');\n231: "
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 230,
      "content": "// console.log('⏳ Starting form submission...');",
      "context": "228:     // });\n229:     // console.log('🏆 Tournament prizes in state:', tournamentPrizes.length, 'prizes');\n230:     // console.log('⏳ Starting form submission...');\n231: \n232:     // Prevent default form submission"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 240,
      "content": "console.log('🔍 Validating tournament data...');",
      "context": "238:     try {\n239:       setIsSubmitting(true);\n240:       console.log('🔍 Validating tournament data...');\n241: \n242:       const validationResult = validateTournament();"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 243,
      "content": "console.log('🔍 Form validation result:', validationResult);",
      "context": "241: \n242:       const validationResult = validateTournament();\n243:       console.log('🔍 Form validation result:', validationResult);\n244: \n245:       if (!validationResult) {"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 263,
      "content": "console.log('🏆 Creating tournament...');",
      "context": "261:       }\n262: \n263:       console.log('🏆 Creating tournament...');\n264: \n265:       let result;"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 267,
      "content": "console.log('📝 Updating existing tournament:', tournamentId);",
      "context": "265:       let result;\n266:       if (mode === 'edit' && tournamentId) {\n267:         console.log('📝 Updating existing tournament:', tournamentId);\n268:         result = await updateExistingTournament(tournamentId);\n269:       } else {"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 270,
      "content": "console.log('🆕 Creating new tournament...');",
      "context": "268:         result = await updateExistingTournament(tournamentId);\n269:       } else {\n270:         console.log('🆕 Creating new tournament...');\n271:         \n272:         console.log('🆕 Creating new tournament with FULL prize data...');"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 272,
      "content": "console.log('🆕 Creating new tournament with FULL prize data...');",
      "context": "270:         console.log('🆕 Creating new tournament...');\n271:         \n272:         console.log('🆕 Creating new tournament with FULL prize data...');\n273:         result = await createTournament();\n274: "
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 295,
      "content": "console.log(",
      "context": "293:         if (result && result.id) {\n294:           try {\n295:             console.log(\n296:               '🏆 Creating tournament results template for:',\n297:               result.id"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 312,
      "content": "console.log(",
      "context": "310:               toast.error('Giải đấu đã tạo nhưng có lỗi khi tạo bảng kết quả');\n311:             } else {\n312:               console.log(\n313:                 '✅ Tournament results template created:',\n314:                 templateResult"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 334,
      "content": "console.log('🗑️ Cleared form draft from localStorage');",
      "context": "332:         if (mode === 'create') {\n333:           localStorage.removeItem('tournament-form-draft');\n334:           console.log('🗑️ Cleared form draft from localStorage');\n335:         }\n336: "
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 504,
      "content": "console.log('🔥 Form onSubmit triggered');",
      "context": "502:           e.preventDefault();\n503:           e.stopPropagation();\n504:           console.log('🔥 Form onSubmit triggered');\n505:           form.handleSubmit(data => handleSubmit(data, e))(e);\n506:         }}"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1036,
      "content": "console.log('🚀 TẠO NGAY BUTTON CLICKED');",
      "context": "1034:               type='button'\n1035:               onClick={async () => {\n1036:                 console.log('🚀 TẠO NGAY BUTTON CLICKED');\n1037:                 const formData = form.getValues();\n1038:                 console.log('📊 Form data:', formData);"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1038,
      "content": "console.log('📊 Form data:', formData);",
      "context": "1036:                 console.log('🚀 TẠO NGAY BUTTON CLICKED');\n1037:                 const formData = form.getValues();\n1038:                 console.log('📊 Form data:', formData);\n1039:                 console.log('🏆 Current tournamentPrizes state:', tournamentPrizes.length, 'prizes');\n1040: "
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1039,
      "content": "console.log('🏆 Current tournamentPrizes state:', tournamentPrizes.length, 'prizes');",
      "context": "1037:                 const formData = form.getValues();\n1038:                 console.log('📊 Form data:', formData);\n1039:                 console.log('🏆 Current tournamentPrizes state:', tournamentPrizes.length, 'prizes');\n1040: \n1041:                 try {"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1065,
      "content": "console.log('🏆 Creating tournament...');",
      "context": "1063: \n1064:                   // 1. TẠO TOURNAMENT TRƯỚC\n1065:                   console.log('🏆 Creating tournament...');\n1066:                   const { data, error } = await supabase\n1067:                     .from('tournaments')"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1104,
      "content": "console.log('🏆 Creating tournament prizes for:', createdTournament.id);",
      "context": "1102: \n1103:                   // 2. TẠO TOURNAMENT PRIZES từ state hoặc fallback\n1104:                   console.log('🏆 Creating tournament prizes for:', createdTournament.id);\n1105:                   \n1106:                   let defaultPrizes = [];"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1127,
      "content": "console.log('⚠️ No prize data from UnifiedPrizesManager, using fallback');",
      "context": "1125:                   } else {\n1126:                     // FALLBACK: Tạo data mặc định nếu không có\n1127:                     console.log('⚠️ No prize data from UnifiedPrizesManager, using fallback');\n1128:                     const prizePool = formData.prize_pool || 0;\n1129:                     const distribution = ["
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1169,
      "content": "console.log('🏆 Inserting', defaultPrizes.length, 'prize records...');",
      "context": "1167:                   }\n1168:                   \n1169:                   console.log('🏆 Inserting', defaultPrizes.length, 'prize records...');\n1170:                   \n1171:                   // Insert using SERVICE ROLE to bypass RLS"
    },
    {
      "file": "src/components/tournament/EnhancedTournamentForm.tsx",
      "line": 1183,
      "content": "console.log('🔍 Prize creation response status:', response.status);",
      "context": "1181:                   });\n1182:                   \n1183:                   console.log('🔍 Prize creation response status:', response.status);\n1184:                   \n1185:                   if (!response.ok) {"
    },
    {
      "file": "src/components/tournament/ForceCompleteTournamentButton.tsx",
      "line": 42,
      "content": "console.log(",
      "context": "40: \n41:   const calculateTournamentResults = async () => {\n42:     console.log(\n43:       '🏆 Starting tournament results calculation for:',\n44:       tournamentId"
    },
    {
      "file": "src/components/tournament/ForceCompleteTournamentButton.tsx",
      "line": 74,
      "content": "console.log(",
      "context": "72:           `🎉 Đã tính toán kết quả cho ${result.results_created} người chơi`\n73:         );\n74:         console.log(\n75:           `🏆 Champion: ${result.champion_id}, Runner-up: ${result.runner_up_id}`\n76:         );"
    },
    {
      "file": "src/components/tournament/ForceCompleteTournamentButton.tsx",
      "line": 77,
      "content": "console.log(`📊 Tournament multiplier: ${result.multiplier}x`);",
      "context": "75:           `🏆 Champion: ${result.champion_id}, Runner-up: ${result.runner_up_id}`\n76:         );\n77:         console.log(`📊 Tournament multiplier: ${result.multiplier}x`);\n78:       } else {\n79:         throw new Error('Unknown error occurred during calculation');"
    },
    {
      "file": "src/components/tournament/ForceCompleteTournamentButton.tsx",
      "line": 91,
      "content": "console.log(`🎯 Force completing tournament: ${tournamentId}`);",
      "context": "89:     try {\n90:       setIsCompleting(true);\n91:       console.log(`🎯 Force completing tournament: ${tournamentId}`);\n92: \n93:       // The new function handles both result calculation and status update"
    },
    {
      "file": "src/components/tournament/ForceStartTournamentButton.tsx",
      "line": 49,
      "content": "console.log(",
      "context": "47: \n48:   if (!canForceStart) {\n49:     console.log(\n50:       '🔥 ForceStartTournamentButton: Not showing because status is',\n51:       currentStatus"
    },
    {
      "file": "src/components/tournament/MatchManagement.tsx",
      "line": 93,
      "content": "console.log(",
      "context": "91:           : editingMatch.player2_id;\n92: \n93:       console.log(\n94:         '🏆 [MatchManagement] Updating match with auto-advancement:',\n95:         {"
    },
    {
      "file": "src/components/tournament/MatchManagement.tsx",
      "line": 119,
      "content": "console.log(",
      "context": "117: \n118:       // The database trigger will automatically advance the winner\n119:       console.log(\n120:         '✅ [MatchManagement] Match updated successfully, auto-advancement triggered by database'\n121:       );"
    },
    {
      "file": "src/components/tournament/RewardsEditModal.tsx",
      "line": 218,
      "content": "console.log('🔍 RewardsEditModal - Saving data:', formData);",
      "context": "216:       const formData = getValues();\n217: \n218:       console.log('🔍 RewardsEditModal - Saving data:', formData);\n219: \n220:       // Validate total prize vs individual prizes"
    },
    {
      "file": "src/components/tournament/SimpleRegistrationModal.tsx",
      "line": 46,
      "content": "console.log(",
      "context": "44: \n45:     try {\n46:       console.log(\n47:         '💵 Processing cash registration for tournament:',\n48:         tournament.id"
    },
    {
      "file": "src/components/tournament/SingleEliminationMatchCard.tsx",
      "line": 327,
      "content": "console.log('🎯 Updating score for match:', {",
      "context": "325:                   );\n326: \n327:                   console.log('🎯 Updating score for match:', {\n328:                     matchId: match.id,\n329:                     score1,"
    },
    {
      "file": "src/components/tournament/TournamentBracket.tsx",
      "line": 58,
      "content": "console.log('🎯 Tournament Type Detection:', {",
      "context": "56: \n57:   // Conditional rendering based on tournament type\n58:   console.log('🎯 Tournament Type Detection:', {\n59:     tournamentType: tournament.tournament_type,\n60:     name: tournament.name,"
    },
    {
      "file": "src/components/tournament/TournamentBracket.tsx",
      "line": 69,
      "content": "console.log('🎯 Enhanced Tournament Type Detection:', {",
      "context": "67:     'single_elimination';\n68: \n69:   console.log('🎯 Enhanced Tournament Type Detection:', {\n70:     originalType: tournament.tournament_type,\n71:     normalizedType: tournamentType,"
    },
    {
      "file": "src/components/tournament/TournamentBracket.tsx",
      "line": 80,
      "content": "console.log(",
      "context": "78:     tournamentType === 'single_elimination'\n79:   ) {\n80:     console.log(\n81:       '✅ Rendering Single Elimination Bracket for:',\n82:       tournament.name"
    },
    {
      "file": "src/components/tournament/TournamentBracket.tsx",
      "line": 95,
      "content": "console.log(",
      "context": "93:     tournamentType === 'double_elimination'\n94:   ) {\n95:     console.log(\n96:       '✅ Rendering SABO Double Elimination Bracket for:',\n97:       tournament.name"
    },
    {
      "file": "src/components/tournament/TournamentBracket.tsx",
      "line": 108,
      "content": "console.log(",
      "context": "106:   } else {\n107:     // Fallback - default to Single Elimination for better compatibility\n108:     console.log(\n109:       '⚠️ Unknown tournament type, defaulting to Single Elimination for:',\n110:       tournament.name"
    },
    {
      "file": "src/components/tournament/TournamentCompletionButton.tsx",
      "line": 36,
      "content": "console.log(`🎯 Manually completing tournament: ${tournamentId}`);",
      "context": "34:     try {\n35:       setIsCompleting(true);\n36:       console.log(`🎯 Manually completing tournament: ${tournamentId}`);\n37: \n38:       toast.info('Đang xử lý hoàn thành giải đấu...');"
    },
    {
      "file": "src/components/tournament/TournamentDataSyncButton.tsx",
      "line": 35,
      "content": "console.log(`🔄 Triggering tournament sync for: ${tournamentId}`);",
      "context": "33: \n34:     try {\n35:       console.log(`🔄 Triggering tournament sync for: ${tournamentId}`);\n36: \n37:       const { data, error } = await supabase.functions.invoke("
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 564,
      "content": "console.log('🎯 Using SABO Tournament Engine for advancement');",
      "context": "562:       try {\n563:         if (selectedTournament?.tournament_type === 'double_elimination') {\n564:           console.log('🎯 Using SABO Tournament Engine for advancement');\n565:           \n566:           // Get match data for the advancement"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 578,
      "content": "console.log('⚠️ SABO Tournament Engine advancement issues:', result.message);",
      "context": "576:               console.log('✅ SABO Tournament Engine advanced successfully:', result);\n577:             } else {\n578:               console.log('⚠️ SABO Tournament Engine advancement issues:', result.message);\n579:             }\n580:           }"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 697,
      "content": "console.log('🔥 Participants loaded:', participants);",
      "context": "695:       }\n696:       \n697:       console.log('🔥 Participants loaded:', participants);\n698:       setTournamentParticipants(participants || []);\n699:       setParticipantsModalOpen(true);"
    },
    {
      "file": "src/components/tournament/TournamentManagementHub.tsx",
      "line": 1589,
      "content": "console.log('Trying fallback bracket generation...');",
      "context": "1587:                                          console.error('Edge function error:', error);\n1588:                                          // Try fallback\n1589:                                          console.log('Trying fallback bracket generation...');\n1590:                                          const { generateBracketFallback } = await import('@/utils/bracketFallback');\n1591:                                          result = await generateBracketFallback(tournamentId, 'elo_based');"
    },
    {
      "file": "src/components/tournament/TournamentPlayerAvatar.tsx",
      "line": 19,
      "content": "console.log('🏆 TournamentPlayerAvatar render for playerId:', playerId);",
      "context": "17:   showRank = true,\n18: }) => {\n19:   console.log('🏆 TournamentPlayerAvatar render for playerId:', playerId);\n20: \n21:   // Don't render anything if no playerId"
    },
    {
      "file": "src/components/tournament/TournamentPlayerAvatar.tsx",
      "line": 23,
      "content": "console.log('⚠️ No playerId provided');",
      "context": "21:   // Don't render anything if no playerId\n22:   if (!playerId) {\n23:     console.log('⚠️ No playerId provided');\n24:     return (\n25:       <div"
    },
    {
      "file": "src/components/tournament/TournamentPlayerAvatar.tsx",
      "line": 41,
      "content": "console.log('🎾 Fetching player data for:', playerId);",
      "context": "39:     queryKey: ['tournament-player', playerId],\n40:     queryFn: async () => {\n41:       console.log('🎾 Fetching player data for:', playerId);\n42: \n43:       // Fetch user profile data"
    },
    {
      "file": "src/components/tournament/TournamentPlayerAvatar.tsx",
      "line": 57,
      "content": "console.log('👤 Profile data:', profile);",
      "context": "55:       }\n56: \n57:       console.log('👤 Profile data:', profile);\n58: \n59:       // Fetch player ranking data"
    },
    {
      "file": "src/components/tournament/TournamentPlayerAvatar.tsx",
      "line": 70,
      "content": "console.log('📊 Ranking data:', ranking);",
      "context": "68:       }\n69: \n70:       console.log('📊 Ranking data:', ranking);\n71: \n72:       const result = {"
    },
    {
      "file": "src/components/tournament/TournamentPlayerAvatar.tsx",
      "line": 159,
      "content": "console.log('⏳ Loading player data for:', playerId);",
      "context": "157:   // Loading state\n158:   if (isLoading) {\n159:     console.log('⏳ Loading player data for:', playerId);\n160:     return (\n161:       <div"
    },
    {
      "file": "src/components/tournament/TournamentPlayerAvatar.tsx",
      "line": 181,
      "content": "console.log('🎨 Rendering avatar for:', playerId, 'data:', playerData);",
      "context": "179:   }\n180: \n181:   console.log('🎨 Rendering avatar for:', playerId, 'data:', playerData);\n182: \n183:   return ("
    },
    {
      "file": "src/components/tournament/TournamentRealTimeSync.tsx",
      "line": 26,
      "content": "console.log(",
      "context": "24:     if (!tournamentId) return;\n25: \n26:     console.log(\n27:       '🔄 Setting up comprehensive real-time sync for tournament:',\n28:       tournamentId"
    },
    {
      "file": "src/components/tournament/TournamentRealTimeSync.tsx",
      "line": 43,
      "content": "console.log('🏆 Tournament update:', payload);",
      "context": "41:         },\n42:         payload => {\n43:           console.log('🏆 Tournament update:', payload);\n44:           setLastUpdate(new Date());\n45:           onTournamentUpdate?.(payload.new);"
    },
    {
      "file": "src/components/tournament/TournamentRealTimeSync.tsx",
      "line": 80,
      "content": "console.log('👥 Registration update:', payload);",
      "context": "78:         },\n79:         payload => {\n80:           console.log('👥 Registration update:', payload);\n81:           setLastUpdate(new Date());\n82:           onParticipantUpdate?.(payload.new);"
    },
    {
      "file": "src/components/tournament/TournamentRealTimeSync.tsx",
      "line": 98,
      "content": "console.log('🏆 Tournament results update:', payload);",
      "context": "96:         },\n97:         payload => {\n98:           console.log('🏆 Tournament results update:', payload);\n99:           setLastUpdate(new Date());\n100:           onResultsUpdate?.();"
    },
    {
      "file": "src/components/tournament/TournamentRealTimeSync.tsx",
      "line": 118,
      "content": "console.log('⚔️ Tournament match updated:', payload);",
      "context": "116:         },\n117:         payload => {\n118:           console.log('⚔️ Tournament match updated:', payload);\n119:           setLastUpdate(new Date());\n120: "
    },
    {
      "file": "src/components/tournament/TournamentRealTimeSync.tsx",
      "line": 152,
      "content": "console.log('💎 SPA points awarded:', payload);",
      "context": "150:           const newRecord = payload.new as any;\n151:           if (!tournamentId || newRecord.source_id === tournamentId) {\n152:             console.log('💎 SPA points awarded:', payload);\n153:             setLastUpdate(new Date());\n154:             toast.success(`💎 +${newRecord.points_earned} SPA Points!`);"
    },
    {
      "file": "src/components/tournament/TournamentRealTimeSync.tsx",
      "line": 159,
      "content": "console.log(`🔗 Tournament sync status: ${status}`);",
      "context": "157:       )\n158:       .subscribe(status => {\n159:         console.log(`🔗 Tournament sync status: ${status}`);\n160:         setIsConnected(status === 'SUBSCRIBED');\n161: "
    },
    {
      "file": "src/components/tournament/TournamentRealTimeSync.tsx",
      "line": 171,
      "content": "console.log('🔌 Cleaning up tournament sync');",
      "context": "169: \n170:     return () => {\n171:       console.log('🔌 Cleaning up tournament sync');\n172:       supabase.removeChannel(tournamentChannel);\n173:     };"
    },
    {
      "file": "src/components/tournament/TournamentStatusControlButton.tsx",
      "line": 71,
      "content": "console.log(",
      "context": "69:     try {\n70:       setIsUpdating(true);\n71:       console.log(\n72:         `🎯 Updating tournament ${tournamentId} status: ${currentStatus} → ${nextAction.newStatus}`\n73:       );"
    },
    {
      "file": "src/components/tournament/templates/DoubleEliminationTemplate.tsx",
      "line": 78,
      "content": "console.log(",
      "context": "76:     ) {\n77:       setIsLoading(true);\n78:       console.log(\n79:         '📊 [DoubleEliminationTemplate] Loading SABO bracket data for tournament:',\n80:         tournamentId"
    },
    {
      "file": "src/components/tournament/templates/DoubleEliminationTemplate.tsx",
      "line": 84,
      "content": "console.log(",
      "context": "82:       loadTournamentBracketData(tournamentId)\n83:         .then(data => {\n84:           console.log(\n85:             '🏆 [DoubleEliminationTemplate] Loaded SABO tournament data:',\n86:             data"
    },
    {
      "file": "src/components/tournament/templates/DoubleEliminationTemplate.tsx",
      "line": 96,
      "content": "console.warn(",
      "context": "94:             }\n95:           } else {\n96:             console.warn(\n97:               '⚠️ [DoubleEliminationTemplate] No SABO bracket data returned'\n98:             );"
    },
    {
      "file": "src/components/tournament/templates/DoubleEliminationTemplate.tsx",
      "line": 116,
      "content": "console.log('⏭️ [DoubleEliminationTemplate] Skipping bracket data load - not a SABO tournament');",
      "context": "114:         });\n115:     } else {\n116:       console.log('⏭️ [DoubleEliminationTemplate] Skipping bracket data load - not a SABO tournament');\n117:     }\n118:   }, [tournamentId, isCompletedTemplate, tournamentData?.status, tournamentData?.tournament_type]);"
    },
    {
      "file": "src/components/tournament/templates/SingleEliminationTemplate.tsx",
      "line": 90,
      "content": "console.log(",
      "context": "88: \n89:           if (matches && matches.length > 0) {\n90:             console.log(\n91:               '🏆 [SingleEliminationTemplate] Loaded live tournament matches:',\n92:               matches"
    },
    {
      "file": "src/components/tournament/templates/SingleEliminationTemplate.tsx",
      "line": 118,
      "content": "console.log(",
      "context": "116:         .then(data => {\n117:           if (data) {\n118:             console.log(\n119:               '🏆 [SingleEliminationTemplate] Loaded completed tournament data:',\n120:               data"
    },
    {
      "file": "src/components/tournament/templates/SingleEliminationTemplate.tsx",
      "line": 363,
      "content": "console.log('🎯 Using emergency completion function for match:', {",
      "context": "361:       }\n362: \n363:       console.log('🎯 Using emergency completion function for match:', {\n364:         matchId,\n365:         scores,"
    },
    {
      "file": "src/components/tournaments/LoserBranchASection.tsx",
      "line": 30,
      "content": "console.log(",
      "context": "28:   );\n29: \n30:   console.log(\n31:     `🔍 [LoserBranchA] Filtering matches for tournament ${tournamentId}:`,\n32:     {"
    },
    {
      "file": "src/components/tournaments/LoserBranchBSection.tsx",
      "line": 28,
      "content": "console.log(",
      "context": "26:   );\n27: \n28:   console.log(\n29:     `🔍 [LoserBranchB] Filtering matches for tournament ${tournamentId}:`,\n30:     {"
    },
    {
      "file": "src/components/tournaments/MatchScoreInput.tsx",
      "line": 55,
      "content": "console.log('🎯 Updating score using safe method:', {",
      "context": "53:       if (!user) throw new Error('Not authenticated');\n54: \n55:       console.log('🎯 Updating score using safe method:', {\n56:         matchId,\n57:         player1Score,"
    },
    {
      "file": "src/components/tournaments/SABO32AdvancementFixer.tsx",
      "line": 32,
      "content": "console.log('🔧 Starting SABO-32 advancement fix for tournament:', tournamentId);",
      "context": "30:     \n31:     try {\n32:       console.log('🔧 Starting SABO-32 advancement fix for tournament:', tournamentId);\n33:       \n34:       // Call the SQL function"
    },
    {
      "file": "src/components/tournaments/SABO32ManualFix.tsx",
      "line": 26,
      "content": "console.log('🔧 Starting manual SABO32 advancement fix...');",
      "context": "24:     setLoading(true);\n25:     try {\n26:       console.log('🔧 Starting manual SABO32 advancement fix...');\n27: \n28:       // 1. Get all matches for this tournament"
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 49,
      "content": "console.log('🎯 Submitting score for match:', {",
      "context": "47: \n48:     try {\n49:       console.log('🎯 Submitting score for match:', {\n50:         matchId: match.id,\n51:         tournamentId: match.tournament_id,"
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 104,
      "content": "console.log('🎯 Advancing winner to next round...');",
      "context": "102:       ) {\n103:         // For single elimination and non-final matches, advance winner to next round\n104:         console.log('🎯 Advancing winner to next round...');\n105: \n106:         const { data: advanceResult, error: advanceError } = await supabase.rpc("
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 127,
      "content": "console.log('🎯 Advancing with corrected double elimination logic...');",
      "context": "125:       } else if (tournamentType === 'double_elimination' && result?.winner_id) {\n126:         // For double elimination, use the new corrected advancement\n127:         console.log('🎯 Advancing with corrected double elimination logic...');\n128: \n129:         const { data: advanceResult, error: advanceError } = await supabase.rpc("
    },
    {
      "file": "src/components/tournaments/ScoreInputModal.tsx",
      "line": 146,
      "content": "console.log(",
      "context": "144:           );\n145:         } else {\n146:           console.log(\n147:             '✅ Enhanced double elimination advancement successful:',\n148:             advanceResult"
    },
    {
      "file": "src/components/tournaments/TournamentPerformanceMonitor.tsx",
      "line": 67,
      "content": "const originalWarn = console.warn;",
      "context": "65:   useEffect(() => {\n66:     const originalError = console.error;\n67:     const originalWarn = console.warn;\n68: \n69:     console.error = (...args) => {"
    },
    {
      "file": "src/components/tournaments/TournamentPerformanceMonitor.tsx",
      "line": 80,
      "content": "console.warn = (...args) => {",
      "context": "78:     };\n79: \n80:     console.warn = (...args) => {\n81:       const message = args.join(' ');\n82:       if (message.includes(tournamentId) || message.includes('tournament')) {"
    },
    {
      "file": "src/components/tournaments/TournamentPerformanceMonitor.tsx",
      "line": 93,
      "content": "console.warn = originalWarn;",
      "context": "91:     return () => {\n92:       console.error = originalError;\n93:       console.warn = originalWarn;\n94:     };\n95:   }, [tournamentId]);"
    },
    {
      "file": "src/components/tournaments/sabo/SABODoubleEliminationViewer.tsx",
      "line": 39,
      "content": "console.log('🎯 SABODoubleEliminationViewer:', {",
      "context": "37: \n38:   // Debug logging\n39:   console.log('🎯 SABODoubleEliminationViewer:', {\n40:     tournamentId,\n41:     isLoading,"
    },
    {
      "file": "src/components/ui/card-avatar.tsx",
      "line": 83,
      "content": "console.log('🎯 CardAvatar - userAvatar:', userAvatar);",
      "context": "81:   const currentAvatar = croppedImage || userAvatar;\n82:   \n83:   console.log('🎯 CardAvatar - userAvatar:', userAvatar);\n84:   console.log('🎯 CardAvatar - croppedImage:', croppedImage);\n85:   console.log('🎯 CardAvatar - currentAvatar:', currentAvatar);"
    },
    {
      "file": "src/components/ui/card-avatar.tsx",
      "line": 84,
      "content": "console.log('🎯 CardAvatar - croppedImage:', croppedImage);",
      "context": "82:   \n83:   console.log('🎯 CardAvatar - userAvatar:', userAvatar);\n84:   console.log('🎯 CardAvatar - croppedImage:', croppedImage);\n85:   console.log('🎯 CardAvatar - currentAvatar:', currentAvatar);\n86: "
    },
    {
      "file": "src/components/ui/card-avatar.tsx",
      "line": 85,
      "content": "console.log('🎯 CardAvatar - currentAvatar:', currentAvatar);",
      "context": "83:   console.log('🎯 CardAvatar - userAvatar:', userAvatar);\n84:   console.log('🎯 CardAvatar - croppedImage:', croppedImage);\n85:   console.log('🎯 CardAvatar - currentAvatar:', currentAvatar);\n86: \n87:   return ("
    },
    {
      "file": "src/components/ui/mobile-image-cropper.tsx",
      "line": 142,
      "content": "console.log('Image loaded:', {",
      "context": "140:     setImageLoaded(true);\n141:     \n142:     console.log('Image loaded:', {\n143:       natural: { width: img.naturalWidth, height: img.naturalHeight },\n144:       container: { width: containerRect.width, height: containerRect.height },"
    },
    {
      "file": "src/components/ui/mobile-image-cropper.tsx",
      "line": 312,
      "content": "console.log('Crop calculation:', {",
      "context": "310:       ctx.restore();\n311:       \n312:       console.log('Crop calculation:', {\n313:         container: { width: containerRect.width, height: containerRect.height },\n314:         displayed: { width: displayedWidth, height: displayedHeight, offsetX, offsetY },"
    },
    {
      "file": "src/config/emailConfig.ts",
      "line": 67,
      "content": "console.log('📧 Auto-email triggers:', Object.keys(AUTO_EMAIL_CONFIG));",
      "context": "65: \n66: console.log('✅ Email system configuration loaded');\n67: console.log('📧 Auto-email triggers:', Object.keys(AUTO_EMAIL_CONFIG));\n68: console.log('🎯 System ready for Vietnamese Billiards Platform');\n69: "
    },
    {
      "file": "src/config/emailConfig.ts",
      "line": 68,
      "content": "console.log('🎯 System ready for Vietnamese Billiards Platform');",
      "context": "66: console.log('✅ Email system configuration loaded');\n67: console.log('📧 Auto-email triggers:', Object.keys(AUTO_EMAIL_CONFIG));\n68: console.log('🎯 System ready for Vietnamese Billiards Platform');\n69: "
    },
    {
      "file": "src/contexts/FeatureFlagsContext.tsx",
      "line": 132,
      "content": "console.log(`🚀 Feature flag enabled: ${flag}`);",
      "context": "130:     }\n131: \n132:     console.log(`🚀 Feature flag enabled: ${flag}`);\n133:   };\n134: "
    },
    {
      "file": "src/contexts/FeatureFlagsContext.tsx",
      "line": 143,
      "content": "console.log(`🔒 Feature flag disabled: ${flag}`);",
      "context": "141:     }\n142: \n143:     console.log(`🔒 Feature flag disabled: ${flag}`);\n144:   };\n145: "
    },
    {
      "file": "src/contexts/FeatureFlagsContext.tsx",
      "line": 193,
      "content": "console.log(`📊 A/B Test Exposure: ${testName} - Group: ${userGroup}`);",
      "context": "191:     if (environment === 'production') {\n192:       // Send to analytics\n193:       console.log(`📊 A/B Test Exposure: ${testName} - Group: ${userGroup}`);\n194:     }\n195:   }, [testName, userGroup, environment]);"
    },
    {
      "file": "src/contexts/ProfileContext.tsx",
      "line": 87,
      "content": "console.log('Club profile loaded:', clubData);",
      "context": "85:       if (!clubError && clubData) {\n86:         setClubProfile(clubData);\n87:         console.log('Club profile loaded:', clubData);\n88:       } else {\n89:         console.log('No club profile found for user');"
    },
    {
      "file": "src/contexts/ProfileContext.tsx",
      "line": 89,
      "content": "console.log('No club profile found for user');",
      "context": "87:         console.log('Club profile loaded:', clubData);\n88:       } else {\n89:         console.log('No club profile found for user');\n90:       }\n91:     } catch (error) {"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 43,
      "content": "console.log('[SimpleProfileContext] Provider rendered, user:', user?.id);",
      "context": "41: \n42:   // Add console logging for debugging real-time events\n43:   console.log('[SimpleProfileContext] Provider rendered, user:', user?.id);\n44: \n45:   // Single API call to fetch profile with enhanced logging"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 48,
      "content": "console.log('[SimpleProfileContext] No user, setting loading to false');",
      "context": "46:   const fetchProfile = useCallback(async () => {\n47:     if (!user) {\n48:       console.log('[SimpleProfileContext] No user, setting loading to false');\n49:       setIsLoading(false);\n50:       return;"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 53,
      "content": "console.log('[SimpleProfileContext] Fetching profile for user:', user.id);",
      "context": "51:     }\n52: \n53:     console.log('[SimpleProfileContext] Fetching profile for user:', user.id);\n54: \n55:     try {"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 114,
      "content": "console.log(",
      "context": "112:     if (!user) return;\n113: \n114:     console.log(\n115:       '[SimpleProfileContext] Setting up real-time subscription for user:',\n116:       user.id"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 130,
      "content": "console.log(",
      "context": "128:         },\n129:         payload => {\n130:           console.log(\n131:             '[SimpleProfileContext] Real-time profile update received:',\n132:             payload"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 140,
      "content": "console.log('[SimpleProfileContext] Verified rank changed:', {",
      "context": "138: \n139:           if (oldRank !== newRank) {\n140:             console.log('[SimpleProfileContext] Verified rank changed:', {\n141:               old: oldRank,\n142:               new: newRank,"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 151,
      "content": "console.log(",
      "context": "149:       )\n150:       .subscribe(status => {\n151:         console.log(\n152:           '[SimpleProfileContext] Real-time subscription status:',\n153:           status"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 166,
      "content": "console.log('[SimpleProfileContext] Page focused, refreshing profile');",
      "context": "164:   useEffect(() => {\n165:     const handleFocus = () => {\n166:       console.log('[SimpleProfileContext] Page focused, refreshing profile');\n167:       fetchProfile();\n168:     };"
    },
    {
      "file": "src/contexts/SimpleProfileContext.tsx",
      "line": 179,
      "content": "console.log('[SimpleProfileContext] Background refresh triggered');",
      "context": "177: \n178:     const interval = setInterval(() => {\n179:       console.log('[SimpleProfileContext] Background refresh triggered');\n180:       fetchProfile();\n181:     }, 30000);"
    },
    {
      "file": "src/contexts/SimpleTournamentContext.tsx",
      "line": 136,
      "content": "console.warn(",
      "context": "134:       const tournament = tournaments.find(t => t.id === tournamentId);\n135:       if (!tournament) {\n136:         console.warn(\n137:           'Tournament not found for rewards calculation:',\n138:           tournamentId"
    },
    {
      "file": "src/contexts/SimpleTournamentContext.tsx",
      "line": 149,
      "content": "console.log(",
      "context": "147: \n148:       // Use the TournamentRewardsManager hook to load rewards from tournament_prize_tiers\n149:       console.log(\n150:         '🔄 [SimpleTournamentContext] Loading rewards from tournament_prize_tiers'\n151:       );"
    },
    {
      "file": "src/contexts/SimpleTournamentContext.tsx",
      "line": 196,
      "content": "console.log('💾 Saving tournament rewards:', { tournamentId, rewards });",
      "context": "194:     ): Promise<boolean> => {\n195:       try {\n196:         console.log('💾 Saving tournament rewards:', { tournamentId, rewards });\n197: \n198:         // Simple validation"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 241,
      "content": "console.log('💾 Saving tournament rewards:', {",
      "context": "239:     async (tournamentId: string, rewardsData: TournamentRewards) => {\n240:       try {\n241:         console.log('💾 Saving tournament rewards:', {\n242:           tournamentId,\n243:           rewardsData,"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 293,
      "content": "console.warn('⚠️ No tournament data found for:', tournamentId);",
      "context": "291: \n292:         if (!data) {\n293:           console.warn('⚠️ No tournament data found for:', tournamentId);\n294:           return null;\n295:         }"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 316,
      "content": "console.log('🔍 Loading latest tournament for user:', user.id);",
      "context": "314:       }\n315: \n316:       console.log('🔍 Loading latest tournament for user:', user.id);\n317: \n318:       const { data, error: fetchError } = await supabase"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 351,
      "content": "console.log('ℹ️ No previous tournaments found for user');",
      "context": "349: \n350:       if (!data) {\n351:         console.log('ℹ️ No previous tournaments found for user');\n352:         toast.info('Không tìm thấy giải đấu trước đó để sao chép dữ liệu');\n353:         return null;"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 419,
      "content": "// console.log('🔄 TournamentContext: Tournament updated', { updated, changedFields: Object.keys(data) });",
      "context": "417:         }\n418: \n419:         // console.log('🔄 TournamentContext: Tournament updated', { updated, changedFields: Object.keys(data) });\n420:         return updated;\n421:       });"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 468,
      "content": "console.log('🏆 Saving tournament prizes:', prizes.length, 'prizes for tournament:', tournamentId);",
      "context": "466:   const saveTournamentPrizes = useCallback(async (tournamentId: string, prizes: any[]) => {\n467:     try {\n468:       console.log('🏆 Saving tournament prizes:', prizes.length, 'prizes for tournament:', tournamentId);\n469:       \n470:       if (!prizes || prizes.length === 0) {"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 471,
      "content": "console.log('📝 No prizes to save, skipping...');",
      "context": "469:       \n470:       if (!prizes || prizes.length === 0) {\n471:         console.log('📝 No prizes to save, skipping...');\n472:         return;\n473:       }"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 478,
      "content": "console.warn('⚠️ No authenticated session, skipping prize save');",
      "context": "476:       \n477:       if (sessionError || !session) {\n478:         console.warn('⚠️ No authenticated session, skipping prize save');\n479:         return;\n480:       }"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 525,
      "content": "console.log('⚠️ Continuing without saving prizes to tournament_prizes table');",
      "context": "523:       console.error('❌ Error in saveTournamentPrizes:', error);\n524:       // Don't throw error - prizes are not critical for tournament creation\n525:       console.log('⚠️ Continuing without saving prizes to tournament_prizes table');\n526:     }\n527:   }, []);"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 543,
      "content": "console.log('🏆 Creating full prize distribution for 16 positions...');",
      "context": "541: \n542:       // 🏆 TẠO ĐẦY ĐỦ THÔNG TIN GIẢI THƯỞNG 16 VỊ TRÍ\n543:       console.log('🏆 Creating full prize distribution for 16 positions...');\n544:       \n545:       // Import service để tạo template"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 550,
      "content": "console.log('🎯 [DEBUG] Generating prize template...');",
      "context": "548:       // Tạo template đầy đủ 16 vị trí\n549:       // Generate prize template  \n550:       console.log('🎯 [DEBUG] Generating prize template...');\n551:       console.log('🎯 [DEBUG] Tournament object received:', JSON.stringify(tournament, null, 2));\n552:       console.log('🎯 [DEBUG] tournament.prize_pool:', tournament.prize_pool, typeof tournament.prize_pool);"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 551,
      "content": "console.log('🎯 [DEBUG] Tournament object received:', JSON.stringify(tournament, null, 2));",
      "context": "549:       // Generate prize template  \n550:       console.log('🎯 [DEBUG] Generating prize template...');\n551:       console.log('🎯 [DEBUG] Tournament object received:', JSON.stringify(tournament, null, 2));\n552:       console.log('🎯 [DEBUG] tournament.prize_pool:', tournament.prize_pool, typeof tournament.prize_pool);\n553:       console.log('🎯 [DEBUG] tournament.first_prize:', tournament.first_prize, typeof tournament.first_prize);"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 552,
      "content": "console.log('🎯 [DEBUG] tournament.prize_pool:', tournament.prize_pool, typeof tournament.prize_pool);",
      "context": "550:       console.log('🎯 [DEBUG] Generating prize template...');\n551:       console.log('🎯 [DEBUG] Tournament object received:', JSON.stringify(tournament, null, 2));\n552:       console.log('🎯 [DEBUG] tournament.prize_pool:', tournament.prize_pool, typeof tournament.prize_pool);\n553:       console.log('🎯 [DEBUG] tournament.first_prize:', tournament.first_prize, typeof tournament.first_prize);\n554:       console.log('🎯 [DEBUG] tournament.second_prize:', tournament.second_prize, typeof tournament.second_prize);"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 553,
      "content": "console.log('🎯 [DEBUG] tournament.first_prize:', tournament.first_prize, typeof tournament.first_prize);",
      "context": "551:       console.log('🎯 [DEBUG] Tournament object received:', JSON.stringify(tournament, null, 2));\n552:       console.log('🎯 [DEBUG] tournament.prize_pool:', tournament.prize_pool, typeof tournament.prize_pool);\n553:       console.log('🎯 [DEBUG] tournament.first_prize:', tournament.first_prize, typeof tournament.first_prize);\n554:       console.log('🎯 [DEBUG] tournament.second_prize:', tournament.second_prize, typeof tournament.second_prize);\n555:       console.log('🎯 [DEBUG] tournament.third_prize:', tournament.third_prize, typeof tournament.third_prize);"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 554,
      "content": "console.log('🎯 [DEBUG] tournament.second_prize:', tournament.second_prize, typeof tournament.second_prize);",
      "context": "552:       console.log('🎯 [DEBUG] tournament.prize_pool:', tournament.prize_pool, typeof tournament.prize_pool);\n553:       console.log('🎯 [DEBUG] tournament.first_prize:', tournament.first_prize, typeof tournament.first_prize);\n554:       console.log('🎯 [DEBUG] tournament.second_prize:', tournament.second_prize, typeof tournament.second_prize);\n555:       console.log('🎯 [DEBUG] tournament.third_prize:', tournament.third_prize, typeof tournament.third_prize);\n556:       "
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 555,
      "content": "console.log('🎯 [DEBUG] tournament.third_prize:', tournament.third_prize, typeof tournament.third_prize);",
      "context": "553:       console.log('🎯 [DEBUG] tournament.first_prize:', tournament.first_prize, typeof tournament.first_prize);\n554:       console.log('🎯 [DEBUG] tournament.second_prize:', tournament.second_prize, typeof tournament.second_prize);\n555:       console.log('🎯 [DEBUG] tournament.third_prize:', tournament.third_prize, typeof tournament.third_prize);\n556:       \n557:       // Create simple 16-position prize template"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 614,
      "content": "console.log('🎯 [DEBUG] Generated prize template:', JSON.stringify(prizeTemplate, null, 2));",
      "context": "612:       );\n613:       \n614:       console.log('🎯 [DEBUG] Generated prize template:', JSON.stringify(prizeTemplate, null, 2));\n615:       \n616:       console.log('🎯 [DEBUG] Building prize_distribution object...');"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 616,
      "content": "console.log('🎯 [DEBUG] Building prize_distribution object...');",
      "context": "614:       console.log('🎯 [DEBUG] Generated prize template:', JSON.stringify(prizeTemplate, null, 2));\n615:       \n616:       console.log('🎯 [DEBUG] Building prize_distribution object...');\n617:       console.log('🎯 [DEBUG] prizeTemplate length:', prizeTemplate.length);\n618:       console.log('🎯 [DEBUG] prizeTemplate[0]:', JSON.stringify(prizeTemplate[0], null, 2));"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 617,
      "content": "console.log('🎯 [DEBUG] prizeTemplate length:', prizeTemplate.length);",
      "context": "615:       \n616:       console.log('🎯 [DEBUG] Building prize_distribution object...');\n617:       console.log('🎯 [DEBUG] prizeTemplate length:', prizeTemplate.length);\n618:       console.log('🎯 [DEBUG] prizeTemplate[0]:', JSON.stringify(prizeTemplate[0], null, 2));\n619:       console.log('🎯 [DEBUG] Prize template length:', prizeTemplate.length);"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 618,
      "content": "console.log('🎯 [DEBUG] prizeTemplate[0]:', JSON.stringify(prizeTemplate[0], null, 2));",
      "context": "616:       console.log('🎯 [DEBUG] Building prize_distribution object...');\n617:       console.log('🎯 [DEBUG] prizeTemplate length:', prizeTemplate.length);\n618:       console.log('🎯 [DEBUG] prizeTemplate[0]:', JSON.stringify(prizeTemplate[0], null, 2));\n619:       console.log('🎯 [DEBUG] Prize template length:', prizeTemplate.length);\n620:       "
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 619,
      "content": "console.log('🎯 [DEBUG] Prize template length:', prizeTemplate.length);",
      "context": "617:       console.log('🎯 [DEBUG] prizeTemplate length:', prizeTemplate.length);\n618:       console.log('🎯 [DEBUG] prizeTemplate[0]:', JSON.stringify(prizeTemplate[0], null, 2));\n619:       console.log('🎯 [DEBUG] Prize template length:', prizeTemplate.length);\n620:       \n621:       if (prizeTemplate.length === 0) {"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 654,
      "content": "console.log('🎯 [DEBUG] Created fallback prize template with', prizeTemplate.length, 'positions');",
      "context": "652:           });\n653:         }\n654:         console.log('🎯 [DEBUG] Created fallback prize template with', prizeTemplate.length, 'positions');\n655:       }\n656:       "
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 657,
      "content": "console.log('🏆 Prize template created:', prizeTemplate.length, 'positions');",
      "context": "655:       }\n656:       \n657:       console.log('🏆 Prize template created:', prizeTemplate.length, 'positions');\n658:       \n659:       // Chuẩn bị dữ liệu theo bảng tournaments với ĐẦY ĐỦ thông tin giải thưởng"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 663,
      "content": "console.log('🔍 [DEBUG] Tournament state before creation:', {",
      "context": "661:       \n662:       // 🔍 DEBUG: Kiểm tra tournament state trước khi tạo\n663:       console.log('🔍 [DEBUG] Tournament state before creation:', {\n664:         tournament_start: tournament.tournament_start,\n665:         tournament_end: tournament.tournament_end,"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 681,
      "content": "console.log('🔍 [DEBUG] Tournament object received:', {",
      "context": "679:       }\n680: \n681:       console.log('🔍 [DEBUG] Tournament object received:', {\n682:         name: tournament?.name,\n683:         tournament_start: tournament?.tournament_start,"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 727,
      "content": "console.log('🎯 [DEBUG] Tournament data prepared for DB insert');",
      "context": "725:       };\n726:       \n727:       console.log('🎯 [DEBUG] Tournament data prepared for DB insert');\n728:       console.log('🎯 [DEBUG] Fields count:', Object.keys(tournamentData).length);\n729:       "
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 728,
      "content": "console.log('🎯 [DEBUG] Fields count:', Object.keys(tournamentData).length);",
      "context": "726:       \n727:       console.log('🎯 [DEBUG] Tournament data prepared for DB insert');\n728:       console.log('🎯 [DEBUG] Fields count:', Object.keys(tournamentData).length);\n729:       \n730:       // 🔍 CRITICAL: Validate required fields before DB insert"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 731,
      "content": "console.log('🔍 [VALIDATION] Critical fields check:', {",
      "context": "729:       \n730:       // 🔍 CRITICAL: Validate required fields before DB insert\n731:       console.log('🔍 [VALIDATION] Critical fields check:', {\n732:         name: tournamentData.name,\n733:         tournament_start: tournamentData.tournament_start,"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 742,
      "content": "console.log('🔧 [FIX] Set tournament_start to:', tournamentData.tournament_start);",
      "context": "740:         console.error('❌ [ERROR] tournament_start is null/undefined!');\n741:         tournamentData.tournament_start = new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString();\n742:         console.log('🔧 [FIX] Set tournament_start to:', tournamentData.tournament_start);\n743:       }\n744:       "
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 745,
      "content": "console.log('🏆 Tournament data prepared for DB:', {",
      "context": "743:       }\n744:       \n745:       console.log('🏆 Tournament data prepared for DB:', {\n746:         name: tournamentData.name,\n747:         tournament_type: tournamentData.tournament_type,"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 754,
      "content": "console.log('🔍 [DEBUG] Complete tournamentData before INSERT:', JSON.stringify(tournamentData, null, 2));",
      "context": "752: \n753:       // 🔍 DEBUG: Log toàn bộ tournamentData để kiểm tra\n754:       console.log('🔍 [DEBUG] Complete tournamentData before INSERT:', JSON.stringify(tournamentData, null, 2));\n755:       \n756:       // 🔍 DEBUG: Check prize template"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 757,
      "content": "console.log('🔍 [DEBUG] Prize template before mapping:', prizeTemplate.slice(0, 3));",
      "context": "755:       \n756:       // 🔍 DEBUG: Check prize template\n757:       console.log('🔍 [DEBUG] Prize template before mapping:', prizeTemplate.slice(0, 3));\n758: \n759:       // Create tournament in database"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 784,
      "content": "console.warn(",
      "context": "782:           console.log('✅ Reward template applied successfully');\n783:         } else {\n784:           console.warn(\n785:             '⚠️ Failed to apply reward template, but tournament created'\n786:           );"
    },
    {
      "file": "src/contexts/TournamentContext.tsx",
      "line": 794,
      "content": "console.log('🏆 Saving tournament prizes to tournament_prizes table...');",
      "context": "792: \n793:       // 🏆 Save tournament prizes to tournament_prizes table\n794:       console.log('🏆 Saving tournament prizes to tournament_prizes table...');\n795:       try {\n796:         await saveTournamentPrizes(newTournament.id, prizeTemplate);"
    },
    {
      "file": "src/contexts/TournamentGlobalContext.tsx",
      "line": 79,
      "content": "console.log(",
      "context": "77:       setError(null);\n78: \n79:       console.log(\n80:         '🔍 [TournamentGlobal] Fetching tournaments for clubId:',\n81:         clubId"
    },
    {
      "file": "src/contexts/TournamentGlobalContext.tsx",
      "line": 106,
      "content": "console.log(",
      "context": "104:       }\n105: \n106:       console.log(\n107:         '📊 [TournamentGlobal] Raw tournaments data:',\n108:         data?.length || 0"
    },
    {
      "file": "src/contexts/TournamentGlobalContext.tsx",
      "line": 110,
      "content": "console.log(",
      "context": "108:         data?.length || 0\n109:       );\n110:       console.log(\n111:         '📊 [TournamentGlobal] Raw tournaments:',\n112:         data?.map(t => ({ id: t.id, name: t.name, club_id: t.club_id }))"
    },
    {
      "file": "src/contexts/TournamentGlobalContext.tsx",
      "line": 178,
      "content": "console.log(",
      "context": "176:             };\n177: \n178:             console.log(\n179:               '🔄 [TournamentGlobal] Using default rewards:',\n180:               defaultRewards"
    },
    {
      "file": "src/contexts/TournamentGlobalContext.tsx",
      "line": 213,
      "content": "console.log('🔄 [TournamentGlobal] Starting refreshTournaments...');",
      "context": "211:   const refreshTournaments = useCallback(async () => {\n212:     try {\n213:       console.log('🔄 [TournamentGlobal] Starting refreshTournaments...');\n214:       setLoading(true);\n215:       setError(null);"
    },
    {
      "file": "src/contexts/TournamentGlobalContext.tsx",
      "line": 218,
      "content": "console.log(",
      "context": "216: \n217:       await fetchTournaments();\n218:       console.log(\n219:         '✅ [TournamentGlobal] refreshTournaments completed successfully'\n220:       );"
    },
    {
      "file": "src/contexts/UnifiedProfileContext.tsx",
      "line": 265,
      "content": "console.log('Profile updated:', payload);",
      "context": "263:         },\n264:         payload => {\n265:           console.log('Profile updated:', payload);\n266:           if (payload.new && typeof payload.new === 'object') {\n267:             const newData = payload.new as any;"
    },
    {
      "file": "src/contexts/UnifiedProfileContext.tsx",
      "line": 306,
      "content": "console.log('Rankings updated:', payload);",
      "context": "304:         },\n305:         payload => {\n306:           console.log('Rankings updated:', payload);\n307:           if (payload.new && typeof payload.new === 'object') {\n308:             const newData = payload.new as any;"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 145,
      "content": "console.log('🚀 Creating tournament with data:', data);",
      "context": "143:       setLoading(true);\n144:       try {\n145:         console.log('🚀 Creating tournament with data:', data);\n146:         console.log('🔍 User ID:', user.id);\n147: "
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 146,
      "content": "console.log('🔍 User ID:', user.id);",
      "context": "144:       try {\n145:         console.log('🚀 Creating tournament with data:', data);\n146:         console.log('🔍 User ID:', user.id);\n147: \n148:         // ✅ FIXED: Only map fields that exist in TournamentFormData"
    },
    {
      "file": "src/contexts/UnifiedTournamentContext.tsx",
      "line": 178,
      "content": "console.log('📤 Sending to database:', tournamentData);",
      "context": "176:         };\n177: \n178:         console.log('📤 Sending to database:', tournamentData);\n179: \n180:         const { data: result, error } = await supabase"
    },
    {
      "file": "src/hooks/marketplace/useMarketplaceItems.tsx",
      "line": 133,
      "content": "console.log('Mock increment views for item:', itemId);",
      "context": "131:     try {\n132:       // Mock increment views since marketplace_items table doesn't exist\n133:       console.log('Mock increment views for item:', itemId);\n134: \n135:       // Update local state if needed"
    },
    {
      "file": "src/hooks/marketplace/useMyMarketplaceItems.tsx",
      "line": 79,
      "content": "console.log('Mock create item:', newItem);",
      "context": "77:       };\n78: \n79:       console.log('Mock create item:', newItem);\n80: \n81:       // Refresh items"
    },
    {
      "file": "src/hooks/marketplace/useMyMarketplaceItems.tsx",
      "line": 115,
      "content": "console.log('Mock update item:', updatedItem);",
      "context": "113:       };\n114: \n115:       console.log('Mock update item:', updatedItem);\n116: \n117:       // Refresh items"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 218,
      "content": "console.log('🔧 Auth: Initializing authentication system...');",
      "context": "216:   useEffect(() => {\n217:     let isMounted = true;\n218:     console.log('🔧 Auth: Initializing authentication system...');\n219: \n220:     // Set up auth state listener FIRST"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 226,
      "content": "console.log(",
      "context": "224:       if (!isMounted) return;\n225: \n226:       console.log(\n227:         '🔧 Auth: State change event:',\n228:         event,"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 249,
      "content": "console.log('🔧 Auth: User signed out, clearing state');",
      "context": "247:       // Handle specific events\n248:       if (event === 'SIGNED_OUT') {\n249:         console.log('🔧 Auth: User signed out, clearing state');\n250:         // Clear any remaining auth data on sign out\n251:         localStorage.removeItem('supabase.auth.token');"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 254,
      "content": "console.log('🔧 Auth: User signed in:', session.user.id);",
      "context": "252:         sessionStorage.clear();\n253:       } else if (event === 'SIGNED_IN' && session?.user) {\n254:         console.log('🔧 Auth: User signed in:', session.user.id);\n255:         \n256:         // Auto-grant admin role to admin emails"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 264,
      "content": "console.log(`👑 Auto-granting admin role to ${session.user.email}`);",
      "context": "262:         \n263:         if (adminEmails.includes(session.user.email || '')) {\n264:           console.log(`👑 Auto-granting admin role to ${session.user.email}`);\n265:           \n266:           // Update profile role to admin (if table allows)"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 280,
      "content": "console.log('⚠️ Profile admin role blocked by constraint, using user_roles instead');",
      "context": "278:                 console.log('✅ Admin role granted in profiles table');\n279:               } else {\n280:                 console.log('⚠️ Profile admin role blocked by constraint, using user_roles instead');\n281:               }\n282:             });"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 305,
      "content": "console.log('🏆 [DISABLED] Milestone initialization temporarily disabled');",
      "context": "303:           // TEMPORARY DISABLE: Skip milestone initialization to prevent infinite loop\n304:           // TODO: Fix RLS policies for player_milestones table first\n305:           console.log('🏆 [DISABLED] Milestone initialization temporarily disabled');\n306:           \n307:           // Check if this is a new user by checking if they have any milestone progress"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 313,
      "content": "console.log('🏆 Triggering account_creation milestone for new user');",
      "context": "311:               // If no milestone progress exists, this is likely a new account\n312:               if (progress.length === 0) {\n313:                 console.log('🏆 Triggering account_creation milestone for new user');\n314:                 // Initialize milestones first\n315:                 return milestoneService.initializePlayerMilestones(session.user.id)"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 329,
      "content": "console.log('🔧 Auth: Token refreshed for user:', session?.user?.id);",
      "context": "327:         }\n328:       } else if (event === 'TOKEN_REFRESHED') {\n329:         console.log('🔧 Auth: Token refreshed for user:', session?.user?.id);\n330:       }\n331:     });"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 358,
      "content": "console.log(",
      "context": "356:         }\n357: \n358:         console.log(\n359:           '🔧 Auth: Initial session check:',\n360:           session?.user?.id || 'no user'"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 402,
      "content": "console.log('🔧 Auth: Starting sign out process...');",
      "context": "400:   const signOut = async (): Promise<void> => {\n401:     try {\n402:       console.log('🔧 Auth: Starting sign out process...');\n403: \n404:       // Clear local state first to prevent UI flickering"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 538,
      "content": "console.log('🔐 Attempting phone login with password:', e164);",
      "context": "536:     try {\n537:       const e164 = formatPhoneToE164(phone);\n538:       console.log('🔐 Attempting phone login with password:', e164);\n539:       \n540:       const { data, error } = await supabase.auth.signInWithPassword({"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 550,
      "content": "console.log('💡 This might be an OTP-created account without password');",
      "context": "548:         // Check if error is due to missing password for OTP-created account\n549:         if (error.message.includes('Invalid login credentials')) {\n550:           console.log('💡 This might be an OTP-created account without password');\n551:           console.log('🔄 Falling back to OTP login flow...');\n552:           "
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 551,
      "content": "console.log('🔄 Falling back to OTP login flow...');",
      "context": "549:         if (error.message.includes('Invalid login credentials')) {\n550:           console.log('💡 This might be an OTP-created account without password');\n551:           console.log('🔄 Falling back to OTP login flow...');\n552:           \n553:           // Return a special error indicating fallback needed"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 577,
      "content": "console.log('📱 Attempting phone login with password...');",
      "context": "575:     // If password is provided, try password-based login first\n576:     if (password) {\n577:       console.log('📱 Attempting phone login with password...');\n578:       const result = await signInWithPhonePassword(phone, password);\n579:       "
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 582,
      "content": "console.log('🔄 Password login failed, falling back to OTP...');",
      "context": "580:       // If password login fails with fallback indicator, continue to OTP\n581:       if (result.error && (result.error as any).fallbackToOtp) {\n582:         console.log('🔄 Password login failed, falling back to OTP...');\n583:         // Don't return the error, continue to OTP flow\n584:         return requestPhoneOtp(phone);"
    },
    {
      "file": "src/hooks/useAuth.tsx",
      "line": 592,
      "content": "console.log('📱 Using OTP login flow...');",
      "context": "590:     \n591:     // Otherwise, use OTP-based login\n592:     console.log('📱 Using OTP login flow...');\n593:     return requestPhoneOtp(phone);\n594:   };"
    },
    {
      "file": "src/hooks/useAuthStateMonitor.ts",
      "line": 17,
      "content": "console.warn('🔍 Auth conflicts detected on mount:', conflicts);",
      "context": "15:     const conflicts = checkAuthConflicts();\n16:     if (conflicts.length > 0) {\n17:       console.warn('🔍 Auth conflicts detected on mount:', conflicts);\n18: \n19:       // Auto-cleanup if too many conflicts"
    },
    {
      "file": "src/hooks/useAuthStateMonitor.ts",
      "line": 30,
      "content": "console.log('👤 Auth state changed:', {",
      "context": "28:     // Monitor for auth state flipping\n29:     if (lastUserRef.current !== user) {\n30:       console.log('👤 Auth state changed:', {\n31:         from: lastUserRef.current?.id || 'null',\n32:         to: user?.id || 'null',"
    },
    {
      "file": "src/hooks/useAuthStateMonitor.ts",
      "line": 45,
      "content": "console.warn(",
      "context": "43:       const timeout = setTimeout(() => {\n44:         errorCountRef.current++;\n45:         console.warn(\n46:           `⏳ Auth loading timeout (attempt ${errorCountRef.current})`\n47:         );"
    },
    {
      "file": "src/hooks/useAutoAdvancement.ts",
      "line": 32,
      "content": "console.log(",
      "context": "30:       setIsProcessing(true);\n31:       try {\n32:         console.log(\n33:           '🔄 Auto advancing to semifinal for tournament:',\n34:           tournamentId"
    },
    {
      "file": "src/hooks/useAutoAdvancement.ts",
      "line": 50,
      "content": "console.log('ℹ️ Semifinal advancement not needed:', result?.message);",
      "context": "48:           } as AutoAdvancementResult;\n49:         } else {\n50:           console.log('ℹ️ Semifinal advancement not needed:', result?.message);\n51:           return {\n52:             success: false,"
    },
    {
      "file": "src/hooks/useAutoAdvancement.ts",
      "line": 71,
      "content": "console.log('🔄 Auto advancing to final for tournament:', tournamentId);",
      "context": "69:       setIsProcessing(true);\n70:       try {\n71:         console.log('🔄 Auto advancing to final for tournament:', tournamentId);\n72: \n73:         // First try to process semifinals completion"
    },
    {
      "file": "src/hooks/useAutoAdvancement.ts",
      "line": 89,
      "content": "console.log('ℹ️ Final advancement not needed:', finalResult?.message);",
      "context": "87:           } as AutoAdvancementResult;\n88:         } else {\n89:           console.log('ℹ️ Final advancement not needed:', finalResult?.message);\n90:           return {\n91:             success: false,"
    },
    {
      "file": "src/hooks/useAutoAdvancement.ts",
      "line": 112,
      "content": "console.log(",
      "context": "110:       setIsProcessing(true);\n111:       try {\n112:         console.log(\n113:           '🤖 Processing automatic advancement for tournament:',\n114:           tournamentId"
    },
    {
      "file": "src/hooks/useAutoMatchNotifications.tsx",
      "line": 131,
      "content": "console.log('🎯 New tournament match detected:', match);",
      "context": "129:         payload => {\n130:           const match = payload.new;\n131:           console.log('🎯 New tournament match detected:', match);\n132: \n133:           // Auto-create notification for newly scheduled matches"
    },
    {
      "file": "src/hooks/useAutoMatchNotifications.tsx",
      "line": 153,
      "content": "console.log('🔄 Tournament match updated:', match);",
      "context": "151:           const oldMatch = payload.old;\n152: \n153:           console.log('🔄 Tournament match updated:', match);\n154: \n155:           // Check for status changes that should trigger notifications"
    },
    {
      "file": "src/hooks/useAutoTransitionChallenges.ts",
      "line": 29,
      "content": "console.log(`🔄 Found ${challenges.length} challenges ready to transition to ongoing`);",
      "context": "27:         }\n28: \n29:         console.log(`🔄 Found ${challenges.length} challenges ready to transition to ongoing`);\n30: \n31:         // Update all eligible challenges to ongoing status"
    },
    {
      "file": "src/hooks/useAutoUpdateChallengeStatus.ts",
      "line": 27,
      "content": "console.log(`🔄 Found ${challenges.length} challenges to update to ongoing status`);",
      "context": "25: \n26:         if (challenges && challenges.length > 0) {\n27:           console.log(`🔄 Found ${challenges.length} challenges to update to ongoing status`);\n28:           \n29:           // Update challenges to ongoing status"
    },
    {
      "file": "src/hooks/useAutomatedMigration.tsx",
      "line": 66,
      "content": "const originalLog = console.log;",
      "context": "64:     try {\n65:       // Capture console logs for real-time feedback\n66:       const originalLog = console.log;\n67:       const originalError = console.error;\n68: "
    },
    {
      "file": "src/hooks/useAutomatedMigration.tsx",
      "line": 69,
      "content": "console.log = (...args) => {",
      "context": "67:       const originalError = console.error;\n68: \n69:       console.log = (...args) => {\n70:         setLogs(prev => [...prev, `[INFO] ${args.join(' ')}`]);\n71:         originalLog(...args);"
    },
    {
      "file": "src/hooks/useAutomatedMigration.tsx",
      "line": 88,
      "content": "console.log = originalLog;",
      "context": "86: \n87:       // Restore original console functions\n88:       console.log = originalLog;\n89:       console.error = originalError;\n90: "
    },
    {
      "file": "src/hooks/useAvailableUsers.tsx",
      "line": 26,
      "content": "console.log(",
      "context": "24: \n25:       try {\n26:         console.log(\n27:           `🎯 Generating ${targetCount} users for tournament ${tournamentId}`\n28:         );"
    },
    {
      "file": "src/hooks/useAvailableUsers.tsx",
      "line": 43,
      "content": "console.log(`📋 Found ${excludedIds.length} users already registered`);",
      "context": "41:         const excludedIds =\n42:           existingRegistrations?.map(reg => reg.user_id) || [];\n43:         console.log(`📋 Found ${excludedIds.length} users already registered`);\n44: \n45:         // Get all users (remove is_demo_user filter since column doesn't exist)"
    },
    {
      "file": "src/hooks/useAvailableUsers.tsx",
      "line": 68,
      "content": "console.log('⚠️ No demo users available');",
      "context": "66: \n67:         if (demoUserIds.length === 0) {\n68:           console.log('⚠️ No demo users available');\n69:           return [];\n70:         }"
    },
    {
      "file": "src/hooks/useAvailableUsers.tsx",
      "line": 122,
      "content": "console.log(",
      "context": "120:             .slice(0, targetCount);\n121: \n122:           console.log(\n123:             `✅ Selected ${selectedUsers.length} users for tournament`\n124:           );"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 116,
      "content": "console.log('🎯 Detected 32 players - using SABO-32 system');",
      "context": "114:           if (playerCount === 32) {\n115:             // Use SABO-32 system\n116:             console.log('🎯 Detected 32 players - using SABO-32 system');\n117:             \n118:             try {"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 160,
      "content": "console.log('🎯 Detected 16 players - using SABO-16 system');",
      "context": "158:           } else if (playerCount === 16) {\n159:             // Use SABO-16 system (existing logic)\n160:             console.log('🎯 Detected 16 players - using SABO-16 system');\n161:           } else {\n162:             toast.error("
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 180,
      "content": "console.log('🔄 SABO function failed, trying client-side fallback...');",
      "context": "178:             if (bracketError) {\n179:               console.error('SABO bracket generation error:', bracketError);\n180:               console.log('🔄 SABO function failed, trying client-side fallback...');\n181:               \n182:               // Fallback to client-side generation"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 204,
      "content": "console.log('🔄 SABO function failed, trying client-side fallback...');",
      "context": "202:             if (!saboResult?.success) {\n203:               console.error('SABO function returned error:', result);\n204:               console.log('🔄 SABO function failed, trying client-side fallback...');\n205:               \n206:               // Fallback to client-side generation"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 229,
      "content": "console.log('🔄 SABO function exception, trying client-side fallback...');",
      "context": "227:           } catch (error) {\n228:             console.error('Exception calling SABO function:', error);\n229:             console.log('🔄 SABO function exception, trying client-side fallback...');\n230:             \n231:             // Fallback to client-side generation"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 278,
      "content": "console.log(`🧪 Trying double elimination function: ${funcName}`);",
      "context": "276:           for (const funcName of doubleFunctions) {\n277:             try {\n278:               console.log(`🧪 Trying double elimination function: ${funcName}`);\n279:               \n280:               let params;"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 319,
      "content": "console.warn(`⚠️ ${funcName} returned unexpected result:`, resultData);",
      "context": "317:                 return resultData as BracketGenerationResult;\n318:               } else {\n319:                 console.warn(`⚠️ ${funcName} returned unexpected result:`, resultData);\n320:                 lastError = new Error(`${funcName} returned unexpected result`);\n321:               }"
    },
    {
      "file": "src/hooks/useBracketGeneration.tsx",
      "line": 401,
      "content": "console.log('Reseeding tournament by regenerating bracket');",
      "context": "399:       try {\n400:         // Since reseed_tournament doesn't exist, just regenerate the bracket\n401:         console.log('Reseeding tournament by regenerating bracket');\n402:         const result = await generateBracket(tournamentId, {\n403:           method: seedingMethod,"
    },
    {
      "file": "src/hooks/useBracketRepair.ts",
      "line": 24,
      "content": "console.log(",
      "context": "22:   const repairBracket = useMutation({\n23:     mutationFn: async ({ tournamentId }: RepairBracketParams) => {\n24:       console.log(\n25:         '🔧 Starting simplified bracket repair for tournament:',\n26:         tournamentId"
    },
    {
      "file": "src/hooks/useCachedLeaderboard.ts",
      "line": 68,
      "content": "console.warn(",
      "context": "66:         if (mvError || !mvData || mvData.length === 0) {\n67:           // Fallback to live data from player_rankings\n68:           console.warn(\n69:             'Materialized view unavailable, using live data:',\n70:             mvError"
    },
    {
      "file": "src/hooks/useChallengeNotifications.tsx",
      "line": 287,
      "content": "console.log('🔔 Setting up polling for notifications, interval:', pollInterval);",
      "context": "285:     if (!user?.id || realtime || !pollInterval) return;\n286: \n287:     console.log('🔔 Setting up polling for notifications, interval:', pollInterval);\n288: \n289:     const poll = async () => {"
    },
    {
      "file": "src/hooks/useChallengeWorkflow.tsx",
      "line": 83,
      "content": "console.log('Submitting challenge score:', {",
      "context": "81:       isChallenger: boolean;\n82:     }) => {\n83:       console.log('Submitting challenge score:', {\n84:         challengeId,\n85:         challengerScore,"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 41,
      "content": "console.log('📊 [useChallenges] Raw database response:', {",
      "context": "39:         .order('created_at', { ascending: false });\n40: \n41:       console.log('📊 [useChallenges] Raw database response:', {\n42:         totalChallenges: challengesData?.length || 0,\n43:         error: fetchError,"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 155,
      "content": "console.log('🔍 [useChallenges] Processing enriched challenges:', {",
      "context": "153: \n154:       // ✅ Enhanced logging for debugging\n155:       console.log('🔍 [useChallenges] Processing enriched challenges:', {\n156:         total: enrichedChallenges.length,\n157:         currentUser: user.id.slice(-8),"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 218,
      "content": "console.log('Daily challenge limit temporarily disabled');",
      "context": "216:       // Daily limit temporarily disabled\n217:       // TODO: Re-enable daily limit when needed\n218:       console.log('Daily challenge limit temporarily disabled');\n219: \n220:       /*"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 266,
      "content": "console.log('💾 [useChallenges] Inserting challenge to DB:', {",
      "context": "264:       };\n265: \n266:       console.log('💾 [useChallenges] Inserting challenge to DB:', {\n267:         ...newChallenge,\n268:         location_check: newChallenge.location ? '✅ Has location' : '❌ Missing location',"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 365,
      "content": "console.log(",
      "context": "363: \n364:     try {\n365:       console.log(\n366:         '🎯 Attempting to accept challenge:',\n367:         challengeId,"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 460,
      "content": "console.log(",
      "context": "458: \n459:     try {\n460:       console.log(\n461:         '🎯 Attempting to accept challenge (old method):',\n462:         challengeId,"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 487,
      "content": "console.log('📋 Challenge data:', challengeData);",
      "context": "485:       }\n486: \n487:       console.log('📋 Challenge data:', challengeData);\n488: \n489:       // Check if user can accept this challenge"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 494,
      "content": "console.log('🔍 Challenge analysis:', {",
      "context": "492:       const isMyOwnChallenge = challengeData.challenger_id === user.id;\n493: \n494:       console.log('🔍 Challenge analysis:', {\n495:         isOpenChallenge,\n496:         isSpecificChallenge,"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 528,
      "content": "console.log('📤 Updating challenge with data:', updateData);",
      "context": "526:           };\n527: \n528:       console.log('📤 Updating challenge with data:', updateData);\n529: \n530:       // ✅ CRITICAL: Use transaction to ensure both challenge update and match creation succeed"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 552,
      "content": "console.log('🏆 Creating match record for accepted challenge...');",
      "context": "550: \n551:       // ✅ NEW: Create match record automatically when challenge is accepted\n552:       console.log('🏆 Creating match record for accepted challenge...');\n553:       console.log('🏆 Match data to insert:', {\n554:         player1_id: challengeData.challenger_id,"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 553,
      "content": "console.log('🏆 Match data to insert:', {",
      "context": "551:       // ✅ NEW: Create match record automatically when challenge is accepted\n552:       console.log('🏆 Creating match record for accepted challenge...');\n553:       console.log('🏆 Match data to insert:', {\n554:         player1_id: challengeData.challenger_id,\n555:         player2_id: finalOpponentId,"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 571,
      "content": "console.log('📋 Final match data:', matchData);",
      "context": "569:       };\n570: \n571:       console.log('📋 Final match data:', matchData);\n572: \n573:       const { data: matchRecord, error: matchError } = await supabase"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 589,
      "content": "console.warn('⚠️ Challenge accepted but match record creation failed');",
      "context": "587:         // Don't throw error here since challenge was already accepted\n588:         // This is a non-critical failure that can be handled later\n589:         console.warn('⚠️ Challenge accepted but match record creation failed');\n590:         toast.warning(\n591:           'Tham gia thách đấu thành công! (Ghi chú: Cần refresh để xem trận đấu)'"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 757,
      "content": "console.log(",
      "context": "755:         },\n756:         payload => {\n757:           console.log(\n758:             '🔄 Challenge updated, triggering immediate refresh:',\n759:             payload"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 774,
      "content": "console.log('🔄 New open challenge created, refreshing:', payload);",
      "context": "772:         },\n773:         payload => {\n774:           console.log('🔄 New open challenge created, refreshing:', payload);\n775:           // Refresh to show new open challenges\n776:           setTimeout(() => fetchChallenges(), 100);"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 787,
      "content": "console.log(",
      "context": "785:         },\n786:         payload => {\n787:           console.log(\n788:             '🔄 Profile updated, checking if challenge refresh needed:',\n789:             payload"
    },
    {
      "file": "src/hooks/useChallenges.tsx",
      "line": 814,
      "content": "console.log(",
      "context": "812:         },\n813:         payload => {\n814:           console.log(\n815:             '🔄 Club profile updated, checking challenge refresh:',\n816:             payload"
    },
    {
      "file": "src/hooks/useClubDashboard.tsx",
      "line": 70,
      "content": "console.log('Club challenges updated - refreshing dashboard');",
      "context": "68:             },\n69:             () => {\n70:               console.log('Club challenges updated - refreshing dashboard');\n71:               fetchDashboardData();\n72:             }"
    },
    {
      "file": "src/hooks/useClubDashboard.tsx",
      "line": 88,
      "content": "console.log('Club notifications updated - refreshing dashboard');",
      "context": "86:             },\n87:             () => {\n88:               console.log('Club notifications updated - refreshing dashboard');\n89:               fetchDashboardData();\n90:             }"
    },
    {
      "file": "src/hooks/useClubDashboard.tsx",
      "line": 106,
      "content": "console.log('Club tournaments updated - refreshing dashboard');",
      "context": "104:             },\n105:             () => {\n106:               console.log('Club tournaments updated - refreshing dashboard');\n107:               fetchDashboardData();\n108:             }"
    },
    {
      "file": "src/hooks/useClubDashboard.tsx",
      "line": 124,
      "content": "console.log('Rank requests updated - refreshing dashboard');",
      "context": "122:             },\n123:             () => {\n124:               console.log('Rank requests updated - refreshing dashboard');\n125:               fetchDashboardData();\n126:             }"
    },
    {
      "file": "src/hooks/useClubDashboard.tsx",
      "line": 142,
      "content": "console.log('Club accountability updated - refreshing dashboard');",
      "context": "140:             },\n141:             () => {\n142:               console.log('Club accountability updated - refreshing dashboard');\n143:               fetchDashboardData();\n144:             }"
    },
    {
      "file": "src/hooks/useClubDashboard.tsx",
      "line": 199,
      "content": "console.log('Fetching dashboard data for user:', user.id);",
      "context": "197:       setError(null);\n198: \n199:       console.log('Fetching dashboard data for user:', user.id);\n200: \n201:       // Get club profile"
    },
    {
      "file": "src/hooks/useClubDashboard.tsx",
      "line": 214,
      "content": "console.log('Club ID:', clubId);",
      "context": "212: \n213:       const clubId = clubData.id;\n214:       console.log('Club ID:', clubId);\n215: \n216:       // Use simple queries instead of problematic database function"
    },
    {
      "file": "src/hooks/useClubDashboard.tsx",
      "line": 270,
      "content": "console.log('Dashboard queries results:', {",
      "context": "268:       ]);\n269: \n270:       console.log('Dashboard queries results:', {\n271:         verifications: verifications.data?.length,\n272:         notifications: notifications.data?.length,"
    },
    {
      "file": "src/hooks/useClubStandings.tsx",
      "line": 78,
      "content": "console.log('Mock verify player at club:', { userId, clubId });",
      "context": "76: \n77:       try {\n78:         console.log('Mock verify player at club:', { userId, clubId });\n79:         await fetchClubStandings(clubId);\n80: "
    },
    {
      "file": "src/hooks/useClubStandings.tsx",
      "line": 111,
      "content": "console.log('Mock remove player from club:', { userId, clubId });",
      "context": "109: \n110:       try {\n111:         console.log('Mock remove player from club:', { userId, clubId });\n112:         await fetchClubStandings(clubId);\n113:       } catch (err) {"
    },
    {
      "file": "src/hooks/useClubStandings.tsx",
      "line": 205,
      "content": "console.log('Mock recalculate rankings for club:', clubId);",
      "context": "203: \n204:       try {\n205:         console.log('Mock recalculate rankings for club:', clubId);\n206:         await fetchClubStandings(clubId);\n207:       } catch (err) {"
    },
    {
      "file": "src/hooks/useClubTrustScore.tsx",
      "line": 137,
      "content": "console.log(",
      "context": "135:           },\n136:           payload => {\n137:             console.log(\n138:               'New rating submitted, refreshing trust scores:',\n139:               payload"
    },
    {
      "file": "src/hooks/useClubTrustScore.tsx",
      "line": 152,
      "content": "console.log(",
      "context": "150:           },\n151:           payload => {\n152:             console.log(\n153:               'Player ranking updated, refreshing trust scores:',\n154:               payload"
    },
    {
      "file": "src/hooks/useClubTrustScore.tsx",
      "line": 168,
      "content": "console.log(",
      "context": "166:           },\n167:           payload => {\n168:             console.log(\n169:               'Club profile updated, refreshing trust scores:',\n170:               payload"
    },
    {
      "file": "src/hooks/useClubs.ts",
      "line": 29,
      "content": "console.log('No approved clubs, trying all club profiles...');",
      "context": "27:         \n28:         if (error) {\n29:           console.log('No approved clubs, trying all club profiles...');\n30:           const { data: allClubs, error: allError } = await supabase\n31:             .from('club_profiles')"
    },
    {
      "file": "src/hooks/useCoaches.tsx",
      "line": 129,
      "content": "console.log('Mock book session:', newSession);",
      "context": "127:       };\n128: \n129:       console.log('Mock book session:', newSession);\n130: \n131:       // Refresh sessions"
    },
    {
      "file": "src/hooks/useComprehensiveTournamentFix.ts",
      "line": 44,
      "content": "console.log('🏥 Checking tournament advancement health...');",
      "context": "42:     setIsChecking(true);\n43:     try {\n44:       console.log('🏥 Checking tournament advancement health...');\n45: \n46:       const { data, error } = await supabase.rpc("
    },
    {
      "file": "src/hooks/useComprehensiveTournamentFix.ts",
      "line": 57,
      "content": "console.log('📊 Health check results:', result);",
      "context": "55: \n56:       const result = data as unknown as HealthCheckResult;\n57:       console.log('📊 Health check results:', result);\n58: \n59:       const { statistics } = result;"
    },
    {
      "file": "src/hooks/useComprehensiveTournamentFix.ts",
      "line": 81,
      "content": "console.log('🔧 Starting comprehensive tournament fix...');",
      "context": "79:     setIsFixing(true);\n80:     try {\n81:       console.log('🔧 Starting comprehensive tournament fix...');\n82:       toast.loading('Đang sửa chữa tất cả tournaments có vấn đề...');\n83: "
    },
    {
      "file": "src/hooks/useComprehensiveTournamentFix.ts",
      "line": 95,
      "content": "console.log('🎯 Fix results:', result);",
      "context": "93: \n94:       const result = data as unknown as FixResult;\n95:       console.log('🎯 Fix results:', result);\n96: \n97:       if (result.success) {"
    },
    {
      "file": "src/hooks/useComprehensiveTournamentFix.ts",
      "line": 103,
      "content": "console.log('📝 Fixed tournaments details:', result.details);",
      "context": "101:         // Show detailed results if any tournaments were fixed\n102:         if (result.tournaments_fixed > 0) {\n103:           console.log('📝 Fixed tournaments details:', result.details);\n104:         }\n105:       } else {"
    },
    {
      "file": "src/hooks/useComprehensiveTournamentFix.ts",
      "line": 120,
      "content": "console.log('🚀 Running comprehensive tournament check and fix...');",
      "context": "118: \n119:   const runComprehensiveCheck = async () => {\n120:     console.log('🚀 Running comprehensive tournament check and fix...');\n121: \n122:     // First check health"
    },
    {
      "file": "src/hooks/useContent.tsx",
      "line": 111,
      "content": "console.log('Mock create post:', newPost);",
      "context": "109:       };\n110: \n111:       console.log('Mock create post:', newPost);\n112:       return newPost;\n113:     },"
    },
    {
      "file": "src/hooks/useContent.tsx",
      "line": 127,
      "content": "console.log('Mock increment view count for post:', postId);",
      "context": "125:     mutationFn: async (postId: string) => {\n126:       // Mock increment view count since increment_post_views RPC doesn't exist\n127:       console.log('Mock increment view count for post:', postId);\n128:     },\n129:   });"
    },
    {
      "file": "src/hooks/useDatabaseOptimization.tsx",
      "line": 248,
      "content": "console.warn(",
      "context": "246:         // Log slow operations\n247:         if (duration > 1000) {\n248:           console.warn(\n249:             `Slow DB operation: ${operation} took ${duration.toFixed(2)}ms`\n250:           );"
    },
    {
      "file": "src/hooks/useDiscovery.tsx",
      "line": 326,
      "content": "console.log('Mock create challenge:', {",
      "context": "324:     }) => {\n325:       // Mock challenge creation since challenges table has different schema\n326:       console.log('Mock create challenge:', {\n327:         challenger_id: user?.id,\n328:         opponent_id: challengedId, // Use opponent_id instead of challenged_id"
    },
    {
      "file": "src/hooks/useDiscovery.tsx",
      "line": 336,
      "content": "console.log('Mock create notification:', {",
      "context": "334: \n335:       // Mock notification creation since notifications table doesn't exist\n336:       console.log('Mock create notification:', {\n337:         user_id: challengedId,\n338:         type: 'challenge_received',"
    },
    {
      "file": "src/hooks/useEloRules.ts",
      "line": 51,
      "content": "console.log('ELO rule creation disabled - table does not exist');",
      "context": "49:     try {\n50:       // Disable since table doesn't exist\n51:       console.log('ELO rule creation disabled - table does not exist');\n52:       toast({\n53:         title: 'Info',"
    },
    {
      "file": "src/hooks/useEloRules.ts",
      "line": 69,
      "content": "console.log('ELO rule update disabled - table does not exist');",
      "context": "67:     try {\n68:       // Disable since table doesn't exist\n69:       console.log('ELO rule update disabled - table does not exist');\n70:       toast({\n71:         title: 'Info',"
    },
    {
      "file": "src/hooks/useEloRules.ts",
      "line": 87,
      "content": "console.log('ELO rule deletion disabled - table does not exist');",
      "context": "85:     try {\n86:       // Disable since table doesn't exist\n87:       console.log('ELO rule deletion disabled - table does not exist');\n88:       toast({\n89:         title: 'Info',"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 75,
      "content": "console.log(`🗑️ Auto-expiring ${expiredChallenges.length} challenges...`, {",
      "context": "73:       \n74:       if (expiredChallenges.length > 0) {\n75:         console.log(`🗑️ Auto-expiring ${expiredChallenges.length} challenges...`, {\n76:           expiredIds: expiredChallenges.map(c => c.id),\n77:           expiredData: expiredChallenges.map(c => ({ "
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 155,
      "content": "console.log('🔄 [useEnhancedChallengesV3] Fetching all challenges...');",
      "context": "153:       setError(null);\n154: \n155:       console.log('🔄 [useEnhancedChallengesV3] Fetching all challenges...');\n156: \n157:       // Fetch ALL challenges from the system"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 234,
      "content": "console.log('⚠️ Current user not found in batch, loading directly...');",
      "context": "232:       } else if (user?.id) {\n233:         // ✅ Fallback: Direct load current user if not found in batch\n234:         console.log('⚠️ Current user not found in batch, loading directly...');\n235:         const [directProfile, directRanking] = await Promise.all([\n236:           supabase"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 330,
      "content": "console.log('🎯 [communityKeo] Filtered challenges:', {",
      "context": "328:     );\n329:     \n330:     console.log('🎯 [communityKeo] Filtered challenges:', {\n331:       total: challenges.length,\n332:       filtered: filtered.length,"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 380,
      "content": "console.log('🔍 [useEnhancedChallengesV3] myDoiDoiThu filtering:', {",
      "context": "378:     );\n379:     \n380:     console.log('🔍 [useEnhancedChallengesV3] myDoiDoiThu filtering:', {\n381:       total: challenges.length,\n382:       userId: user?.id,"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 403,
      "content": "console.log('🔍 [useEnhancedChallengesV3] mySapToi filtering:', {",
      "context": "401:     );\n402:     \n403:     console.log('🔍 [useEnhancedChallengesV3] mySapToi filtering:', {\n404:       total: challenges.length,\n405:       userId: user?.id,"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 424,
      "content": "console.log('🔍 [useEnhancedChallengesV3] myHoanThanh filtering:', {",
      "context": "422:     );\n423:     \n424:     console.log('🔍 [useEnhancedChallengesV3] myHoanThanh filtering:', {\n425:       total: challenges.length,\n426:       userId: user?.id,"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 470,
      "content": "console.log('⚠️ Skipping frontend SPA validation - let server handle it');",
      "context": "468:     // ✅ SIMPLIFIED FIX: Skip frontend validation, let server handle it\n469:     // This prevents \"currentUserProfile null\" issues\n470:     console.log('⚠️ Skipping frontend SPA validation - let server handle it');\n471: \n472:     // Frontend validation - check SPA before API call"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 482,
      "content": "console.log('🎯 Calling accept_open_challenge with:', {",
      "context": "480: \n481:     try {\n482:       console.log('🎯 Calling accept_open_challenge with:', {\n483:         challengeId,\n484:         userId: user.id,"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 495,
      "content": "console.log('🔍 Pre-validation challenge data:', challengeCheck);",
      "context": "493:         .single();\n494:       \n495:       console.log('🔍 Pre-validation challenge data:', challengeCheck);\n496: \n497:       const { data: result, error } = await supabase.rpc('accept_open_challenge', {"
    },
    {
      "file": "src/hooks/useEnhancedChallengesV3.tsx",
      "line": 621,
      "content": "console.log('🔄 [useEnhancedChallengesV3] Started auto-expire monitoring', {",
      "context": "619:     }, 2 * 60 * 1000); // 2 minutes for faster response\n620: \n621:     console.log('🔄 [useEnhancedChallengesV3] Started auto-expire monitoring', {\n622:       challengesCount: challenges.length,\n623:       hasExpiringChallenges,"
    },
    {
      "file": "src/hooks/useEnhancedNotifications.tsx",
      "line": 132,
      "content": "console.log('Setting up enhanced notification subscription');",
      "context": "130:     if (!user?.id) return;\n131: \n132:     console.log('Setting up enhanced notification subscription');\n133: \n134:     // Initial fetch"
    },
    {
      "file": "src/hooks/useEnhancedNotifications.tsx",
      "line": 166,
      "content": "console.log('Cleaning up enhanced notification subscription');",
      "context": "164: \n165:     return () => {\n166:       console.log('Cleaning up enhanced notification subscription');\n167:       supabase.removeChannel(channel);\n168:     };"
    },
    {
      "file": "src/hooks/useEnhancedTournamentMatches.ts",
      "line": 34,
      "content": "console.log(",
      "context": "32:         if (skipDelay) setLoading(true);\n33: \n34:         console.log(\n35:           '🔄 Fetching enhanced matches for tournament:',\n36:           tournamentId"
    },
    {
      "file": "src/hooks/useEnhancedTournamentMatches.ts",
      "line": 98,
      "content": "console.log(",
      "context": "96:     if (!tournamentId) return;\n97: \n98:     console.log(\n99:       '🔄 Setting up enhanced real-time subscription for:',\n100:       tournamentId"
    },
    {
      "file": "src/hooks/useEnhancedTournamentMatches.ts",
      "line": 116,
      "content": "console.log('🔄 Enhanced match update:', payload);",
      "context": "114:         },\n115:         payload => {\n116:           console.log('🔄 Enhanced match update:', payload);\n117: \n118:           // Instant UI update for better UX"
    },
    {
      "file": "src/hooks/useEnhancedTournamentMatches.ts",
      "line": 165,
      "content": "console.log('🤖 Automation log update:', logData);",
      "context": "163:         payload => {\n164:           const logData = payload.new as any;\n165:           console.log('🤖 Automation log update:', logData);\n166: \n167:           if ("
    },
    {
      "file": "src/hooks/useEnhancedTournamentMatches.ts",
      "line": 181,
      "content": "console.log(`🔗 Enhanced subscription status: ${status}`);",
      "context": "179: \n180:       .subscribe(status => {\n181:         console.log(`🔗 Enhanced subscription status: ${status}`);\n182:         if (status === 'SUBSCRIBED') {\n183:           console.log('✅ Enhanced real-time connected');"
    },
    {
      "file": "src/hooks/useEnhancedTournamentMatches.ts",
      "line": 188,
      "content": "console.log('🔌 Cleaning up enhanced subscription');",
      "context": "186: \n187:     return () => {\n188:       console.log('🔌 Cleaning up enhanced subscription');\n189:       if (debounceRef.current) clearTimeout(debounceRef.current);\n190:       supabase.removeChannel(channel);"
    },
    {
      "file": "src/hooks/useFileUpload.tsx",
      "line": 78,
      "content": "console.log(",
      "context": "76:       }\n77: \n78:       console.log(\n79:         `Uploading file to bucket: ${options.bucket}, path: ${filePath}`\n80:       );"
    },
    {
      "file": "src/hooks/useLayoutStability.ts",
      "line": 76,
      "content": "console.warn(`Failed to preload ${failed.length} images`);",
      "context": "74:       const failed = results.filter(result => result.status === 'rejected');\n75:       if (failed.length > 0) {\n76:         console.warn(`Failed to preload ${failed.length} images`);\n77:       }\n78:     });"
    },
    {
      "file": "src/hooks/useLayoutStability.ts",
      "line": 107,
      "content": "console.warn('Significant layout shift detected:', {",
      "context": "105:           // Log significant layout shifts\n106:           if ((entry as any).value > 0.1) {\n107:             console.warn('Significant layout shift detected:', {\n108:               value: (entry as any).value,\n109:               sources: (entry as any).sources,"
    },
    {
      "file": "src/hooks/useLayoutStability.ts",
      "line": 122,
      "content": "console.warn(`Total CLS score: ${clsValue.toFixed(4)}`);",
      "context": "120:       observer.disconnect();\n121:       if (clsValue > 0.1) {\n122:         console.warn(`Total CLS score: ${clsValue.toFixed(4)}`);\n123:       }\n124:     };"
    },
    {
      "file": "src/hooks/useLoadingMonitor.tsx",
      "line": 18,
      "content": "console.log(",
      "context": "16:       const duration = timestamp - startTime;\n17: \n18:       console.log(\n19:         `[LoadingMonitor] ${componentName} - ${stepName}: ${duration.toFixed(2)}ms`\n20:       );"
    },
    {
      "file": "src/hooks/useLoadingMonitor.tsx",
      "line": 43,
      "content": "console.log(",
      "context": "41:       // Summary\n42:       const totalTime = performance.now() - startTime;\n43:       console.log(\n44:         `[LoadingMonitor] ${componentName} total lifecycle: ${totalTime.toFixed(2)}ms`\n45:       );"
    },
    {
      "file": "src/hooks/useLoadingMonitor.tsx",
      "line": 52,
      "content": "console.warn(",
      "context": "50:   useEffect(() => {\n51:     const timer = setTimeout(() => {\n52:       console.warn(\n53:         `[LoadingMonitor] ⚠️ ${componentName} has been active for >3s - potential performance issue`\n54:       );"
    },
    {
      "file": "src/hooks/useLoyalty.tsx",
      "line": 133,
      "content": "console.log('Mock earn points:', {",
      "context": "131: \n132:       // Mock earning points\n133:       console.log('Mock earn points:', {\n134:         user_id: user.id,\n135:         points,"
    },
    {
      "file": "src/hooks/useLoyalty.tsx",
      "line": 174,
      "content": "console.log('Mock spend points:', {",
      "context": "172: \n173:       // Mock spending points\n174:       console.log('Mock spend points:', {\n175:         user_id: user.id,\n176:         points,"
    },
    {
      "file": "src/hooks/useLoyalty.tsx",
      "line": 209,
      "content": "console.log('Mock redeem reward:', {",
      "context": "207: \n208:       // Mock redeem reward\n209:       console.log('Mock redeem reward:', {\n210:         user_id: user.id,\n211:         reward_id: rewardId,"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 118,
      "content": "console.log('Updating score for match:', matchId, {",
      "context": "116:       status?: string;\n117:     }) => {\n118:       console.log('Updating score for match:', matchId, {\n119:         player1Score,\n120:         player2Score,"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 174,
      "content": "console.log('Restoring match:', matchId);",
      "context": "172:   const restoreMatchMutation = useMutation({\n173:     mutationFn: async (matchId: string) => {\n174:       console.log('Restoring match:', matchId);\n175: \n176:       const { data, error } = await supabase"
    },
    {
      "file": "src/hooks/useMatchManagement.tsx",
      "line": 273,
      "content": "console.log('Editing score for match:', matchId, {",
      "context": "271:       editorId: string;\n272:     }) => {\n273:       console.log('Editing score for match:', matchId, {\n274:         newPlayer1Score,\n275:         newPlayer2Score,"
    },
    {
      "file": "src/hooks/useMatches.tsx",
      "line": 17,
      "content": "console.log('Mock creating match:', matchData);",
      "context": "15:     try {\n16:       // Mock match creation since the database doesn't have all required fields\n17:       console.log('Mock creating match:', matchData);\n18: \n19:       const mockMatch: Match = {"
    },
    {
      "file": "src/hooks/useMessages.ts",
      "line": 335,
      "content": "console.log('New message received:', payload);",
      "context": "333:         },\n334:         (payload) => {\n335:           console.log('New message received:', payload);\n336:           // Add new message to inbox\n337:           refreshMessages();"
    },
    {
      "file": "src/hooks/useMessages.ts",
      "line": 349,
      "content": "console.log('Message updated:', payload);",
      "context": "347:         },\n348:         (payload) => {\n349:           console.log('Message updated:', payload);\n350:           // Update message in the list\n351:           setMessages(prev => "
    },
    {
      "file": "src/hooks/useOpenChallenges.ts",
      "line": 149,
      "content": "console.warn(",
      "context": "147: \n148:       if (matchError) {\n149:         console.warn(\n150:           'Challenge accepted but match creation failed:',\n151:           matchError"
    },
    {
      "file": "src/hooks/useOpenChallenges.ts",
      "line": 191,
      "content": "console.log('New open challenge created, refreshing...');",
      "context": "189:         },\n190:         () => {\n191:           console.log('New open challenge created, refreshing...');\n192:           fetchOpenChallenges();\n193:         }"
    },
    {
      "file": "src/hooks/useOpenChallenges.ts",
      "line": 204,
      "content": "console.log('Open challenge updated:', payload);",
      "context": "202:         },\n203:         payload => {\n204:           console.log('Open challenge updated:', payload);\n205: \n206:           // If challenge was accepted (opponent_id is no longer null), remove from list"
    },
    {
      "file": "src/hooks/useOpenChallenges.ts",
      "line": 224,
      "content": "console.log('Challenge deleted:', payload);",
      "context": "222:         },\n223:         payload => {\n224:           console.log('Challenge deleted:', payload);\n225:           setOpenChallenges(prev => prev.filter(c => c.id !== payload.old.id));\n226:         }"
    },
    {
      "file": "src/hooks/useOptimizedAvatar.ts",
      "line": 41,
      "content": "console.log(`Avatar failed to load: ${cleanSrc}`);",
      "context": "39: \n40:   const handleError = useCallback(() => {\n41:     console.log(`Avatar failed to load: ${cleanSrc}`);\n42:     setIsLoading(false);\n43:     setHasError(true);"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 199,
      "content": "console.log(",
      "context": "197:           // Use cached data if fetch happened within last 30 seconds\n198:           if (cacheAge < 30000 && challenges.length > 0) {\n199:             console.log(\n200:               '🚀 Using cached challenge data to prevent excessive fetching'\n201:             );"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 428,
      "content": "console.warn('Win rate fetch failed', e);",
      "context": "426:         return { winRate, wins, losses, total };\n427:       } catch (e) {\n428:         console.warn('Win rate fetch failed', e);\n429:         return null;\n430:       } finally {"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 578,
      "content": "console.log('🏆 Creating match record for accepted challenge...');",
      "context": "576: \n577:         // ✅ CRITICAL: Create match record automatically when challenge is accepted\n578:         console.log('🏆 Creating match record for accepted challenge...');\n579: \n580:         const finalOpponentId = isOpenChallenge"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 602,
      "content": "console.warn(",
      "context": "600:         if (matchError) {\n601:           console.error('❌ Error creating match record:', matchError);\n602:           console.warn(\n603:             '⚠️ Challenge accepted but match record creation failed'\n604:           );"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 612,
      "content": "console.log('📬 Sending notification to challenger...');",
      "context": "610:         if (isOpenChallenge) {\n611:           try {\n612:             console.log('📬 Sending notification to challenger...');\n613: \n614:             // Get participant profile for notification metadata"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 747,
      "content": "console.log('🎯 Submitting score for challenge:', challengeId, {",
      "context": "745:       if (!user) throw new Error('User not authenticated');\n746: \n747:       console.log('🎯 Submitting score for challenge:', challengeId, {\n748:         challengerScore,\n749:         opponentScore,"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 867,
      "content": "console.log(",
      "context": "865:     if (!user) return;\n866: \n867:     console.log(\n868:       '🔄 Setting up optimized real-time subscription for user:',\n869:       user.id"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 878,
      "content": "console.log('🔄 Applying debounced diff:', payload?.eventType);",
      "context": "876:       if (refreshTimeout) clearTimeout(refreshTimeout);\n877:       refreshTimeout = setTimeout(() => {\n878:         console.log('🔄 Applying debounced diff:', payload?.eventType);\n879:         applyRealtimeDiff(payload);\n880:       }, 500); // 500ms debounce to group rapid changes"
    },
    {
      "file": "src/hooks/useOptimizedChallenges.tsx",
      "line": 898,
      "content": "console.log(",
      "context": "896:             (payload?.new && (payload.new as any).id) ||\n897:             (payload?.old && (payload.old as any).id);\n898:           console.log(\n899:             '🔄 Challenge event:',\n900:             payload?.eventType,"
    },
    {
      "file": "src/hooks/useOptimizedMatches.tsx",
      "line": 178,
      "content": "console.warn(",
      "context": "176:       }\n177:       if (acceptedChallenges.error) {\n178:         console.warn(\n179:           'Accepted challenges query failed:',\n180:           acceptedChallenges.error"
    },
    {
      "file": "src/hooks/useOptimizedTournaments.tsx",
      "line": 288,
      "content": "console.warn(",
      "context": "286:     // Log slow queries (>1 second)\n287:     if (executionTime > 1000) {\n288:       console.warn(\n289:         `Slow tournament query detected: ${queryType} took ${executionTime}ms`\n290:       );"
    },
    {
      "file": "src/hooks/usePerformanceMetrics.ts",
      "line": 35,
      "content": "console.warn(",
      "context": "33:       // Log performance in development\n34:       if (process.env.NODE_ENV === 'development' && renderTime > 50) {\n35:         console.warn(\n36:           `🐌 Slow render detected in ${componentName}: ${renderTime.toFixed(2)}ms`\n37:         );"
    },
    {
      "file": "src/hooks/usePerformanceOptimization.ts",
      "line": 54,
      "content": "console.log('🚀 Performance Metrics:', metrics);",
      "context": "52:         if (process.env.NODE_ENV === 'development') {\n53:           setTimeout(() => {\n54:             console.log('🚀 Performance Metrics:', metrics);\n55:           }, 3000);\n56:         }"
    },
    {
      "file": "src/hooks/usePosts.tsx",
      "line": 395,
      "content": "console.log('Mock getting post by slug:', slug);",
      "context": "393: \n394:       // Mock post by slug since posts table doesn't exist\n395:       console.log('Mock getting post by slug:', slug);\n396: \n397:       const mockPost = {"
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 142,
      "content": "console.log(",
      "context": "140:     if (!profile) return; // Only set up subscription after profile is loaded\n141: \n142:     console.log(\n143:       '[useProfile] Setting up enhanced real-time subscription for user:',\n144:       profile.user_id"
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 158,
      "content": "console.log(",
      "context": "156:         },\n157:         payload => {\n158:           console.log(\n159:             '[useProfile] Real-time profile update received:',\n160:             payload"
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 177,
      "content": "console.log(",
      "context": "175:               for (let i = 0; i < attempts; i++) {\n176:                 try {\n177:                   console.log(\n178:                     `[useProfile] Refresh attempt ${i + 1}/${attempts}`\n179:                   );"
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 183,
      "content": "console.log(",
      "context": "181:                   if (updatedProfile) {\n182:                     setProfile(updatedProfile);\n183:                     console.log(\n184:                       '[useProfile] Profile updated successfully with new rank:',\n185:                       updatedProfile.current_rank"
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 216,
      "content": "console.log(",
      "context": "214:         },\n215:         payload => {\n216:           console.log(\n217:             '[useProfile] Player rankings updated via real-time:',\n218:             payload"
    },
    {
      "file": "src/hooks/useProfile.tsx",
      "line": 227,
      "content": "console.log(",
      "context": "225:               if (updatedProfile) {\n226:                 setProfile(updatedProfile);\n227:                 console.log(\n228:                   '[useProfile] Profile updated with new ranking data'\n229:                 );"
    },
    {
      "file": "src/hooks/useProfileCache.ts",
      "line": 89,
      "content": "console.log(`🔄 Using fallback profile for ${userId}:`, fallbackProfile);",
      "context": "87:             verified_rank: rankingData.verified_rank\n88:           };\n89:           console.log(`🔄 Using fallback profile for ${userId}:`, fallbackProfile);\n90:           return fallbackProfile;\n91:         }"
    },
    {
      "file": "src/hooks/useProfileCache.ts",
      "line": 102,
      "content": "console.log(`🔧 Profile cache unified for ${userId}:`, {",
      "context": "100:           display_name: getDisplayName(data)\n101:         };\n102:         console.log(`🔧 Profile cache unified for ${userId}:`, {\n103:           unified_display_name: profile.display_name\n104:         });"
    },
    {
      "file": "src/hooks/useRankNotificationAutomation.tsx",
      "line": 17,
      "content": "console.log(",
      "context": "15:     if (!user) return;\n16: \n17:     console.log(\n18:       '[RankNotificationAutomation] Setting up rank approval listener for user:',\n19:       user.id"
    },
    {
      "file": "src/hooks/useRankNotificationAutomation.tsx",
      "line": 34,
      "content": "console.log(",
      "context": "32:         },\n33:         payload => {\n34:           console.log(\n35:             '[RankNotificationAutomation] Notification received:',\n36:             payload"
    },
    {
      "file": "src/hooks/useRankNotificationAutomation.tsx",
      "line": 48,
      "content": "console.log(",
      "context": "46:             notification.message?.includes('approved')\n47:           ) {\n48:             console.log(\n49:               '[RankNotificationAutomation] Rank approval detected, triggering profile refresh'\n50:             );"
    },
    {
      "file": "src/hooks/useRankNotificationAutomation.tsx",
      "line": 62,
      "content": "console.log(",
      "context": "60:             // Backup refresh after 2 seconds\n61:             setTimeout(() => {\n62:               console.log(\n63:                 '[RankNotificationAutomation] Backup refresh triggered'\n64:               );"
    },
    {
      "file": "src/hooks/useRankNotificationAutomation.tsx",
      "line": 70,
      "content": "console.log(",
      "context": "68:             // Final refresh after 5 seconds to ensure consistency\n69:             setTimeout(() => {\n70:               console.log(\n71:                 '[RankNotificationAutomation] Final refresh triggered'\n72:               );"
    },
    {
      "file": "src/hooks/useRankNotificationAutomation.tsx",
      "line": 79,
      "content": "console.log(",
      "context": "77:       )\n78:       .subscribe(status => {\n79:         console.log(\n80:           '[RankNotificationAutomation] Notification subscription status:',\n81:           status"
    },
    {
      "file": "src/hooks/useRankNotificationAutomation.tsx",
      "line": 86,
      "content": "console.log(",
      "context": "84: \n85:     return () => {\n86:       console.log(\n87:         '[RankNotificationAutomation] Cleaning up notification listener'\n88:       );"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 148,
      "content": "console.log('🔍 [DEBUG] Starting createRankRequest with data:', data);",
      "context": "146:   const createRankRequest = async (data: CreateRankRequestData) => {\n147:     try {\n148:       console.log('🔍 [DEBUG] Starting createRankRequest with data:', data);\n149:       console.log('🔍 [DEBUG] Environment check:', {\n150:         isDev: window.location.hostname === 'localhost',"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 149,
      "content": "console.log('🔍 [DEBUG] Environment check:', {",
      "context": "147:     try {\n148:       console.log('🔍 [DEBUG] Starting createRankRequest with data:', data);\n149:       console.log('🔍 [DEBUG] Environment check:', {\n150:         isDev: window.location.hostname === 'localhost',\n151:         hostname: window.location.hostname,"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 156,
      "content": "console.log('🔍 [DEBUG] User ID from data:', userId);",
      "context": "154:       \n155:       const userId = data.user_id;\n156:       console.log('🔍 [DEBUG] User ID from data:', userId);\n157:       \n158:       if (!userId) {"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 166,
      "content": "console.log('🔍 [DEBUG] Auth check:', {",
      "context": "164:       // Check current user authentication\n165:       const { data: { user }, error: authError } = await supabase.auth.getUser();\n166:       console.log('🔍 [DEBUG] Auth check:', { \n167:         authUser: user?.id, \n168:         dataUserId: userId, "
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 184,
      "content": "console.log('🔍 [DEBUG] Checking if profile exists for user:', userId);",
      "context": "182: \n183:       // 🛠️ FIX: Check if profile exists, create if missing\n184:       console.log('🔍 [DEBUG] Checking if profile exists for user:', userId);\n185:       const { data: existingProfile, error: profileCheckError } = await supabase\n186:         .from('profiles')"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 193,
      "content": "console.log('🛠️ [FIX] Profile not found, creating minimal profile for user:', userId);",
      "context": "191:       if (profileCheckError && profileCheckError.code === 'PGRST116') {\n192:         // Profile doesn't exist, create it with MINIMAL required data\n193:         console.log('🛠️ [FIX] Profile not found, creating minimal profile for user:', userId);\n194:         \n195:         // ✅ SIMPLIFIED: Create profile with only essential fields"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 236,
      "content": "console.log('🔍 [DEBUG] Existing request found:', existingRequest);",
      "context": "234:       if (existingRequest) {\n235:         const errorMsg = 'Bạn đã có yêu cầu rank đang chờ xét duyệt tại CLB này. Vui lòng chờ CLB xét duyệt trước khi gửi yêu cầu mới.';\n236:         console.log('🔍 [DEBUG] Existing request found:', existingRequest);\n237:         throw new Error(errorMsg);\n238:       }"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 248,
      "content": "console.log('🔍 [DEBUG] Base payload prepared:', basePayload);",
      "context": "246:       };\n247:       \n248:       console.log('🔍 [DEBUG] Base payload prepared:', basePayload);\n249: \n250:       // Try first insert WITH evidence_files if provided"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 258,
      "content": "console.log('🔍 [DEBUG] trying insert with evidence_files:', insertPayload);",
      "context": "256:           evidence_files: data.evidence_files,\n257:         };\n258:         console.log('🔍 [DEBUG] trying insert with evidence_files:', insertPayload);\n259:         const { data: insData, error } = await supabase\n260:           .from('rank_requests')"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 276,
      "content": "console.log('🔄 [RETRY] without evidence_files');",
      "context": "274:       if (!newRequest) {\n275:         if (firstError && firstError.message?.includes(\"'evidence_files'\")) {\n276:           console.log('🔄 [RETRY] without evidence_files');\n277:           const { data: insData2, error: retryErr } = await supabase\n278:             .from('rank_requests')"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 290,
      "content": "console.log('🔍 [DEBUG] inserting without evidence (original):', basePayload);",
      "context": "288:         } else if (!data.evidence_files?.length) {\n289:           // No evidence provided originally; perform single insert\n290:           console.log('🔍 [DEBUG] inserting without evidence (original):', basePayload);\n291:           const { data: insData3, error: err3 } = await supabase\n292:             .from('rank_requests')"
    },
    {
      "file": "src/hooks/useRankRequests.tsx",
      "line": 472,
      "content": "console.log('Rank request changed, refetching...');",
      "context": "470:         },\n471:         () => {\n472:           console.log('Rank request changed, refetching...');\n473:           fetchRankRequests(); // Refetch on any change\n474:         }"
    },
    {
      "file": "src/hooks/useRankUpdates.tsx",
      "line": 12,
      "content": "console.log('🎯 Setting up rank update notifications for user:', user.id);",
      "context": "10:     if (!user) return;\n11: \n12:     console.log('🎯 Setting up rank update notifications for user:', user.id);\n13: \n14:     // Listen for rank_approved notifications"
    },
    {
      "file": "src/hooks/useRankUpdates.tsx",
      "line": 32,
      "content": "console.log('🏆 Rank notification received:', notification);",
      "context": "30:             notification.type === 'rank_result'\n31:           ) {\n32:             console.log('🏆 Rank notification received:', notification);\n33: \n34:             const metadata = notification.metadata || {};"
    },
    {
      "file": "src/hooks/useRankUpdates.tsx",
      "line": 69,
      "content": "console.log('🔔 Rank notification subscription status:', status);",
      "context": "67:       )\n68:       .subscribe(status => {\n69:         console.log('🔔 Rank notification subscription status:', status);\n70:       });\n71: "
    },
    {
      "file": "src/hooks/useRankUpdates.tsx",
      "line": 73,
      "content": "console.log('🔕 Cleaning up rank notification subscription');",
      "context": "71: \n72:     return () => {\n73:       console.log('🔕 Cleaning up rank notification subscription');\n74:       supabase.removeChannel(notificationChannel);\n75:     };"
    },
    {
      "file": "src/hooks/useRealTimeTournamentState.tsx",
      "line": 19,
      "content": "console.log('User logged out - cleared registration state');",
      "context": "17:       setRegistrationState({});\n18:       setLoading({});\n19:       console.log('User logged out - cleared registration state');\n20:     }\n21:   }, [user]);"
    },
    {
      "file": "src/hooks/useRealTimeTournamentState.tsx",
      "line": 30,
      "content": "console.log('Auto-syncing registration state...');",
      "context": "28:       syncIntervalRef.current = setInterval(() => {\n29:         setLastSync(new Date());\n30:         console.log('Auto-syncing registration state...');\n31:       }, 30000); // 30 seconds\n32:     };"
    },
    {
      "file": "src/hooks/useRealTimeTournamentState.tsx",
      "line": 89,
      "content": "console.log(",
      "context": "87:             data.length > 0 &&\n88:             data[0].registration_status !== 'cancelled';\n89:           console.log(\n90:             `Registration check for ${tournamentId}:`,\n91:             isRegistered,"
    },
    {
      "file": "src/hooks/useRealTimeTournamentState.tsx",
      "line": 113,
      "content": "console.log(",
      "context": "111:       if (!user?.id || tournamentIds.length === 0) return;\n112: \n113:       console.log(\n114:         'Loading registration status for tournaments:',\n115:         tournamentIds"
    },
    {
      "file": "src/hooks/useRealTimeTournamentState.tsx",
      "line": 134,
      "content": "console.log('Updated registration state:', updated);",
      "context": "132:         setRegistrationState(prev => {\n133:           const updated = { ...prev, ...newState };\n134:           console.log('Updated registration state:', updated);\n135:           return updated;\n136:         });"
    },
    {
      "file": "src/hooks/useRealTimeTournamentState.tsx",
      "line": 147,
      "content": "console.log(",
      "context": "145:   const setRegistrationStatus = useCallback(\n146:     (tournamentId: string, isRegistered: boolean) => {\n147:       console.log(\n148:         `Setting registration status for ${tournamentId}:`,\n149:         isRegistered"
    },
    {
      "file": "src/hooks/useRealTimeTournamentState.tsx",
      "line": 174,
      "content": "console.log(`Getting registration status for ${tournamentId}:`, status);",
      "context": "172:     (tournamentId: string): boolean => {\n173:       const status = registrationState[tournamentId];\n174:       console.log(`Getting registration status for ${tournamentId}:`, status);\n175:       return status || false;\n176:     },"
    },
    {
      "file": "src/hooks/useRealTimeTournamentState.tsx",
      "line": 191,
      "content": "console.log('Force refreshing tournament:', tournamentId);",
      "context": "189:   const refreshTournamentStatus = useCallback(\n190:     async (tournamentId: string) => {\n191:       console.log('Force refreshing tournament:', tournamentId);\n192:       const status = await checkRegistrationStatus(tournamentId);\n193:       setRegistrationStatus(tournamentId, status);"
    },
    {
      "file": "src/hooks/useRealTimeTournamentState.tsx",
      "line": 203,
      "content": "console.log('Cleared all registration state');",
      "context": "201:     setRegistrationState({});\n202:     setLoading({});\n203:     console.log('Cleared all registration state');\n204:   }, []);\n205: "
    },
    {
      "file": "src/hooks/useRealtimeSubscriptions.tsx",
      "line": 309,
      "content": "// ...removed console.log('Tournament update received:', payload)",
      "context": "307:       },\n308:       payload => {\n309:         // ...removed console.log('Tournament update received:', payload)\n310:         onUpdate?.(payload);\n311:       }"
    },
    {
      "file": "src/hooks/useRealtimeSubscriptions.tsx",
      "line": 315,
      "content": "// ...removed console.log('Tournament subscription status:', status)",
      "context": "313: \n314:     channel.subscribe(status => {\n315:       // ...removed console.log('Tournament subscription status:', status)\n316: \n317:       if (status === 'SUBSCRIBED') {"
    },
    {
      "file": "src/hooks/useRealtimeSubscriptions.tsx",
      "line": 333,
      "content": "// ...removed console.log('Cleaning up tournament subscription')",
      "context": "331:     return () => {\n332:       if (channelRef.current) {\n333:         // ...removed console.log('Cleaning up tournament subscription')\n334:         supabase.removeChannel(channelRef.current);\n335:         channelRef.current = null;"
    },
    {
      "file": "src/hooks/useRealtimeTournament.ts",
      "line": 64,
      "content": "console.log(",
      "context": "62:     if (!tournamentId) return;\n63: \n64:     console.log(\n65:       '🔄 Setting up real-time subscription for tournament:',\n66:       tournamentId"
    },
    {
      "file": "src/hooks/useRealtimeTournament.ts",
      "line": 114,
      "content": "console.log('🔄 Tournament registrations updated:', payload);",
      "context": "112:         },\n113:         payload => {\n114:           console.log('🔄 Tournament registrations updated:', payload);\n115:           // Refetch tournament to get updated participant count\n116:           if (tournamentId) {"
    },
    {
      "file": "src/hooks/useRealtimeTournament.ts",
      "line": 124,
      "content": "console.log(",
      "context": "122: \n123:     return () => {\n124:       console.log(\n125:         '🔄 Cleaning up real-time subscription for tournament:',\n126:         tournamentId"
    },
    {
      "file": "src/hooks/useRealtimeTournamentData.ts",
      "line": 11,
      "content": "console.log(",
      "context": "9:     if (!tournamentId) return;\n10: \n11:     console.log(\n12:       '🔄 Setting up enhanced real-time subscription for tournament:',\n13:       tournamentId"
    },
    {
      "file": "src/hooks/useRealtimeTournamentData.ts",
      "line": 27,
      "content": "console.log('🔄 Tournament registrations updated:', payload);",
      "context": "25:         },\n26:         payload => {\n27:           console.log('🔄 Tournament registrations updated:', payload);\n28:           onUpdate();\n29:         }"
    },
    {
      "file": "src/hooks/useRealtimeTournamentData.ts",
      "line": 40,
      "content": "console.log('🔄 Tournament matches updated:', payload);",
      "context": "38:         },\n39:         payload => {\n40:           console.log('🔄 Tournament matches updated:', payload);\n41: \n42:           // Force immediate refresh for match updates"
    },
    {
      "file": "src/hooks/useRealtimeTournamentData.ts",
      "line": 52,
      "content": "console.log(",
      "context": "50:               payload.new.status === 'completed'\n51:             ) {\n52:               console.log(\n53:                 '🏆 Semifinal completed, checking for Championship Final advancement'\n54:               );"
    },
    {
      "file": "src/hooks/useRealtimeTournamentData.ts",
      "line": 77,
      "content": "console.log('🔄 Tournament results updated:', payload);",
      "context": "75:         },\n76:         payload => {\n77:           console.log('🔄 Tournament results updated:', payload);\n78:           onUpdate();\n79:         }"
    },
    {
      "file": "src/hooks/useRealtimeTournamentData.ts",
      "line": 90,
      "content": "console.log('🔄 Tournament updated:', payload);",
      "context": "88:         },\n89:         payload => {\n90:           console.log('🔄 Tournament updated:', payload);\n91:           onUpdate();\n92:         }"
    },
    {
      "file": "src/hooks/useRealtimeTournamentData.ts",
      "line": 95,
      "content": "console.log(",
      "context": "93:       )\n94:       .subscribe(status => {\n95:         console.log(\n96:           `🔗 Enhanced tournament data subscription status: ${status}`\n97:         );"
    },
    {
      "file": "src/hooks/useRealtimeTournamentData.ts",
      "line": 101,
      "content": "console.log(",
      "context": "99: \n100:     return () => {\n101:       console.log(\n102:         '🔄 Cleaning up enhanced real-time subscription for tournament data'\n103:       );"
    },
    {
      "file": "src/hooks/useRealtimeTournamentSync.tsx",
      "line": 19,
      "content": "console.log(",
      "context": "17: \n18:   useEffect(() => {\n19:     console.log(\n20:       '🔄 Setting up comprehensive tournament sync for:',\n21:       tournamentId"
    },
    {
      "file": "src/hooks/useRealtimeTournamentSync.tsx",
      "line": 38,
      "content": "console.log('🏆 Tournament change detected:', payload);",
      "context": "36:         },\n37:         payload => {\n38:           console.log('🏆 Tournament change detected:', payload);\n39:           setLastUpdate(new Date());\n40: "
    },
    {
      "file": "src/hooks/useRealtimeTournamentSync.tsx",
      "line": 84,
      "content": "console.log('⚔️ Tournament match updated:', payload);",
      "context": "82:         },\n83:         payload => {\n84:           console.log('⚔️ Tournament match updated:', payload);\n85:           setLastUpdate(new Date());\n86: "
    },
    {
      "file": "src/hooks/useRealtimeTournamentSync.tsx",
      "line": 122,
      "content": "console.log('🏆 Tournament results updated:', payload);",
      "context": "120:         },\n121:         payload => {\n122:           console.log('🏆 Tournament results updated:', payload);\n123:           setLastUpdate(new Date());\n124: "
    },
    {
      "file": "src/hooks/useRealtimeTournamentSync.tsx",
      "line": 143,
      "content": "console.log('💎 SPA points awarded:', payload);",
      "context": "141:           const newRecord = payload.new as any;\n142:           if (!tournamentId || newRecord.source_id === tournamentId) {\n143:             console.log('💎 SPA points awarded:', payload);\n144:             setLastUpdate(new Date());\n145:             toast.success(`💎 +${newRecord.points_earned} SPA Points!`);"
    },
    {
      "file": "src/hooks/useRealtimeTournamentSync.tsx",
      "line": 160,
      "content": "console.log('🔔 Tournament notification:', payload);",
      "context": "158:         },\n159:         payload => {\n160:           console.log('🔔 Tournament notification:', payload);\n161:           setLastUpdate(new Date());\n162:         }"
    },
    {
      "file": "src/hooks/useRealtimeTournamentSync.tsx",
      "line": 176,
      "content": "console.log('🤖 Automation log update:', logData);",
      "context": "174:         payload => {\n175:           const logData = payload.new as any;\n176:           console.log('🤖 Automation log update:', logData);\n177:           setLastUpdate(new Date());\n178: "
    },
    {
      "file": "src/hooks/useRealtimeTournamentSync.tsx",
      "line": 218,
      "content": "console.log(`🔗 Tournament sync status: ${status}`);",
      "context": "216: \n217:       .subscribe(status => {\n218:         console.log(`🔗 Tournament sync status: ${status}`);\n219:         setIsConnected(status === 'SUBSCRIBED');\n220: "
    },
    {
      "file": "src/hooks/useRealtimeTournamentSync.tsx",
      "line": 229,
      "content": "console.log('🔌 Cleaning up tournament sync');",
      "context": "227: \n228:     return () => {\n229:       console.log('🔌 Cleaning up tournament sync');\n230:       supabase.removeChannel(channel);\n231:       setIsConnected(false);"
    },
    {
      "file": "src/hooks/useRealtimeTournaments.ts",
      "line": 129,
      "content": "console.log('🔄 Tournament registrations updated, refreshing list');",
      "context": "127:         },\n128:         payload => {\n129:           console.log('🔄 Tournament registrations updated, refreshing list');\n130:           // Refetch tournaments to get updated participant counts\n131:           fetchTournaments();"
    },
    {
      "file": "src/hooks/useRecentTournaments.ts",
      "line": 52,
      "content": "console.log('🔍 Loading recent tournaments for user:', user.id);",
      "context": "50:       setError(null);\n51: \n52:       console.log('🔍 Loading recent tournaments for user:', user.id);\n53: \n54:       const { data, error: fetchError } = await supabase"
    },
    {
      "file": "src/hooks/useRecentTournaments.ts",
      "line": 106,
      "content": "console.log('🔍 Loading tournament template for ID:', tournamentId);",
      "context": "104:       setError(null);\n105: \n106:       console.log('🔍 Loading tournament template for ID:', tournamentId);\n107: \n108:       const { data, error: fetchError } = await supabase"
    },
    {
      "file": "src/hooks/useRecentTournaments.ts",
      "line": 134,
      "content": "console.log('ℹ️ Tournament not found or no access');",
      "context": "132: \n133:       if (!data) {\n134:         console.log('ℹ️ Tournament not found or no access');\n135:         toast.error('Không tìm thấy giải đấu hoặc không có quyền truy cập');\n136:         return null;"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 20,
      "content": "console.log(",
      "context": "18:       setIsProcessing(true);\n19:       try {\n20:         console.log(\n21:           '🔄 Processing Losers R101 completion for tournament:',\n22:           tournamentId"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 45,
      "content": "console.log('ℹ️ Losers R101 completion not needed:', result?.message);",
      "context": "43:           return result as SABOAdvancementResult;\n44:         } else {\n45:           console.log('ℹ️ Losers R101 completion not needed:', result?.message);\n46:           return (result || { success: false }) as SABOAdvancementResult;\n47:         }"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 63,
      "content": "console.log(",
      "context": "61:       setIsProcessing(true);\n62:       try {\n63:         console.log(\n64:           '🔄 Processing Losers R102 completion for tournament:',\n65:           tournamentId"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 88,
      "content": "console.log('ℹ️ Losers R102 completion not needed:', result?.message);",
      "context": "86:           return result as SABOAdvancementResult;\n87:         } else {\n88:           console.log('ℹ️ Losers R102 completion not needed:', result?.message);\n89:           return (result || { success: false }) as SABOAdvancementResult;\n90:         }"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 106,
      "content": "console.log(",
      "context": "104:       setIsProcessing(true);\n105:       try {\n106:         console.log(\n107:           '🔄 Processing Losers R103 completion for tournament:',\n108:           tournamentId"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 131,
      "content": "console.log('ℹ️ Losers R103 completion not needed:', result?.message);",
      "context": "129:           return result as SABOAdvancementResult;\n130:         } else {\n131:           console.log('ℹ️ Losers R103 completion not needed:', result?.message);\n132:           return (result || { success: false }) as SABOAdvancementResult;\n133:         }"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 149,
      "content": "console.log(",
      "context": "147:       setIsProcessing(true);\n148:       try {\n149:         console.log(\n150:           '🔄 Processing Losers R201 completion for tournament:',\n151:           tournamentId"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 174,
      "content": "console.log('ℹ️ Losers R201 completion not needed:', result?.message);",
      "context": "172:           return result as SABOAdvancementResult;\n173:         } else {\n174:           console.log('ℹ️ Losers R201 completion not needed:', result?.message);\n175:           return (result || { success: false }) as SABOAdvancementResult;\n176:         }"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 192,
      "content": "console.log(",
      "context": "190:       setIsProcessing(true);\n191:       try {\n192:         console.log(\n193:           '🔄 Processing Losers R202 completion for tournament:',\n194:           tournamentId"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 217,
      "content": "console.log('ℹ️ Losers R202 completion not needed:', result?.message);",
      "context": "215:           return result as SABOAdvancementResult;\n216:         } else {\n217:           console.log('ℹ️ Losers R202 completion not needed:', result?.message);\n218:           return (result || { success: false }) as SABOAdvancementResult;\n219:         }"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 235,
      "content": "console.log(",
      "context": "233:       setIsProcessing(true);\n234:       try {\n235:         console.log(\n236:           '🔄 Setting up semifinals pairings for tournament:',\n237:           tournamentId"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 260,
      "content": "console.log('ℹ️ Semifinals setup not needed:', result?.message);",
      "context": "258:           return result as SABOAdvancementResult;\n259:         } else {\n260:           console.log('ℹ️ Semifinals setup not needed:', result?.message);\n261:           return (result || { success: false }) as SABOAdvancementResult;\n262:         }"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 278,
      "content": "console.log(",
      "context": "276:       setIsProcessing(true);\n277:       try {\n278:         console.log(\n279:           '🔄 Processing semifinals completion for tournament:',\n280:           tournamentId"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 303,
      "content": "console.log('ℹ️ Semifinals completion not needed:', result?.message);",
      "context": "301:           return result as SABOAdvancementResult;\n302:         } else {\n303:           console.log('ℹ️ Semifinals completion not needed:', result?.message);\n304:           return (result || { success: false }) as SABOAdvancementResult;\n305:         }"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 321,
      "content": "console.log('🔄 Finalizing tournament:', tournamentId);",
      "context": "319:       setIsProcessing(true);\n320:       try {\n321:         console.log('🔄 Finalizing tournament:', tournamentId);\n322: \n323:         // Use proper repair function for tournament advancement"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 343,
      "content": "console.log(",
      "context": "341:           return result as SABOAdvancementResult;\n342:         } else {\n343:           console.log(\n344:             'ℹ️ Tournament finalization not needed:',\n345:             result?.message"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 364,
      "content": "console.log('🔄 Updating tournament status:', tournamentId);",
      "context": "362:       setIsProcessing(true);\n363:       try {\n364:         console.log('🔄 Updating tournament status:', tournamentId);\n365: \n366:         // Use proper repair function for tournament advancement"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 385,
      "content": "console.log(",
      "context": "383:           return result as SABOAdvancementResult;\n384:         } else {\n385:           console.log(\n386:             'ℹ️ Tournament status update not needed:',\n387:             result?.message"
    },
    {
      "file": "src/hooks/useSABOAdvancement.ts",
      "line": 408,
      "content": "console.log(",
      "context": "406:       setIsProcessing(true);\n407:       try {\n408:         console.log(\n409:           '🤖 Processing comprehensive SABO advancement for tournament:',\n410:           tournamentId"
    },
    {
      "file": "src/hooks/useSABOBracket.ts",
      "line": 32,
      "content": "console.log('🏗️ Creating double elimination bracket:', tournamentId);",
      "context": "30:   const createBracket = useMutation({\n31:     mutationFn: async ({ tournamentId }: CreateBracketParams) => {\n32:       console.log('🏗️ Creating double elimination bracket:', tournamentId);\n33: \n34:       const { data, error } = await supabase.rpc("
    },
    {
      "file": "src/hooks/useSABOBracket.ts",
      "line": 79,
      "content": "console.log('🎯 Submitting score with SABO Manager:', {",
      "context": "77:       player2Score,\n78:     }: SubmitScoreParams) => {\n79:       console.log('🎯 Submitting score with SABO Manager:', {\n80:         matchId,\n81:         player1Score,"
    },
    {
      "file": "src/hooks/useSABOBracket.ts",
      "line": 166,
      "content": "console.log('🎯 Manually advancing winner for match:', matchId);",
      "context": "164:   const advanceWinner = useMutation({\n165:     mutationFn: async ({ matchId }: { matchId: string }) => {\n166:       console.log('🎯 Manually advancing winner for match:', matchId);\n167: \n168:       const { data, error } = await supabase.rpc("
    },
    {
      "file": "src/hooks/useSPABalance.tsx",
      "line": 19,
      "content": "console.log('Fetching SPA balance for user:', user.id);",
      "context": "17: \n18:       try {\n19:         console.log('Fetching SPA balance for user:', user.id);\n20: \n21:         const { data, error } = await supabase"
    },
    {
      "file": "src/hooks/useSPABalance.tsx",
      "line": 32,
      "content": "console.log('SPA balance fetched:', newBalance);",
      "context": "30:         } else {\n31:           const newBalance = data?.spa_points || 0;\n32:           console.log('SPA balance fetched:', newBalance);\n33:           setBalance(newBalance);\n34:         }"
    },
    {
      "file": "src/hooks/useSaboChallenge.tsx",
      "line": 73,
      "content": "console.log('Fetching SABO challenges for user:', user.id);",
      "context": "71:     try {\n72:       // Mock data to avoid TypeScript issues - replace with actual API call when needed\n73:       console.log('Fetching SABO challenges for user:', user.id);\n74:       return [];\n75:     } catch (error) {"
    },
    {
      "file": "src/hooks/useSaboHandicap.ts",
      "line": 233,
      "content": "console.warn(`Missing rank data for challenge ${challenge.id}`);",
      "context": "231:             successCount++;\n232:           } else {\n233:             console.warn(`Missing rank data for challenge ${challenge.id}`);\n234:             errorCount++;\n235:           }"
    },
    {
      "file": "src/hooks/useServerSideAuth.tsx",
      "line": 11,
      "content": "console.log('Admin action:', action, details);",
      "context": "9:     try {\n10:       // Mock implementation - log to console instead of database\n11:       console.log('Admin action:', action, details);\n12:       return true;\n13:     } catch (error) {"
    },
    {
      "file": "src/hooks/useServiceWorker.tsx",
      "line": 23,
      "content": "console.log('Service Workers are not supported');",
      "context": "21:   const registerServiceWorker = async () => {\n22:     if (!state.isSupported) {\n23:       console.log('Service Workers are not supported');\n24:       return;\n25:     }"
    },
    {
      "file": "src/hooks/useServiceWorker.tsx",
      "line": 35,
      "content": "console.log('Service Worker registered:', registration);",
      "context": "33:       });\n34: \n35:       console.log('Service Worker registered:', registration);\n36: \n37:       setState(prev => ({"
    },
    {
      "file": "src/hooks/useServiceWorker.tsx",
      "line": 46,
      "content": "console.log('Service Worker update found');",
      "context": "44:       // Check for updates\n45:       registration.addEventListener('updatefound', () => {\n46:         console.log('Service Worker update found');\n47:         setState(prev => ({ ...prev, updateAvailable: true }));\n48:       });"
    },
    {
      "file": "src/hooks/useServiceWorker.tsx",
      "line": 52,
      "content": "console.log('Message from SW:', event.data);",
      "context": "50:       // Listen for messages from SW\n51:       navigator.serviceWorker.addEventListener('message', event => {\n52:         console.log('Message from SW:', event.data);\n53:       });\n54: "
    },
    {
      "file": "src/hooks/useSocial.tsx",
      "line": 13,
      "content": "console.log('Follow user:', userId);",
      "context": "11:     mutate: async (userId: string) => {\n12:       try {\n13:         console.log('Follow user:', userId);\n14:         toast.success('User followed successfully');\n15:       } catch (error) {"
    },
    {
      "file": "src/hooks/useSocial.tsx",
      "line": 25,
      "content": "console.log('Unfollow user:', userId);",
      "context": "23:     mutate: async (userId: string) => {\n24:       try {\n25:         console.log('Unfollow user:', userId);\n26:         toast.success('User unfollowed successfully');\n27:       } catch (error) {"
    },
    {
      "file": "src/hooks/useSocialProfile.ts",
      "line": 19,
      "content": "console.warn('useSocialProfile: userId is required');",
      "context": "17:   const navigateToSocialProfile = (userId: string, userName?: string) => {\n18:     if (!userId) {\n19:       console.warn('useSocialProfile: userId is required');\n20:       return;\n21:     }"
    },
    {
      "file": "src/hooks/useSocialProfile.ts",
      "line": 34,
      "content": "console.log(`Navigating to social profile: ${userName} (${userId})`);",
      "context": "32:     \n33:     if (userName) {\n34:       console.log(`Navigating to social profile: ${userName} (${userId})`);\n35:     }\n36:   };"
    },
    {
      "file": "src/hooks/useSwipeGestures.tsx",
      "line": 85,
      "content": "// ...removed console.log(`Swiped ${direction}: ${swipeActions[direction]}`)",
      "context": "83:     setSwipeDirection(direction);\n84: \n85:     // ...removed console.log(`Swiped ${direction}: ${swipeActions[direction]}`)\n86: \n87:     setTimeout(() => {"
    },
    {
      "file": "src/hooks/useSyncCoordinator.tsx",
      "line": 31,
      "content": "console.log(`Syncing ${type} data:`, { operation, count: data.length });",
      "context": "29:         await new Promise(resolve => setTimeout(resolve, 1000));\n30: \n31:         console.log(`Syncing ${type} data:`, { operation, count: data.length });\n32: \n33:         setLastSyncTime(new Date());"
    },
    {
      "file": "src/hooks/useSystemHealthCheck.tsx",
      "line": 26,
      "content": "console.log('[HealthCheck] 🏥 Health check system initializing...');",
      "context": "24:   }\n25: ) => {\n26:   console.log('[HealthCheck] 🏥 Health check system initializing...');\n27:   const queryClient = useQueryClient();\n28:   const [healthChecks, setHealthChecks] = useState<HealthCheckItem[]>(["
    },
    {
      "file": "src/hooks/useSystemHealthCheck.tsx",
      "line": 52,
      "content": "console.log('[HealthCheck] Starting system health check...');",
      "context": "50: \n51:   const performHealthCheck = async () => {\n52:     console.log('[HealthCheck] Starting system health check...');\n53: \n54:     const results: HealthCheckItem[] = [];"
    },
    {
      "file": "src/hooks/useSystemHealthCheck.tsx",
      "line": 154,
      "content": "console.log('[HealthCheck] Auto-fixing critical issues:', issues);",
      "context": "152: \n153:   const autoFixCriticalIssues = async (issues: string[]) => {\n154:     console.log('[HealthCheck] Auto-fixing critical issues:', issues);\n155: \n156:     for (const issue of issues) {"
    },
    {
      "file": "src/hooks/useSystemHealthCheck.tsx",
      "line": 196,
      "content": "console.log(",
      "context": "194:   // Temporarily disable periodic health checks to reduce load during startup issues\n195:   useEffect(() => {\n196:     console.log(\n197:       '[HealthCheck] ⚠️ Periodic health checks temporarily disabled for performance debugging'\n198:     );"
    },
    {
      "file": "src/hooks/useSystemHealthCheck.tsx",
      "line": 202,
      "content": "console.log('[HealthCheck] Running delayed initial health check...');",
      "context": "200:     // Only run initial check after a delay to not interfere with page load\n201:     const timer = setTimeout(() => {\n202:       console.log('[HealthCheck] Running delayed initial health check...');\n203:       performHealthCheck();\n204:     }, 10000); // 10 seconds delay"
    },
    {
      "file": "src/hooks/useSystemMessages.tsx",
      "line": 20,
      "content": "console.log('Creating notification:', {",
      "context": "18:     try {\n19:       // Mock notification creation since function doesn't exist\n20:       console.log('Creating notification:', {\n21:         target_user_id: targetUserId,\n22:         notification_type: type,"
    },
    {
      "file": "src/hooks/useSystemMessages.tsx",
      "line": 76,
      "content": "console.log('Creating bulk notifications:', notifications);",
      "context": "74:       if (notifications && notifications.length > 0) {\n75:         // Mock bulk notification creation since function doesn't exist\n76:         console.log('Creating bulk notifications:', notifications);\n77:       }\n78:     } catch (error) {"
    },
    {
      "file": "src/hooks/useTokenRefresh.ts",
      "line": 55,
      "content": "console.warn('🔄 Token early refresh threw exception:', err);",
      "context": "53:           }\n54:         } catch (err) {\n55:           console.warn('🔄 Token early refresh threw exception:', err);\n56:         }\n57:       }, delay);"
    },
    {
      "file": "src/hooks/useTournamentManagement.ts",
      "line": 148,
      "content": "console.log('Starting tournament with ID:', tournamentId);",
      "context": "146:     try {\n147:       setUpdating(true);\n148:       console.log('Starting tournament with ID:', tournamentId);\n149: \n150:       const { error } = await supabase"
    },
    {
      "file": "src/hooks/useTournamentManagement.ts",
      "line": 198,
      "content": "console.log('Updating tournament management status:', {",
      "context": "196: \n197:         // Mock function call since it doesn't exist\n198:         console.log('Updating tournament management status:', {\n199:           p_tournament_id: tournamentId,\n200:           p_new_status: newStatus,"
    },
    {
      "file": "src/hooks/useTournamentManagementHub.ts",
      "line": 120,
      "content": "console.log('🔄 Tournament updated:', payload);",
      "context": "118:         },\n119:         payload => {\n120:           console.log('🔄 Tournament updated:', payload);\n121:           // Refresh tournament list when any tournament changes\n122:           fetchTournaments();"
    },
    {
      "file": "src/hooks/useTournamentMatches.ts",
      "line": 60,
      "content": "console.log('🎯 Fetching matches for tournament:', tournamentId);",
      "context": "58:       setError(null);\n59: \n60:       console.log('🎯 Fetching matches for tournament:', tournamentId);\n61: \n62:       // Fetch matches with enhanced schema"
    },
    {
      "file": "src/hooks/useTournamentMatches.ts",
      "line": 102,
      "content": "console.log(",
      "context": "100:       }));\n101: \n102:       console.log(\n103:         '✅ Matches with cached profiles:',\n104:         matchesWithProfiles.length"
    },
    {
      "file": "src/hooks/useTournamentMatches.ts",
      "line": 120,
      "content": "console.log(",
      "context": "118:     if (!tournamentId) return;\n119: \n120:     console.log(\n121:       '🔄 Setting up optimized real-time subscription for tournament:',\n122:       tournamentId"
    },
    {
      "file": "src/hooks/useTournamentMatches.ts",
      "line": 132,
      "content": "console.log('🔄 Processing queued updates:', updateQueue.size);",
      "context": "130:       debounceTimer = setTimeout(() => {\n131:         if (updateQueue.size > 0) {\n132:           console.log('🔄 Processing queued updates:', updateQueue.size);\n133:           updateQueue.clear();\n134:           fetchMatches();"
    },
    {
      "file": "src/hooks/useTournamentMatches.ts",
      "line": 150,
      "content": "console.log(",
      "context": "148:         },\n149:         payload => {\n150:           console.log(\n151:             '🔄 Tournament match real-time update:',\n152:             payload.eventType,"
    },
    {
      "file": "src/hooks/useTournamentMatches.ts",
      "line": 197,
      "content": "console.log(",
      "context": "195:         payload => {\n196:           const logData = payload.new as any;\n197:           console.log(\n198:             '🤖 Automation event:',\n199:             logData.automation_type,"
    },
    {
      "file": "src/hooks/useTournamentRealtime.ts",
      "line": 40,
      "content": "console.log('🔄 Loading initial tournament data for:', tournamentId);",
      "context": "38:   const loadInitialData = useCallback(async () => {\n39:     try {\n40:       console.log('🔄 Loading initial tournament data for:', tournamentId);\n41: \n42:       // Load tournament registrations with user profiles"
    },
    {
      "file": "src/hooks/useTournamentRealtime.ts",
      "line": 96,
      "content": "console.log('📊 Initial stats loaded:', {",
      "context": "94:       });\n95: \n96:       console.log('📊 Initial stats loaded:', {\n97:         confirmed,\n98:         paid,"
    },
    {
      "file": "src/hooks/useTournamentRealtime.ts",
      "line": 113,
      "content": "console.log('📡 Registration change detected:', payload);",
      "context": "111:   // Handle real-time registration changes\n112:   const handleRegistrationChange = useCallback((payload: any) => {\n113:     console.log('📡 Registration change detected:', payload);\n114: \n115:     switch (payload.eventType) {"
    },
    {
      "file": "src/hooks/useTournamentRealtime.ts",
      "line": 117,
      "content": "console.log('➕ New registration:', payload.new);",
      "context": "115:     switch (payload.eventType) {\n116:       case 'INSERT':\n117:         console.log('➕ New registration:', payload.new);\n118:         handleNewRegistration(payload.new);\n119:         break;"
    },
    {
      "file": "src/hooks/useTournamentRealtime.ts",
      "line": 121,
      "content": "console.log('🔄 Registration updated:', payload.new);",
      "context": "119:         break;\n120:       case 'UPDATE':\n121:         console.log('🔄 Registration updated:', payload.new);\n122:         handleRegistrationUpdate(payload.new);\n123:         break;"
    },
    {
      "file": "src/hooks/useTournamentRealtime.ts",
      "line": 125,
      "content": "console.log('➖ Registration deleted:', payload.old);",
      "context": "123:         break;\n124:       case 'DELETE':\n125:         console.log('➖ Registration deleted:', payload.old);\n126:         handleRegistrationDelete(payload.old);\n127:         break;"
    },
    {
      "file": "src/hooks/useTournamentRealtime.ts",
      "line": 225,
      "content": "console.log('🏆 Tournament data updated:', payload);",
      "context": "223:   // Handle tournament stats changes\n224:   const handleTournamentChange = useCallback((payload: any) => {\n225:     console.log('🏆 Tournament data updated:', payload);\n226: \n227:     if (payload.eventType === 'UPDATE' && payload.new) {"
    },
    {
      "file": "src/hooks/useTournamentRealtime.ts",
      "line": 243,
      "content": "console.log(",
      "context": "241:     loadInitialData();\n242: \n243:     console.log(\n244:       '🔄 Setting up real-time subscriptions for tournament:',\n245:       tournamentId"
    },
    {
      "file": "src/hooks/useTournamentRecommendations.tsx",
      "line": 71,
      "content": "// ...removed console.log('No user location found')",
      "context": "69:       setUserLocation(mockLocation);\n70:     } catch (error) {\n71:       // ...removed console.log('No user location found')\n72:     }\n73:   };"
    },
    {
      "file": "src/hooks/useTournamentRecommendations.tsx",
      "line": 281,
      "content": "console.log('Mock tracking interaction:', {",
      "context": "279:     try {\n280:       // Mock track interaction since user_club_interactions table doesn't exist\n281:       console.log('Mock tracking interaction:', {\n282:         clubId,\n283:         interactionType,"
    },
    {
      "file": "src/hooks/useTournamentRegistrationFlow.tsx",
      "line": 225,
      "content": "console.log('All eligibility reasons:', eligibility.reasons);",
      "context": "223:             toast.error(primaryReason);\n224:             if (eligibility.reasons.length > 1) {\n225:               console.log('All eligibility reasons:', eligibility.reasons);\n226:             }\n227:             setRegistrationStatus(prev => ({"
    },
    {
      "file": "src/hooks/useTournamentRegistrationState.tsx",
      "line": 17,
      "content": "console.log('User logged out - cleared registration state');",
      "context": "15:       setRegistrationState({});\n16:       setLoading({});\n17:       console.log('User logged out - cleared registration state');\n18:     }\n19:   }, [user]);"
    },
    {
      "file": "src/hooks/useTournamentRegistrations.ts",
      "line": 45,
      "content": "console.log('🔍 Fetching registrations for tournament:', tournamentId);",
      "context": "43:       setError(null);\n44: \n45:       console.log('🔍 Fetching registrations for tournament:', tournamentId);\n46: \n47:       // First, fetch tournament registrations without foreign key join"
    },
    {
      "file": "src/hooks/useTournamentRegistrations.ts",
      "line": 148,
      "content": "console.log(",
      "context": "146:     if (!tournamentId) return;\n147: \n148:     console.log(\n149:       '🔄 Setting up real-time subscription for registrations:',\n150:       tournamentId"
    },
    {
      "file": "src/hooks/useTournamentResults.ts",
      "line": 21,
      "content": "console.log('🏆 Fetching tournament results for:', tournamentId);",
      "context": "19:       setError(null);\n20: \n21:       console.log('🏆 Fetching tournament results for:', tournamentId);\n22: \n23:       // First, get tournament results"
    },
    {
      "file": "src/hooks/useTournamentResults.ts",
      "line": 36,
      "content": "console.log('📭 No tournament results found');",
      "context": "34: \n35:       if (!resultsData || resultsData.length === 0) {\n36:         console.log('📭 No tournament results found');\n37:         setResults([]);\n38:         return;"
    },
    {
      "file": "src/hooks/useTournamentResults.ts",
      "line": 128,
      "content": "console.log(",
      "context": "126:     if (!tournamentId) return;\n127: \n128:     console.log(\n129:       '🔄 Setting up real-time subscription for tournament results:',\n130:       tournamentId"
    },
    {
      "file": "src/hooks/useTournamentRewardSync.ts",
      "line": 13,
      "content": "console.log(",
      "context": "11: \n12:     try {\n13:       console.log(\n14:         '🔄 Syncing tournament rewards...',\n15:         tournamentId ? `for ${tournamentId}` : 'for all tournaments'"
    },
    {
      "file": "src/hooks/useTournamentRewardsManager.ts",
      "line": 44,
      "content": "console.log(",
      "context": "42:       // If no prize tiers exist, create default ones\n43:       if (!data || data.length === 0) {\n44:         console.log(\n45:           '🔧 No prize tiers found, creating default ones for tournament:',\n46:           tournamentId"
    },
    {
      "file": "src/hooks/useTournamentRewardsManager.ts",
      "line": 107,
      "content": "console.warn('⚠️ Cannot convert to prize tiers without tournamentId');",
      "context": "105:   ): Omit<TournamentPrizeTier, 'id'>[] => {\n106:     if (!tournamentId || tournamentId.trim() === '') {\n107:       console.warn('⚠️ Cannot convert to prize tiers without tournamentId');\n108:       return [];\n109:     }"
    },
    {
      "file": "src/hooks/useTournamentRewardsManager.ts",
      "line": 130,
      "content": "console.log(",
      "context": "128:       // If no tournamentId, skip database save but return success for UI consistency\n129:       if (!tournamentId || tournamentId.trim() === '') {\n130:         console.log(\n131:           '⏸️ No tournamentId provided, skipping database save for now'\n132:         );"
    },
    {
      "file": "src/hooks/useTournamentUtils.tsx",
      "line": 72,
      "content": "console.log('Double elimination tournament setup:', setupResult);",
      "context": "70:         }\n71: \n72:         console.log('Double elimination tournament setup:', setupResult);\n73: \n74:         const result = setupResult as any;"
    },
    {
      "file": "src/hooks/useTournamentUtils.tsx",
      "line": 184,
      "content": "console.log('Deleting tournament seeding for:', tournamentId);",
      "context": "182: \n183:       // Mock delete tournament seeding since table doesn't exist\n184:       console.log('Deleting tournament seeding for:', tournamentId);\n185: \n186:       // Finally delete tournament"
    },
    {
      "file": "src/hooks/useUnifiedMessages.ts",
      "line": 315,
      "content": "console.log('New message received:', payload);",
      "context": "313:         },\n314:         (payload) => {\n315:           console.log('New message received:', payload);\n316:           const newMessage = payload.new as Message;\n317:           "
    },
    {
      "file": "src/hooks/useUnifiedMessages.ts",
      "line": 348,
      "content": "console.log('Message updated:', payload);",
      "context": "346:         },\n347:         (payload) => {\n348:           console.log('Message updated:', payload);\n349:           setMessages(prev => \n350:             prev.map(msg => "
    },
    {
      "file": "src/hooks/useUnifiedMessages.ts",
      "line": 359,
      "content": "console.log('Unified messages subscription status:', status);",
      "context": "357:       )\n358:       .subscribe((status) => {\n359:         console.log('Unified messages subscription status:', status);\n360:         setIsConnected(status === 'SUBSCRIBED');\n361:       });"
    },
    {
      "file": "src/hooks/useUnifiedNotifications.ts",
      "line": 181,
      "content": "console.log('🔄 Notifications force refreshed:', data?.length || 0);",
      "context": "179:       \n180:       if (forceRefresh) {\n181:         console.log('🔄 Notifications force refreshed:', data?.length || 0);\n182:       }\n183: "
    },
    {
      "file": "src/hooks/useUnifiedNotifications.ts",
      "line": 361,
      "content": "console.log('New notification received:', payload);",
      "context": "359:             },\n360:             (payload) => {\n361:               console.log('New notification received:', payload);\n362:               const newNotification = payload.new as UnifiedNotification;\n363:               "
    },
    {
      "file": "src/hooks/useUnifiedNotifications.ts",
      "line": 377,
      "content": "console.log('Notification updated:', payload);",
      "context": "375:             },\n376:             (payload) => {\n377:               console.log('Notification updated:', payload);\n378:               const updatedNotification = payload.new as UnifiedNotification;\n379:               "
    },
    {
      "file": "src/hooks/useUnifiedProfile.ts",
      "line": 123,
      "content": "console.warn(",
      "context": "121:           }\n122:         } catch (clubFetchError) {\n123:           console.warn(\n124:             'Club profile fetch failed (non-critical):',\n125:             clubFetchError"
    },
    {
      "file": "src/hooks/useUnifiedProfile.ts",
      "line": 190,
      "content": "console.warn(",
      "context": "188:             .slice(0, 10);\n189:         } catch (activitiesError) {\n190:           console.warn(\n191:             'Activities fetch failed (non-critical):',\n192:             activitiesError"
    },
    {
      "file": "src/hooks/useUnifiedTournamentState.ts",
      "line": 108,
      "content": "console.log('🔧 Bracket repair result:', repairResult);",
      "context": "106:             }\n107:           );\n108:           console.log('🔧 Bracket repair result:', repairResult);\n109:         } catch (error) {\n110:           console.warn('Repair attempt failed:', error);"
    },
    {
      "file": "src/hooks/useWinnerAdvancementListener.ts",
      "line": 9,
      "content": "console.log(",
      "context": "7:     if (!tournamentId) return;\n8: \n9:     console.log(\n10:       '🎯 Setting up winner advancement listener for tournament:',\n11:       tournamentId"
    },
    {
      "file": "src/hooks/useWinnerAdvancementListener.ts",
      "line": 18,
      "content": "console.log('🚀 Auto-advancing winner for match:', data.match_id);",
      "context": "16:         const data = JSON.parse(payload);\n17:         if (data.tournament_id === tournamentId) {\n18:           console.log('🚀 Auto-advancing winner for match:', data.match_id);\n19:           await advanceWinner(data.match_id);\n20:         }"
    },
    {
      "file": "src/hooks/useWinnerAdvancementListener.ts",
      "line": 46,
      "content": "console.log(",
      "context": "44:             !payload.old?.winner_id\n45:           ) {\n46:             console.log(\n47:               '🎯 Winner detected, triggering rules-based advancement:',\n48:               payload.new.id"
    },
    {
      "file": "src/hooks/useWinnerAdvancementListener.ts",
      "line": 57,
      "content": "console.log('🔌 Cleaning up winner advancement listener');",
      "context": "55: \n56:     return () => {\n57:       console.log('🔌 Cleaning up winner advancement listener');\n58:       supabase.removeChannel(channel);\n59:     };"
    },
    {
      "file": "src/integrations/supabase/client.ts",
      "line": 15,
      "content": "console.log('🔧 Supabase Configuration:', {",
      "context": "13: // ✅ Log configuration for debugging (only in development)\n14: if (import.meta.env.DEV) {\n15:   console.log('🔧 Supabase Configuration:', {\n16:     url: SUPABASE_URL,\n17:     hasKey: !!SUPABASE_PUBLISHABLE_KEY,"
    },
    {
      "file": "src/integrations/supabase/service.ts",
      "line": 12,
      "content": "console.warn('⚠️ VITE_SUPABASE_SERVICE_ROLE_KEY not found. Service operations may fail.');",
      "context": "10: \n11: if (!supabaseServiceKey) {\n12:   console.warn('⚠️ VITE_SUPABASE_SERVICE_ROLE_KEY not found. Service operations may fail.');\n13: }\n14: "
    },
    {
      "file": "src/lib/analyticsTracker.ts",
      "line": 143,
      "content": "console.log(`[Analytics] ${name}:`, event);",
      "context": "141: \n142:     // Log for debugging\n143:     console.log(`[Analytics] ${name}:`, event);\n144: \n145:     // Send critical events immediately"
    },
    {
      "file": "src/lib/analyticsTracker.ts",
      "line": 269,
      "content": "console.log(`[Analytics] Sent ${formattedEvents.length} events`);",
      "context": "267:       await supabase.from('analytics_events' as any).insert(formattedEvents);\n268: \n269:       console.log(`[Analytics] Sent ${formattedEvents.length} events`);\n270:     } catch (error) {\n271:       console.error('Failed to flush analytics events:', error);"
    },
    {
      "file": "src/lib/performanceMonitor.ts",
      "line": 174,
      "content": "console.log(`[Performance] ${name}:`, value, metadata);",
      "context": "172: \n173:     // Log for debugging\n174:     console.log(`[Performance] ${name}:`, value, metadata);\n175:   }\n176: "
    },
    {
      "file": "src/lib/performanceMonitor.ts",
      "line": 196,
      "content": "console.warn(",
      "context": "194:     // Log slow API calls\n195:     if (duration > 2000) {\n196:       console.warn(\n197:         `[Performance] Slow API call: ${method} ${endpoint} - ${duration}ms`\n198:       );"
    },
    {
      "file": "src/lib/sentryConfig.ts",
      "line": 22,
      "content": "console.log('Sentry event:', event);",
      "context": "20:         // Filter out errors in development\n21:         if (import.meta.env.DEV) {\n22:           console.log('Sentry event:', event);\n23:         }\n24:         return event;"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 10,
      "content": "console.log(",
      "context": "8:   bracketData: any\n9: ) => {\n10:   console.log(\n11:     '🚀 Executing post-bracket save workflow for tournament:',\n12:     tournamentId"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 50,
      "content": "console.log('📊 Updating tournament status and metadata...');",
      "context": "48:   bracketData: any\n49: ) => {\n50:   console.log('📊 Updating tournament status and metadata...');\n51: \n52:   const updateData = {"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 76,
      "content": "console.log('🎯 Processing tournament seeding...');",
      "context": "74:   participants: any[]\n75: ) => {\n76:   console.log('🎯 Processing tournament seeding...');\n77: \n78:   const seedingData = participants.map((participant, index) => ({"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 110,
      "content": "console.log('📋 Initializing tournament workflow steps...');",
      "context": "108: // ===== 4. INITIALIZE TOURNAMENT WORKFLOW STEPS =====\n109: const initializeTournamentWorkflowSteps = async (tournamentId: string) => {\n110:   console.log('📋 Initializing tournament workflow steps...');\n111: \n112:   // Log workflow initiation in system_logs"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 135,
      "content": "console.log('🗓️ Creating match schedule...');",
      "context": "133: // ===== 5. CREATE MATCH SCHEDULE =====\n134: const createMatchSchedule = async (tournamentId: string, matches: any[]) => {\n135:   console.log('🗓️ Creating match schedule...');\n136: \n137:   const baseTime = new Date();"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 172,
      "content": "console.log('📊 Setting up tournament monitoring...');",
      "context": "170: // ===== 6. SETUP TOURNAMENT MONITORING =====\n171: const setupTournamentMonitoring = async (tournamentId: string) => {\n172:   console.log('📊 Setting up tournament monitoring...');\n173: \n174:   // Log automation start in system_logs"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 195,
      "content": "console.log('📢 Sending tournament notifications...');",
      "context": "193: // ===== 7. SEND TOURNAMENT NOTIFICATIONS =====\n194: const sendTournamentNotifications = async (tournamentId: string) => {\n195:   console.log('📢 Sending tournament notifications...');\n196: \n197:   try {"
    },
    {
      "file": "src/lib/tournament-backend-logic.ts",
      "line": 244,
      "content": "console.log('📈 Updating tournament analytics...');",
      "context": "242: // ===== 8. UPDATE TOURNAMENT ANALYTICS =====\n243: const updateTournamentAnalytics = async (tournamentId: string) => {\n244:   console.log('📈 Updating tournament analytics...');\n245: \n246:   try {"
    },
    {
      "file": "src/lib/webVitalsTracker.ts",
      "line": 53,
      "content": "console.log(`[WebVitals] ${name}:`, webVitalsMetric);",
      "context": "51: \n52:     // Log for debugging\n53:     console.log(`[WebVitals] ${name}:`, webVitalsMetric);\n54: \n55:     // Send critical metrics immediately"
    },
    {
      "file": "src/lib/webVitalsTracker.ts",
      "line": 119,
      "content": "console.log(`[WebVitals] Sent ${formattedMetrics.length} metrics`);",
      "context": "117:       await supabase.from('web_vitals_metrics' as any).insert(formattedMetrics);\n118: \n119:       console.log(`[WebVitals] Sent ${formattedMetrics.length} metrics`);\n120:     } catch (error) {\n121:       console.error('Failed to send web vitals metrics:', error);"
    },
    {
      "file": "src/pages/AuthCallbackPage.tsx",
      "line": 27,
      "content": "console.log('Auth Callback Processing:', {",
      "context": "25:         const secureRedirectUrl = getSecureRedirectUrl(redirectTo);\n26: \n27:         console.log('Auth Callback Processing:', {\n28:           type,\n29:           requestedRedirect: redirectTo,"
    },
    {
      "file": "src/pages/ClubDetailPage.tsx",
      "line": 229,
      "content": "console.log(",
      "context": "227:   // Mobile view\n228:   if (isMobile) {\n229:     console.log(\n230:       '[ClubDetailPage] Rendering mobile club detail (public/player layout)'\n231:     );"
    },
    {
      "file": "src/pages/ClubManagementPage.tsx",
      "line": 163,
      "content": "console.log(",
      "context": "161:         <TabsContent value='tournaments'>\n162:           {(() => {\n163:             console.log(\n164:               '🎯 Rendering tournaments tab with clubId:',\n165:               clubProfile?.id"
    },
    {
      "file": "src/pages/ClubsPage.tsx",
      "line": 11,
      "content": "console.log('🏢 [ClubsPage] Component rendering...');",
      "context": "9: \n10: const ClubsPage = () => {\n11:   console.log('🏢 [ClubsPage] Component rendering...');\n12:   const { clubs, loading, error } = useClubs();\n13:   console.log('🏢 [ClubsPage] Hook state:', { clubs, loading, error });"
    },
    {
      "file": "src/pages/EnhancedLoginPage.tsx",
      "line": 98,
      "content": "console.warn(",
      "context": "96:         });\n97:       } catch (e) {\n98:         console.warn(\n99:           'Post-login redirect logic failed, fallback to dashboard:',\n100:           e"
    },
    {
      "file": "src/pages/EnhancedLoginPage.tsx",
      "line": 130,
      "content": "console.log('🔄 Switching to OTP login for this account...');",
      "context": "128:         // Check if this is a fallback case (OTP-created account needing OTP login)\n129:         if ((error as any).fallbackToOtp) {\n130:           console.log('🔄 Switching to OTP login for this account...');\n131:           toast.info('Tài khoản này sử dụng xác thực OTP. Đang gửi mã xác thực...');\n132:           setOtpPhone(phone);"
    },
    {
      "file": "src/pages/EnhancedMarketplacePage.tsx",
      "line": 53,
      "content": "console.log('Navigate to item detail:', item.id);",
      "context": "51: \n52:   const handleItemClick = (item: any) => {\n53:     console.log('Navigate to item detail:', item.id);\n54:     // Navigate to item detail page\n55:     toast.info(`Xem chi tiết: ${item.title}`);"
    },
    {
      "file": "src/pages/EnhancedMarketplacePage.tsx",
      "line": 59,
      "content": "console.log('Toggle favorite for item:', itemId);",
      "context": "57: \n58:   const handleFavorite = (itemId: string) => {\n59:     console.log('Toggle favorite for item:', itemId);\n60:     toast.success('Đã thêm vào danh sách yêu thích');\n61:   };"
    },
    {
      "file": "src/pages/EnhancedRegisterPage.tsx",
      "line": 128,
      "content": "console.log('🔐 Setting password for phone-registered user...');",
      "context": "126:         // This allows the user to login with phone + password later\n127:         if (pendingPhoneData.password) {\n128:           console.log('🔐 Setting password for phone-registered user...');\n129:           const { error: passwordError } = await supabase.auth.updateUser({\n130:             password: pendingPhoneData.password,"
    },
    {
      "file": "src/pages/EnhancedRegisterPage.tsx",
      "line": 159,
      "content": "console.log('🏆 Triggering account creation milestone for user:', user.id);",
      "context": "157:             const { data: { user } } = await supabase.auth.getUser();\n158:             if (user?.id) {\n159:               console.log('🏆 Triggering account creation milestone for user:', user.id);\n160:               await triggerAccountCreation(user.id);\n161:             }"
    },
    {
      "file": "src/pages/Index.tsx",
      "line": 24,
      "content": "console.log('[Index] 🏠 Index page rendering...');",
      "context": "22: \n23: const Index = () => {\n24:   console.log('[Index] 🏠 Index page rendering...');\n25: \n26:   React.useEffect(() => {"
    },
    {
      "file": "src/pages/Index.tsx",
      "line": 30,
      "content": "console.log('[Index] 👋 Index page unmounting');",
      "context": "28: \n29:     return () => {\n30:       console.log('[Index] 👋 Index page unmounting');\n31:     };\n32:   }, []);"
    },
    {
      "file": "src/pages/IntegratedScoreSystemDemo.tsx",
      "line": 209,
      "content": "console.log('Challenge action:', challengeId, action);",
      "context": "207:                   variant=\"live\"\n208:                   onAction={(challengeId, action) => {\n209:                     console.log('Challenge action:', challengeId, action);\n210:                   }}\n211:                   onCardClick={(challengeId) => {"
    },
    {
      "file": "src/pages/IntegratedScoreSystemDemo.tsx",
      "line": 212,
      "content": "console.log('Challenge clicked:', challengeId);",
      "context": "210:                   }}\n211:                   onCardClick={(challengeId) => {\n212:                     console.log('Challenge clicked:', challengeId);\n213:                   }}\n214:                 />"
    },
    {
      "file": "src/pages/LiveStreamPage.tsx",
      "line": 21,
      "content": "// ...removed console.log('Fetching stream data for:', streamId)",
      "context": "19:   useEffect(() => {\n20:     // Fetch stream data based on streamId\n21:     // ...removed console.log('Fetching stream data for:', streamId)\n22:   }, [streamId]);\n23: "
    },
    {
      "file": "src/pages/NewComponentsShowcase.tsx",
      "line": 285,
      "content": "onAvatarChange={(newAvatar) => console.log('Avatar changed:', newAvatar)}",
      "context": "283:                     unlockedFrames={['basic', 'bronze', 'silver']}\n284:                     selectedTheme=\"pool\"\n285:                     onAvatarChange={(newAvatar) => console.log('Avatar changed:', newAvatar)}\n286:                     onFrameChange={(newFrame) => console.log('Frame changed:', newFrame)}\n287:                     onThemeChange={(newTheme) => console.log('Theme changed:', newTheme)}"
    },
    {
      "file": "src/pages/NewComponentsShowcase.tsx",
      "line": 286,
      "content": "onFrameChange={(newFrame) => console.log('Frame changed:', newFrame)}",
      "context": "284:                     selectedTheme=\"pool\"\n285:                     onAvatarChange={(newAvatar) => console.log('Avatar changed:', newAvatar)}\n286:                     onFrameChange={(newFrame) => console.log('Frame changed:', newFrame)}\n287:                     onThemeChange={(newTheme) => console.log('Theme changed:', newTheme)}\n288:                   />"
    },
    {
      "file": "src/pages/NewComponentsShowcase.tsx",
      "line": 287,
      "content": "onThemeChange={(newTheme) => console.log('Theme changed:', newTheme)}",
      "context": "285:                     onAvatarChange={(newAvatar) => console.log('Avatar changed:', newAvatar)}\n286:                     onFrameChange={(newFrame) => console.log('Frame changed:', newFrame)}\n287:                     onThemeChange={(newTheme) => console.log('Theme changed:', newTheme)}\n288:                   />\n289:                   <div className=\"mt-4 text-sm text-gray-600\">"
    },
    {
      "file": "src/pages/NewComponentsShowcase.tsx",
      "line": 423,
      "content": "onToggleFullscreen={() => console.log('Toggle fullscreen')}",
      "context": "421:                     }\n422:                   ]}\n423:                   onToggleFullscreen={() => console.log('Toggle fullscreen')}\n424:                   onSendMessage={(msg) => console.log('Send message:', msg)}\n425:                   onCheer={(playerId) => console.log('Cheer for:', playerId)}"
    },
    {
      "file": "src/pages/NewComponentsShowcase.tsx",
      "line": 425,
      "content": "onCheer={(playerId) => console.log('Cheer for:', playerId)}",
      "context": "423:                   onToggleFullscreen={() => console.log('Toggle fullscreen')}\n424:                   onSendMessage={(msg) => console.log('Send message:', msg)}\n425:                   onCheer={(playerId) => console.log('Cheer for:', playerId)}\n426:                   onShare={() => console.log('Share match')}\n427:                 />"
    },
    {
      "file": "src/pages/NewComponentsShowcase.tsx",
      "line": 426,
      "content": "onShare={() => console.log('Share match')}",
      "context": "424:                   onSendMessage={(msg) => console.log('Send message:', msg)}\n425:                   onCheer={(playerId) => console.log('Cheer for:', playerId)}\n426:                   onShare={() => console.log('Share match')}\n427:                 />\n428:                 <div className=\"mt-4 text-sm text-gray-600\">"
    },
    {
      "file": "src/pages/NotificationsFullPage.tsx",
      "line": 75,
      "content": "console.log('🔍 Fetching notifications for user:', user.id);",
      "context": "73:     try {\n74:       setLoading(true);\n75:       console.log('🔍 Fetching notifications for user:', user.id);\n76:       \n77:       const { data, error } = await supabase"
    },
    {
      "file": "src/pages/OtpTestPage.tsx",
      "line": 15,
      "content": "console.log('OTP code entered:', code);",
      "context": "13: \n14:   const handleOtpVerify = async (code: string) => {\n15:     console.log('OTP code entered:', code);\n16:     toast.success(`Mã OTP đã nhập: ${code}`);\n17:     setOtpOpen(false);"
    },
    {
      "file": "src/pages/OtpTestPage.tsx",
      "line": 21,
      "content": "console.log('Resending OTP...');",
      "context": "19: \n20:   const handleResendOtp = async () => {\n21:     console.log('Resending OTP...');\n22:     toast.success('Mã OTP mới đã được gửi!');\n23:   };"
    },
    {
      "file": "src/pages/PaymentSuccessPage.tsx",
      "line": 53,
      "content": "console.log('Would update membership for user:', user.user.id);",
      "context": "51:       if (user.user) {\n52:         // In a real app, we would update the membership here\n53:         console.log('Would update membership for user:', user.user.id);\n54:       }\n55: "
    },
    {
      "file": "src/pages/Profile.tsx",
      "line": 16,
      "content": "console.log('🎯 [Profile] Rendering OptimizedMobileProfile for consistent experience');",
      "context": "14: \n15:   // Use OptimizedMobileProfile for both mobile and desktop for consistency\n16:   console.log('🎯 [Profile] Rendering OptimizedMobileProfile for consistent experience');\n17:   return <OptimizedMobileProfile />;\n18: };"
    },
    {
      "file": "src/pages/SABO32DemoPage.tsx",
      "line": 46,
      "content": "console.log('🎯 Creating SABO-32 demo tournament...');",
      "context": "44:     \n45:     try {\n46:       console.log('🎯 Creating SABO-32 demo tournament...');\n47:       \n48:       // Generate demo player names"
    },
    {
      "file": "src/pages/SABO32DemoPage.tsx",
      "line": 59,
      "content": "console.log('📋 Calling create_sabo32_tournament function...', {",
      "context": "57:       ];\n58: \n59:       console.log('📋 Calling create_sabo32_tournament function...', {\n60:         tournament_id: tournamentId,\n61:         player_names: demoPlayerNames"
    },
    {
      "file": "src/pages/SABO32DemoPageNew.tsx",
      "line": 46,
      "content": "console.log('🎯 Creating SABO-32 demo tournament...');",
      "context": "44:     \n45:     try {\n46:       console.log('🎯 Creating SABO-32 demo tournament...');\n47:       \n48:       // Generate demo player names"
    },
    {
      "file": "src/pages/SABO32DemoPageNew.tsx",
      "line": 59,
      "content": "console.log('📋 Calling create_sabo32_tournament function...', {",
      "context": "57:       ];\n58: \n59:       console.log('📋 Calling create_sabo32_tournament function...', {\n60:         tournament_id: tournamentId,\n61:         player_names: demoPlayerNames"
    },
    {
      "file": "src/pages/SPATestPage.tsx",
      "line": 44,
      "content": "console.log(`Test bonus: ${activityType}`);",
      "context": "42:     setIsAwarding(true);\n43:     // Deprecated integration removed - functionality moved to core SPA system\n44:     console.log(`Test bonus: ${activityType}`);\n45:     await refreshSPAData();\n46:     setIsAwarding(false);"
    },
    {
      "file": "src/pages/ScoreSubmissionDemo.tsx",
      "line": 121,
      "content": "console.log('Score submitted in demo!');",
      "context": "119:         opponentProfile={mockOpponent}\n120:         onScoreSubmitted={() => {\n121:           console.log('Score submitted in demo!');\n122:           // In real app, this would refetch data\n123:         }}"
    },
    {
      "file": "src/pages/SecurityPage.tsx",
      "line": 6,
      "content": "// ...removed console.log('Security settings saved:', settings)",
      "context": "4: const SecurityPage: React.FC = () => {\n5:   const handleSaveSettings = (settings: any) => {\n6:     // ...removed console.log('Security settings saved:', settings)\n7:     // Handle saving security settings\n8:   };"
    },
    {
      "file": "src/pages/SimpleDashboard.tsx",
      "line": 11,
      "content": "console.log('SimpleDashboard: Component is rendering');",
      "context": "9: const SimpleDashboard = () => {\n10:   const { user } = useAuth();\n11:   console.log('SimpleDashboard: Component is rendering');\n12: \n13:   return ("
    },
    {
      "file": "src/pages/StandardizedChallengesPage.tsx",
      "line": 16,
      "content": "console.log('🎯 [StandardizedChallengesPage] Rendering EnhancedChallengesPageV3 for consistent experience');",
      "context": "14: \n15:   // Use EnhancedChallengesPageV3 for both mobile and desktop for consistency\n16:   console.log('🎯 [StandardizedChallengesPage] Rendering EnhancedChallengesPageV3 for consistent experience');\n17:   return <EnhancedChallengesPageV3 />;\n18: };"
    },
    {
      "file": "src/pages/StandardizedProfilePage.tsx",
      "line": 16,
      "content": "console.log('🎯 [StandardizedProfilePage] Rendering OptimizedMobileProfile for consistent experience');",
      "context": "14: \n15:   // Use OptimizedMobileProfile for both mobile and desktop for consistency\n16:   console.log('🎯 [StandardizedProfilePage] Rendering OptimizedMobileProfile for consistent experience');\n17:   return <OptimizedMobileProfile />;\n18: };"
    },
    {
      "file": "src/pages/StandardizedTournamentsPage.tsx",
      "line": 16,
      "content": "console.log('🎯 [StandardizedTournamentsPage] Rendering TournamentsPage for consistent experience');",
      "context": "14: \n15:   // Use TournamentsPage for both mobile and desktop for consistency\n16:   console.log('🎯 [StandardizedTournamentsPage] Rendering TournamentsPage for consistent experience');\n17:   return <TournamentsPage />;\n18: };"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 67,
      "content": "console.log('Audit result:', result);",
      "context": "65: \n66:   const addResult = (result: AuditResult) => {\n67:     console.log('Audit result:', result);\n68:     setAuditResults(prev => [...prev, result]);\n69:   };"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 80,
      "content": "console.log(`Running test: ${category} - ${testName}`);",
      "context": "78: \n79:     try {\n80:       console.log(`Running test: ${category} - ${testName}`);\n81:       const result = await Promise.race([\n82:         testFn(),"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 116,
      "content": "console.log('Checking basic connectivity...');",
      "context": "114: \n115:   const checkBasicConnectivity = async () => {\n116:     console.log('Checking basic connectivity...');\n117: \n118:     // Check if we can reach the current domain"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 134,
      "content": "console.log('Checking Supabase connection...');",
      "context": "132: \n133:   const checkSupabaseConnection = async () => {\n134:     console.log('Checking Supabase connection...');\n135: \n136:     const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 161,
      "content": "console.log('Checking authentication...');",
      "context": "159: \n160:   const checkAuthentication = async () => {\n161:     console.log('Checking authentication...');\n162: \n163:     try {"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 191,
      "content": "console.log('Checking environment variables...');",
      "context": "189: \n190:   const checkEnvironmentVariables = async () => {\n191:     console.log('Checking environment variables...');\n192: \n193:     const requiredEnvVars = ['VITE_SUPABASE_URL', 'VITE_SUPABASE_ANON_KEY'];"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 215,
      "content": "console.log('Checking application routes...');",
      "context": "213: \n214:   const checkApplicationRoutes = async () => {\n215:     console.log('Checking application routes...');\n216: \n217:     const routes = ["
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 288,
      "content": "console.log('Checking system health...');",
      "context": "286: \n287:   const checkSystemHealth = async () => {\n288:     console.log('Checking system health...');\n289: \n290:     // Safely check for performance.memory (Chrome only)"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 329,
      "content": "console.log('=== STARTING FULL SYSTEM AUDIT ===');",
      "context": "327:     setCurrentTest('Starting comprehensive system audit...');\n328: \n329:     console.log('=== STARTING FULL SYSTEM AUDIT ===');\n330: \n331:     try {"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 370,
      "content": "console.log('=== AUDIT COMPLETED ===');",
      "context": "368:       setIsRunning(false);\n369:       setCurrentTest('');\n370:       console.log('=== AUDIT COMPLETED ===');\n371:     }\n372:   };"
    },
    {
      "file": "src/pages/SystemAuditPage.tsx",
      "line": 404,
      "content": "console.log('SystemAuditPage mounted, starting initial audit...');",
      "context": "402: \n403:   useEffect(() => {\n404:     console.log('SystemAuditPage mounted, starting initial audit...');\n405:     runFullSystemAudit();\n406:   }, []);"
    },
    {
      "file": "src/pages/TestPage.tsx",
      "line": 4,
      "content": "console.log('TestPage: Component is rendering');",
      "context": "2: \n3: const TestPage = () => {\n4:   console.log('TestPage: Component is rendering');\n5: \n6:   return ("
    },
    {
      "file": "src/pages/challenges/EnhancedChallengesPageV3.tsx",
      "line": 119,
      "content": "console.log('Attempting to cancel challenge:', challengeId);",
      "context": "117:   const handleCancelChallenge = async (challengeId: string) => {\n118:     try {\n119:       console.log('Attempting to cancel challenge:', challengeId);\n120:       console.log('Current user ID:', user.id);\n121: "
    },
    {
      "file": "src/pages/challenges/EnhancedChallengesPageV3.tsx",
      "line": 120,
      "content": "console.log('Current user ID:', user.id);",
      "context": "118:     try {\n119:       console.log('Attempting to cancel challenge:', challengeId);\n120:       console.log('Current user ID:', user.id);\n121: \n122:       // First, check if the challenge exists and belongs to the user"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 195,
      "content": "console.log('🔥 SCORE SUBMISSION DEBUG:');",
      "context": "193:     setIsSubmitting(true);\n194:     try {\n195:       console.log('🔥 SCORE SUBMISSION DEBUG:');\n196:       console.log('Challenge ID:', challenge.id);\n197:       console.log('BEFORE status:', challenge.score_confirmation_status);"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 196,
      "content": "console.log('Challenge ID:', challenge.id);",
      "context": "194:     try {\n195:       console.log('🔥 SCORE SUBMISSION DEBUG:');\n196:       console.log('Challenge ID:', challenge.id);\n197:       console.log('BEFORE status:', challenge.score_confirmation_status);\n198:       console.log('Submitting scores:', { challengerScore, opponentScore });"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 197,
      "content": "console.log('BEFORE status:', challenge.score_confirmation_status);",
      "context": "195:       console.log('🔥 SCORE SUBMISSION DEBUG:');\n196:       console.log('Challenge ID:', challenge.id);\n197:       console.log('BEFORE status:', challenge.score_confirmation_status);\n198:       console.log('Submitting scores:', { challengerScore, opponentScore });\n199: "
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 198,
      "content": "console.log('Submitting scores:', { challengerScore, opponentScore });",
      "context": "196:       console.log('Challenge ID:', challenge.id);\n197:       console.log('BEFORE status:', challenge.score_confirmation_status);\n198:       console.log('Submitting scores:', { challengerScore, opponentScore });\n199: \n200:       const { error } = await supabase"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 241,
      "content": "console.log('🔄 Calling onScoreUpdated at:', Date.now());",
      "context": "239:       setIsOpen(false);\n240: \n241:       console.log('🔄 Calling onScoreUpdated at:', Date.now());\n242:       onScoreUpdated();\n243:     } catch (error: any) {"
    },
    {
      "file": "src/pages/challenges/components/score/ThreeStepScoreWorkflow.tsx",
      "line": 533,
      "content": "console.log(",
      "context": "531: \n532:       if (!recipientEmail) {\n533:         console.log(\n534:           'No recipient email found for score confirmation notification'\n535:         );"
    },
    {
      "file": "src/pages/challenges/components/sections/ActiveChallengesSection.tsx",
      "line": 44,
      "content": "console.log('🔄 handleScoreUpdated called - starting refresh process...');",
      "context": "42:   // Enhanced score update handler with proper invalidation\n43:   const handleScoreUpdated = async () => {\n44:     console.log('🔄 handleScoreUpdated called - starting refresh process...');\n45:     console.log('Current challenges count:', challenges?.length);\n46: "
    },
    {
      "file": "src/pages/challenges/components/sections/ActiveChallengesSection.tsx",
      "line": 45,
      "content": "console.log('Current challenges count:', challenges?.length);",
      "context": "43:   const handleScoreUpdated = async () => {\n44:     console.log('🔄 handleScoreUpdated called - starting refresh process...');\n45:     console.log('Current challenges count:', challenges?.length);\n46: \n47:     // Invalidate all relevant queries to force UI refresh"
    },
    {
      "file": "src/pages/challenges/components/sections/ActiveChallengesSection.tsx",
      "line": 60,
      "content": "console.log('🔄 onStatsUpdate called, waiting for refetch...');",
      "context": "58:     onStatsUpdate();\n59: \n60:     console.log('🔄 onStatsUpdate called, waiting for refetch...');\n61: \n62:     // Force a small delay to ensure data is refreshed"
    },
    {
      "file": "src/pages/challenges/components/sections/ActiveChallengesSection.tsx",
      "line": 64,
      "content": "console.log('🔄 Second onStatsUpdate call (delayed)');",
      "context": "62:     // Force a small delay to ensure data is refreshed\n63:     setTimeout(() => {\n64:       console.log('🔄 Second onStatsUpdate call (delayed)');\n65:       onStatsUpdate();\n66:     }, 500);"
    },
    {
      "file": "src/pages/challenges/components/sections/ActiveChallengesSection.tsx",
      "line": 71,
      "content": "console.log(",
      "context": "69:   // Debug challenges changes\n70:   useEffect(() => {\n71:     console.log(\n72:       '🔍 ActiveChallengesSection re-rendered with challenges:',\n73:       challenges?.length"
    },
    {
      "file": "src/pages/challenges/components/sections/ActiveChallengesSection.tsx",
      "line": 75,
      "content": "console.log('👤 Current user:', user?.id);",
      "context": "73:       challenges?.length\n74:     );\n75:     console.log('👤 Current user:', user?.id);\n76:     challenges?.forEach(challenge => {\n77:       console.log(`🎯 Challenge ${challenge.id}:`, {"
    },
    {
      "file": "src/pages/challenges/components/sections/ActiveChallengesSection.tsx",
      "line": 77,
      "content": "console.log(`🎯 Challenge ${challenge.id}:`, {",
      "context": "75:     console.log('👤 Current user:', user?.id);\n76:     challenges?.forEach(challenge => {\n77:       console.log(`🎯 Challenge ${challenge.id}:`, {\n78:         status: challenge.status,\n79:         score_confirmation_status: challenge.score_confirmation_status,"
    },
    {
      "file": "src/pages/challenges/components/sections/ActiveChallengesSection.tsx",
      "line": 249,
      "content": "console.log(",
      "context": "247:                     {/* Score workflow status badge */}\n248:                     {(() => {\n249:                       console.log(\n250:                         `🏷️ Rendering badge for challenge ${challenge.id}:`,\n251:                         {"
    },
    {
      "file": "src/pages/challenges/components/tabs/CommunityTab.tsx",
      "line": 73,
      "content": "console.log('Watch challenge:', challengeId);",
      "context": "71:         break;\n72:       case 'watch':\n73:         console.log('Watch challenge:', challengeId);\n74:         break;\n75:       case 'view':"
    },
    {
      "file": "src/pages/challenges/components/tabs/CommunityTab.tsx",
      "line": 76,
      "content": "console.log('View challenge:', challengeId);",
      "context": "74:         break;\n75:       case 'view':\n76:         console.log('View challenge:', challengeId);\n77:         break;\n78:       case 'score':"
    },
    {
      "file": "src/pages/challenges/components/tabs/CommunityTab.tsx",
      "line": 79,
      "content": "console.log('Enter score for challenge:', challengeId);",
      "context": "77:         break;\n78:       case 'score':\n79:         console.log('Enter score for challenge:', challengeId);\n80:         break;\n81:       default:"
    },
    {
      "file": "src/pages/challenges/components/tabs/CommunityTab.tsx",
      "line": 82,
      "content": "console.log('Unknown action:', action, 'for challenge:', challengeId);",
      "context": "80:         break;\n81:       default:\n82:         console.log('Unknown action:', action, 'for challenge:', challengeId);\n83:         break;\n84:     }"
    },
    {
      "file": "src/pages/challenges/components/tabs/CommunityTab.tsx",
      "line": 88,
      "content": "console.log('Card clicked:', challengeId);",
      "context": "86: \n87:   const handleCardClick = (challengeId: string) => {\n88:     console.log('Card clicked:', challengeId);\n89:   };\n90: "
    },
    {
      "file": "src/pages/challenges/components/tabs/EnhancedCommunityTab.tsx",
      "line": 190,
      "content": "console.log('Watch challenge:', challengeId);",
      "context": "188:         break;\n189:       case 'watch':\n190:         console.log('Watch challenge:', challengeId);\n191:         break;\n192:       case 'view':"
    },
    {
      "file": "src/pages/challenges/components/tabs/EnhancedCommunityTab.tsx",
      "line": 193,
      "content": "console.log('View challenge:', challengeId);",
      "context": "191:         break;\n192:       case 'view':\n193:         console.log('View challenge:', challengeId);\n194:         break;\n195:       case 'score':"
    },
    {
      "file": "src/pages/challenges/components/tabs/EnhancedCommunityTab.tsx",
      "line": 196,
      "content": "console.log('Enter score for challenge:', challengeId);",
      "context": "194:         break;\n195:       case 'score':\n196:         console.log('Enter score for challenge:', challengeId);\n197:         break;\n198:       default:"
    },
    {
      "file": "src/pages/challenges/components/tabs/EnhancedCommunityTab.tsx",
      "line": 199,
      "content": "console.log('Unknown action:', action, 'for challenge:', challengeId);",
      "context": "197:         break;\n198:       default:\n199:         console.log('Unknown action:', action, 'for challenge:', challengeId);\n200:         break;\n201:     }"
    },
    {
      "file": "src/pages/challenges/components/tabs/EnhancedCommunityTab.tsx",
      "line": 212,
      "content": "console.log('Card clicked:', challengeId);",
      "context": "210: \n211:   const handleCardClick = (challengeId: string) => {\n212:     console.log('Card clicked:', challengeId);\n213:   };\n214: "
    },
    {
      "file": "src/pages/challenges/components/tabs/EnhancedMyTab.tsx",
      "line": 83,
      "content": "console.log('Enter score for challenge:', challengeId);",
      "context": "81:         break;\n82:       case 'score':\n83:         console.log('Enter score for challenge:', challengeId);\n84:         break;\n85:       case 'view':"
    },
    {
      "file": "src/pages/challenges/components/tabs/EnhancedMyTab.tsx",
      "line": 86,
      "content": "console.log('View challenge details:', challengeId);",
      "context": "84:         break;\n85:       case 'view':\n86:         console.log('View challenge details:', challengeId);\n87:         break;\n88:       case 'edit':"
    },
    {
      "file": "src/pages/challenges/components/tabs/EnhancedMyTab.tsx",
      "line": 89,
      "content": "console.log('Edit challenge:', challengeId);",
      "context": "87:         break;\n88:       case 'edit':\n89:         console.log('Edit challenge:', challengeId);\n90:         break;\n91:       default:"
    },
    {
      "file": "src/pages/challenges/components/tabs/EnhancedMyTab.tsx",
      "line": 92,
      "content": "console.log('Unknown action:', action, 'for challenge:', challengeId);",
      "context": "90:         break;\n91:       default:\n92:         console.log('Unknown action:', action, 'for challenge:', challengeId);\n93:         break;\n94:     }"
    },
    {
      "file": "src/pages/challenges/components/tabs/EnhancedMyTab.tsx",
      "line": 98,
      "content": "console.log('Card clicked:', challengeId);",
      "context": "96: \n97:   const handleCardClick = (challengeId: string) => {\n98:     console.log('Card clicked:', challengeId);\n99:   };\n100: "
    },
    {
      "file": "src/pages/challenges/components/tabs/MyTab.tsx",
      "line": 62,
      "content": "console.log('Enter score for challenge:', challengeId);",
      "context": "60:         break;\n61:       case 'score':\n62:         console.log('Enter score for challenge:', challengeId);\n63:         break;\n64:       case 'view':"
    },
    {
      "file": "src/pages/challenges/components/tabs/MyTab.tsx",
      "line": 65,
      "content": "console.log('View challenge details:', challengeId);",
      "context": "63:         break;\n64:       case 'view':\n65:         console.log('View challenge details:', challengeId);\n66:         break;\n67:       case 'edit':"
    },
    {
      "file": "src/pages/challenges/components/tabs/MyTab.tsx",
      "line": 68,
      "content": "console.log('Edit challenge:', challengeId);",
      "context": "66:         break;\n67:       case 'edit':\n68:         console.log('Edit challenge:', challengeId);\n69:         break;\n70:       default:"
    },
    {
      "file": "src/pages/challenges/components/tabs/MyTab.tsx",
      "line": 71,
      "content": "console.log('Unknown action:', action, 'for challenge:', challengeId);",
      "context": "69:         break;\n70:       default:\n71:         console.log('Unknown action:', action, 'for challenge:', challengeId);\n72:         break;\n73:     }"
    },
    {
      "file": "src/pages/challenges/components/tabs/MyTab.tsx",
      "line": 77,
      "content": "console.log('Card clicked:', challengeId);",
      "context": "75: \n76:   const handleCardClick = (challengeId: string) => {\n77:     console.log('Card clicked:', challengeId);\n78:   };\n79: "
    },
    {
      "file": "src/services/AutomatedMigrationService.ts",
      "line": 4,
      "content": "console.log('Mock: Detecting player ID columns');",
      "context": "2: export class AutomatedMigrationService {\n3:   static async detectPlayerIdColumns() {\n4:     console.log('Mock: Detecting player ID columns');\n5:     return { columns: [] };\n6:   }"
    },
    {
      "file": "src/services/AutomatedMigrationService.ts",
      "line": 9,
      "content": "console.log('Mock: Detecting player ID foreign keys');",
      "context": "7: \n8:   static async detectPlayerIdForeignKeys() {\n9:     console.log('Mock: Detecting player ID foreign keys');\n10:     return { foreignKeys: [] };\n11:   }"
    },
    {
      "file": "src/services/AutomatedMigrationService.ts",
      "line": 14,
      "content": "console.log('Mock: Detecting player ID in functions');",
      "context": "12: \n13:   static async detectPlayerIdInFunctions() {\n14:     console.log('Mock: Detecting player ID in functions');\n15:     return { functions: [] };\n16:   }"
    },
    {
      "file": "src/services/AutomatedMigrationService.ts",
      "line": 19,
      "content": "console.log('Mock: Running migration', migrationName);",
      "context": "17: \n18:   static async runMigration(migrationName: string) {\n19:     console.log('Mock: Running migration', migrationName);\n20:     return { success: true };\n21:   }"
    },
    {
      "file": "src/services/AutomatedMigrationService.ts",
      "line": 24,
      "content": "console.log('Mock: Checking migration status');",
      "context": "22: \n23:   static async checkMigrationStatus() {\n24:     console.log('Mock: Checking migration status');\n25:     return { completed: true, pending: [] };\n26:   }"
    },
    {
      "file": "src/services/AutomatedMigrationService.ts",
      "line": 33,
      "content": "console.log('Mock: Verifying migration complete');",
      "context": "31: \n32:   static async verifyMigrationComplete() {\n33:     console.log('Mock: Verifying migration complete');\n34:     return { success: true };\n35:   }"
    },
    {
      "file": "src/services/AutomatedMigrationService.ts",
      "line": 38,
      "content": "console.log('Mock: Stopping migration');",
      "context": "36: \n37:   static async stop() {\n38:     console.log('Mock: Stopping migration');\n39:     return { success: true };\n40:   }"
    },
    {
      "file": "src/services/AutomatedMigrationService.ts",
      "line": 47,
      "content": "console.log('Mock: Running automated player ID migration');",
      "context": "45: \n46: export async function runAutomatedPlayerIdMigration() {\n47:   console.log('Mock: Running automated player ID migration');\n48:   return { success: true };\n49: }"
    },
    {
      "file": "src/services/BaseEntityService.ts",
      "line": 18,
      "content": "console.log('Mock create entity:', tableName, data);",
      "context": "16: export class BaseEntityService {\n17:   static async create(tableName: string, data: any) {\n18:     console.log('Mock create entity:', tableName, data);\n19:     return { success: true, data: { id: 'mock-id', ...data } };\n20:   }"
    },
    {
      "file": "src/services/BaseEntityService.ts",
      "line": 23,
      "content": "console.log('Mock update entity:', tableName, id, data);",
      "context": "21: \n22:   static async update(tableName: string, id: string, data: any) {\n23:     console.log('Mock update entity:', tableName, id, data);\n24:     return { success: true, data: { id, ...data } };\n25:   }"
    },
    {
      "file": "src/services/BaseEntityService.ts",
      "line": 28,
      "content": "console.log('Mock delete entity:', tableName, id);",
      "context": "26: \n27:   static async delete(tableName: string, id: string) {\n28:     console.log('Mock delete entity:', tableName, id);\n29:     return { success: true };\n30:   }"
    },
    {
      "file": "src/services/BaseEntityService.ts",
      "line": 33,
      "content": "console.log('Mock get entity:', tableName, id);",
      "context": "31: \n32:   static async get(tableName: string, id: string) {\n33:     console.log('Mock get entity:', tableName, id);\n34:     return { success: true, data: { id, mock: true } };\n35:   }"
    },
    {
      "file": "src/services/BaseEntityService.ts",
      "line": 38,
      "content": "console.log('Mock list entities:', tableName, options);",
      "context": "36: \n37:   static async list(tableName: string, options?: any) {\n38:     console.log('Mock list entities:', tableName, options);\n39:     return { success: true, data: [] };\n40:   }"
    },
    {
      "file": "src/services/BaseEntityService.ts",
      "line": 47,
      "content": "console.log('Mock soft delete entity:', tableName, entityId, adminId);",
      "context": "45:     adminId?: string\n46:   ) {\n47:     console.log('Mock soft delete entity:', tableName, entityId, adminId);\n48:     return { success: true };\n49:   }"
    },
    {
      "file": "src/services/BaseEntityService.ts",
      "line": 52,
      "content": "console.log('Mock restore entity:', tableName, entityId, adminId);",
      "context": "50: \n51:   static async restore(tableName: string, entityId: string, adminId?: string) {\n52:     console.log('Mock restore entity:', tableName, entityId, adminId);\n53:     return { success: true };\n54:   }"
    },
    {
      "file": "src/services/BaseEntityService.ts",
      "line": 57,
      "content": "console.log('Mock get soft delete stats:', tableName);",
      "context": "55: \n56:   static async getSoftDeleteStats(tableName: string) {\n57:     console.log('Mock get soft delete stats:', tableName);\n58:     return { success: true, stats: { total: 0, deleted: 0 } };\n59:   }"
    },
    {
      "file": "src/services/BaseEntityService.ts",
      "line": 62,
      "content": "console.log('Mock get recently deleted:', tableName);",
      "context": "60: \n61:   static async getRecentlyDeleted(tableName?: string) {\n62:     console.log('Mock get recently deleted:', tableName);\n63:     return [];\n64:   }"
    },
    {
      "file": "src/services/BaseEntityService.ts",
      "line": 67,
      "content": "console.log('Mock permanent delete:', tableName, entityId);",
      "context": "65: \n66:   static async permanentDelete(tableName: string, entityId: string) {\n67:     console.log('Mock permanent delete:', tableName, entityId);\n68:     return { success: true };\n69:   }"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 49,
      "content": "console.log('🚀 Starting SABO Double Elimination bracket generation...');",
      "context": "47:   }> {\n48:     try {\n49:       console.log('🚀 Starting SABO Double Elimination bracket generation...');\n50:       // =============================================================\n51:       // ✅ Step 0: Thử gọi RPC server-side (ưu tiên) nếu đã tạo function trên DB"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 54,
      "content": "console.log('🔌 Trying server-side RPC: generate_tournament_matches');",
      "context": "52:       // =============================================================\n53:       try {\n54:         console.log('🔌 Trying server-side RPC: generate_tournament_matches');\n55:         const { data: rpcData, error: rpcError } = await supabase\n56:           .rpc('generate_tournament_matches' as any, { p_tournament_id: this.tournamentId });"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 78,
      "content": "console.warn('⚠️ RPC call exception, fallback to client generation:', e);",
      "context": "76:         }\n77:       } catch (e) {\n78:         console.warn('⚠️ RPC call exception, fallback to client generation:', e);\n79:       }\n80:       "
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 115,
      "content": "console.warn(`⚠️ Only ${savedCount}/${this.matches.length} matches saved`);",
      "context": "113:         };\n114:       } else {\n115:         console.warn(`⚠️ Only ${savedCount}/${this.matches.length} matches saved`);\n116:         return {\n117:           success: false,"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 133,
      "content": "console.log('🔍 Loading players for tournament:', this.tournamentId);",
      "context": "131:   private async loadPlayers(): Promise<boolean> {\n132:     try {\n133:       console.log('🔍 Loading players for tournament:', this.tournamentId);\n134:       console.log('🔍 Tournament ID type:', typeof this.tournamentId);\n135:       console.log('🔍 Tournament ID length:', this.tournamentId?.length);"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 134,
      "content": "console.log('🔍 Tournament ID type:', typeof this.tournamentId);",
      "context": "132:     try {\n133:       console.log('🔍 Loading players for tournament:', this.tournamentId);\n134:       console.log('🔍 Tournament ID type:', typeof this.tournamentId);\n135:       console.log('🔍 Tournament ID length:', this.tournamentId?.length);\n136: "
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 135,
      "content": "console.log('🔍 Tournament ID length:', this.tournamentId?.length);",
      "context": "133:       console.log('🔍 Loading players for tournament:', this.tournamentId);\n134:       console.log('🔍 Tournament ID type:', typeof this.tournamentId);\n135:       console.log('🔍 Tournament ID length:', this.tournamentId?.length);\n136: \n137:       // Try multiple approaches to avoid schema cache issues"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 142,
      "content": "console.log('🔍 Approach 1: Standard query...');",
      "context": "140: \n141:       // Approach 1: Try the standard query\n142:       console.log('🔍 Approach 1: Standard query...');\n143:       try {\n144:         const result = await supabase"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 165,
      "content": "console.log('� Approach 2: Simplified query (no status filter)...');",
      "context": "163:       // Approach 2: If standard failed, try simplified query\n164:       if (regError && registrations.length === 0) {\n165:         console.log('� Approach 2: Simplified query (no status filter)...');\n166:         try {\n167:           const result = await supabase"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 187,
      "content": "console.log('� Approach 3: Explicit column query...');",
      "context": "185:       // Approach 3: If still failed, try with explicit select\n186:       if (regError && registrations.length === 0) {\n187:         console.log('� Approach 3: Explicit column query...');\n188:         try {\n189:           const result = await supabase"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 213,
      "content": "console.log('⚠️ No registrations found after all approaches');",
      "context": "211: \n212:       if (registrations.length === 0) {\n213:         console.log('⚠️ No registrations found after all approaches');\n214:         return false;\n215:       }"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 217,
      "content": "console.log(`📋 Final registration count: ${registrations.length}`);",
      "context": "215:       }\n216: \n217:       console.log(`📋 Final registration count: ${registrations.length}`);\n218: \n219:       // Get player profiles with the user IDs we found"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 221,
      "content": "console.log('🔍 Querying profiles for user IDs:', userIds.slice(0, 3));",
      "context": "219:       // Get player profiles with the user IDs we found\n220:       const userIds = registrations.map(r => r.user_id);\n221:       console.log('🔍 Querying profiles for user IDs:', userIds.slice(0, 3));\n222:       \n223:       const { data: profiles, error: profileError } = await supabase"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 244,
      "content": "console.log(`👥 Successfully loaded ${this.players.length} players`);",
      "context": "242:       });\n243: \n244:       console.log(`👥 Successfully loaded ${this.players.length} players`);\n245: \n246:       // Check if we have exactly 16 players"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 248,
      "content": "console.warn(`⚠️ Expected 16 players, found ${this.players.length}`);",
      "context": "246:       // Check if we have exactly 16 players\n247:       if (this.players.length !== 16) {\n248:         console.warn(`⚠️ Expected 16 players, found ${this.players.length}`);\n249:         \n250:         // For SABO Double, we need exactly 16 players"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 252,
      "content": "console.log('🔄 Adding dummy players to reach 16...');",
      "context": "250:         // For SABO Double, we need exactly 16 players\n251:         if (this.players.length < 16) {\n252:           console.log('🔄 Adding dummy players to reach 16...');\n253:           while (this.players.length < 16) {\n254:             this.players.push({"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 279,
      "content": "console.log('🎯 Players seeded by ELO:');",
      "context": "277:     });\n278: \n279:     console.log('🎯 Players seeded by ELO:');\n280:     this.players.forEach((p, i) => {\n281:       console.log(`  ${i+1}. ${p.full_name} (ELO: ${p.elo})`);"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 281,
      "content": "console.log(`  ${i+1}. ${p.full_name} (ELO: ${p.elo})`);",
      "context": "279:     console.log('🎯 Players seeded by ELO:');\n280:     this.players.forEach((p, i) => {\n281:       console.log(`  ${i+1}. ${p.full_name} (ELO: ${p.elo})`);\n282:     });\n283:   }"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 286,
      "content": "console.log('🏆 Generating SABO Winner Bracket (14 matches)...');",
      "context": "284: \n285:   private generateSABOWinnerBracket(): void {\n286:     console.log('🏆 Generating SABO Winner Bracket (14 matches)...');\n287:     \n288:     // Round 1: 8 matches (16 -> 8)"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 340,
      "content": "console.log('🥈 Generating SABO Loser Brackets (10 matches)...');",
      "context": "338: \n339:   private generateSABOLoserBrackets(): void {\n340:     console.log('🥈 Generating SABO Loser Brackets (10 matches)...');\n341:     \n342:     // Losers Branch A: 7 matches (4+2+1)"
    },
    {
      "file": "src/services/ClientSideDoubleElimination.ts",
      "line": 419,
      "content": "console.log('🏅 Generating SABO Finals (3 matches)...');",
      "context": "417: \n418:   private generateSABOFinals(): void {\n419:     console.log('🏅 Generating SABO Finals (3 matches)...');\n420:     \n421:     // SABO Finals: 4-person knockout (2 from WB + 1 from LA + 1 from LB)"
    },
    {
      "file": "src/services/MigrationHealthMonitor.ts",
      "line": 5,
      "content": "console.log('Mock check migration health');",
      "context": "3: export class MigrationHealthMonitor {\n4:   static async checkHealth() {\n5:     console.log('Mock check migration health');\n6:     return { success: true, healthy: true };\n7:   }"
    },
    {
      "file": "src/services/MigrationHealthMonitor.ts",
      "line": 10,
      "content": "console.log('Mock run health checks');",
      "context": "8: \n9:   static async runHealthChecks() {\n10:     console.log('Mock run health checks');\n11:     return { success: true, checks: [] };\n12:   }"
    },
    {
      "file": "src/services/MigrationHealthMonitor.ts",
      "line": 15,
      "content": "console.log('Mock verify player ID cleanup');",
      "context": "13: \n14:   static async verifyPlayerIdCleanup() {\n15:     console.log('Mock verify player ID cleanup');\n16:     return { success: true, verified: true };\n17:   }"
    },
    {
      "file": "src/services/MigrationHealthMonitor.ts",
      "line": 20,
      "content": "console.log('Mock get health status');",
      "context": "18: \n19:   static async getHealthStatus() {\n20:     console.log('Mock get health status');\n21:     return {\n22:       success: true,"
    },
    {
      "file": "src/services/OptimizedQueryService.ts",
      "line": 16,
      "content": "console.log('Mock get batched profiles:', userIds);",
      "context": "14:     userIds: string[]\n15:   ): Promise<BatchedProfile[]> {\n16:     console.log('Mock get batched profiles:', userIds);\n17:     return userIds.map(id => ({\n18:       user_id: id,"
    },
    {
      "file": "src/services/OptimizedQueryService.ts",
      "line": 28,
      "content": "console.log('Mock get optimized tournament data:', tournamentId);",
      "context": "26: \n27:   static async getOptimizedTournamentData(tournamentId: string) {\n28:     console.log('Mock get optimized tournament data:', tournamentId);\n29:     return {\n30:       success: true,"
    },
    {
      "file": "src/services/OptimizedQueryService.ts",
      "line": 38,
      "content": "console.log('Mock get batched rank verifications:', limit);",
      "context": "36: \n37:   static async getBatchedRankVerifications(limit = 100) {\n38:     console.log('Mock get batched rank verifications:', limit);\n39:     return [];\n40:   }"
    },
    {
      "file": "src/services/OptimizedQueryService.ts",
      "line": 43,
      "content": "console.log('Mock get optimized leaderboard:', options);",
      "context": "41: \n42:   static async getOptimizedLeaderboard(options?: any) {\n43:     console.log('Mock get optimized leaderboard:', options);\n44:     return {\n45:       success: true,"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 164,
      "content": "console.log('🗑️ Clearing existing SABO matches...');",
      "context": "162:   static async clearExistingMatches(tournamentId: string): Promise<boolean> {\n163:     try {\n164:       console.log('🗑️ Clearing existing SABO matches...');\n165:   const client: any = supabaseService || (await import('@/integrations/supabase/client')).supabase;\n166:   const { error } = await client.from(this.TABLE_NAME).delete().eq('tournament_id', tournamentId);"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 188,
      "content": "console.log('💾 Starting SABO matches save...');",
      "context": "186:     tournamentId: string\n187:   ): Promise<number> {\n188:     console.log('💾 Starting SABO matches save...');\n189:     console.log(`📊 SABO matches to save: ${matches.length}`);\n190: "
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 189,
      "content": "console.log(`📊 SABO matches to save: ${matches.length}`);",
      "context": "187:   ): Promise<number> {\n188:     console.log('💾 Starting SABO matches save...');\n189:     console.log(`📊 SABO matches to save: ${matches.length}`);\n190: \n191:     // 1. Check table access"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 215,
      "content": "console.log('🏢 Using club_id:', clubId);",
      "context": "213: \n214:     const clubId = tournament.club_id;\n215:     console.log('🏢 Using club_id:', clubId);\n216: \n217:     // 4. Convert to SABO format"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 222,
      "content": "console.log(`📝 Converted ${saboMatches.length} matches to SABO format`);",
      "context": "220:     );\n221: \n222:     console.log(`📝 Converted ${saboMatches.length} matches to SABO format`);\n223: \n224:     // 5. Validate SABO structure"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 226,
      "content": "console.log('🎯 SABO bracket validation:', brackets);",
      "context": "224:     // 5. Validate SABO structure\n225:     const brackets = this.validateSABOStructure(saboMatches);\n226:     console.log('🎯 SABO bracket validation:', brackets);\n227: \n228:     // 6. Sanitize matches to only allowed columns (remove sabo_match_id, notes, etc.)"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 246,
      "content": "console.log(`📤 SABO Batch ${batchNumber}/${totalBatches} (${batch.length} matches)`);",
      "context": "244:       const totalBatches = Math.ceil(sanitized.length / batchSize);\n245: \n246:       console.log(`📤 SABO Batch ${batchNumber}/${totalBatches} (${batch.length} matches)`);\n247: \n248:       try {"
    },
    {
      "file": "src/services/SABOMatchHandler.ts",
      "line": 286,
      "content": "console.warn('⚠️ Some matches failed to save. Verify table schema or RLS policies.');",
      "context": "284:     console.log(`✅ SABO Total saved: ${savedCount}/${matches.length} matches`);\n285:     if (savedCount !== matches.length) {\n286:       console.warn('⚠️ Some matches failed to save. Verify table schema or RLS policies.');\n287:     }\n288:     return savedCount;"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 11,
      "content": "console.log(`🔍 Checking table structure: ${tableName}`);",
      "context": "9: export class TournamentMatchDBHandler {\n10:   static async checkTableStructure(tableName: string = 'tournament_matches') {\n11:     console.log(`🔍 Checking table structure: ${tableName}`);\n12:     \n13:     try {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 34,
      "content": "console.log('🔍 Auto-detecting matches table...');",
      "context": "32: \n33:   static async findMatchesTable(): Promise<string> {\n34:     console.log('🔍 Auto-detecting matches table...');\n35:     \n36:     const possibleTables = ["
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 51,
      "content": "console.log('❌ No matches table found, defaulting to tournament_matches');",
      "context": "49:     }\n50: \n51:     console.log('❌ No matches table found, defaulting to tournament_matches');\n52:     return 'tournament_matches';\n53:   }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 56,
      "content": "console.log(`🧪 Testing insert to ${tableName}...`);",
      "context": "54: \n55:   static async testInsertPermission(tableName: string = 'tournament_matches'): Promise<boolean> {\n56:     console.log(`🧪 Testing insert to ${tableName}...`);\n57:     \n58:     try {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 113,
      "content": "console.log('🗑️ Clearing existing matches...');",
      "context": "111: \n112:   static async clearExistingMatches(tournamentId: string, tableName: string = 'tournament_matches'): Promise<boolean> {\n113:     console.log('🗑️ Clearing existing matches...');\n114:     \n115:     try {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 139,
      "content": "console.log('💾 Starting safe matches save...');",
      "context": "137:     tableName?: string\n138:   ): Promise<number> {\n139:     console.log('💾 Starting safe matches save...');\n140:     console.log(`📊 Matches to save: ${matches.length}`);\n141: "
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 140,
      "content": "console.log(`📊 Matches to save: ${matches.length}`);",
      "context": "138:   ): Promise<number> {\n139:     console.log('💾 Starting safe matches save...');\n140:     console.log(`📊 Matches to save: ${matches.length}`);\n141: \n142:     // 1. Auto-detect table if not provided"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 166,
      "content": "console.log(`📝 Sanitized ${sanitizedMatches.length} matches`);",
      "context": "164:       this.sanitizeMatchData(match, tournamentId)\n165:     );\n166:     console.log(`📝 Sanitized ${sanitizedMatches.length} matches`);\n167: \n168:     // 6. Save in small batches"
    },
    {
      "file": "src/services/TournamentMatchDBHandler.ts",
      "line": 177,
      "content": "console.log(`📤 Batch ${batchNumber}/${totalBatches}`);",
      "context": "175:       const totalBatches = Math.ceil(sanitizedMatches.length / batchSize);\n176:       \n177:       console.log(`📤 Batch ${batchNumber}/${totalBatches}`);\n178: \n179:       try {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 11,
      "content": "console.log(`🔍 Checking table structure: ${tableName}`);",
      "context": "9: export class TournamentMatchDBHandler {\n10:   static async checkTableStructure(tableName: string = 'tournament_matches') {\n11:     console.log(`🔍 Checking table structure: ${tableName}`);\n12:     \n13:     try {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 34,
      "content": "console.log('🔍 Auto-detecting matches table...');",
      "context": "32: \n33:   static async findMatchesTable(): Promise<string> {\n34:     console.log('🔍 Auto-detecting matches table...');\n35:     \n36:     const possibleTables = ["
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 51,
      "content": "console.log('❌ No matches table found, defaulting to tournament_matches');",
      "context": "49:     }\n50: \n51:     console.log('❌ No matches table found, defaulting to tournament_matches');\n52:     return 'tournament_matches';\n53:   }"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 56,
      "content": "console.log(`🧪 Testing insert to ${tableName}...`);",
      "context": "54: \n55:   static async testInsertPermission(tableName: string = 'tournament_matches'): Promise<boolean> {\n56:     console.log(`🧪 Testing insert to ${tableName}...`);\n57:     \n58:     try {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 114,
      "content": "console.log('🗑️ Clearing existing matches...');",
      "context": "112: \n113:   static async clearExistingMatches(tournamentId: string, tableName: string = 'tournament_matches'): Promise<boolean> {\n114:     console.log('🗑️ Clearing existing matches...');\n115:     \n116:     try {"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 140,
      "content": "console.log('💾 Starting safe matches save...');",
      "context": "138:     tableName?: string\n139:   ): Promise<number> {\n140:     console.log('💾 Starting safe matches save...');\n141:     console.log(`📊 Matches to save: ${matches.length}`);\n142: "
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 141,
      "content": "console.log(`📊 Matches to save: ${matches.length}`);",
      "context": "139:   ): Promise<number> {\n140:     console.log('💾 Starting safe matches save...');\n141:     console.log(`📊 Matches to save: ${matches.length}`);\n142: \n143:     // 1. Auto-detect table if not provided"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 167,
      "content": "console.log(`📝 Sanitized ${sanitizedMatches.length} matches`);",
      "context": "165:       this.sanitizeMatchData(match, tournamentId)\n166:     );\n167:     console.log(`📝 Sanitized ${sanitizedMatches.length} matches`);\n168: \n169:     // 6. Save in small batches"
    },
    {
      "file": "src/services/TournamentMatchDBHandler_Fixed.ts",
      "line": 178,
      "content": "console.log(`📤 Batch ${batchNumber}/${totalBatches}`);",
      "context": "176:       const totalBatches = Math.ceil(sanitizedMatches.length / batchSize);\n177:       \n178:       console.log(`📤 Batch ${batchNumber}/${totalBatches}`);\n179: \n180:       try {"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 10,
      "content": "console.log('🔍 DEBUGGING Tournament Players Loading...');",
      "context": "8: export class TournamentPlayersDebugger {\n9:   static async debugTournamentPlayers(tournamentId: string) {\n10:     console.log('🔍 DEBUGGING Tournament Players Loading...');\n11:     console.log('Tournament ID:', tournamentId);\n12: "
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 11,
      "content": "console.log('Tournament ID:', tournamentId);",
      "context": "9:   static async debugTournamentPlayers(tournamentId: string) {\n10:     console.log('🔍 DEBUGGING Tournament Players Loading...');\n11:     console.log('Tournament ID:', tournamentId);\n12: \n13:     try {"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 30,
      "content": "console.log('📝 Registrations data:', registrations);",
      "context": "28: \n29:       console.log('📝 Registrations:', registrations?.length, regError);\n30:       console.log('📝 Registrations data:', registrations);\n31: \n32:       // 3. Check confirmed registrations"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 98,
      "content": "console.log('🔧 FIXING Tournament Players Loading...');",
      "context": "96: \n97:   static async fixLoadPlayers(tournamentId: string) {\n98:     console.log('🔧 FIXING Tournament Players Loading...');\n99: \n100:     try {"
    },
    {
      "file": "src/services/TournamentPlayersDebugger.ts",
      "line": 135,
      "content": "console.log('❌ No registrations found');",
      "context": "133: \n134:       if (regError || !registrations?.length) {\n135:         console.log('❌ No registrations found');\n136:         return [];\n137:       }"
    },
    {
      "file": "src/services/challengeNotificationEventHandler.ts",
      "line": 263,
      "content": "console.log('🔔 Handling challenge created:', payload);",
      "context": "261:    */\n262:   async handleChallengeCreated(payload: ChallengeCreatedPayload): Promise<void> {\n263:     console.log('🔔 Handling challenge created:', payload);\n264: \n265:     try {"
    },
    {
      "file": "src/services/challengeNotificationEventHandler.ts",
      "line": 321,
      "content": "console.log('🔔 Handling challenge status changed:', payload);",
      "context": "319:    */\n320:   async handleChallengeStatusChanged(payload: ChallengeStatusChangedPayload): Promise<void> {\n321:     console.log('🔔 Handling challenge status changed:', payload);\n322: \n323:     try {"
    },
    {
      "file": "src/services/challengeNotificationEventHandler.ts",
      "line": 343,
      "content": "console.log('Unhandled status change:', challenge.status);",
      "context": "341:           break;\n342:         default:\n343:           console.log('Unhandled status change:', challenge.status);\n344:       }\n345:     } catch (error) {"
    },
    {
      "file": "src/services/challengeNotificationEventHandler.ts",
      "line": 354,
      "content": "console.log('🔔 Handling match result:', payload);",
      "context": "352:    */\n353:   async handleMatchResult(payload: MatchResultPayload): Promise<void> {\n354:     console.log('🔔 Handling match result:', payload);\n355: \n356:     try {"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 40,
      "content": "console.log('🔔 Creating notification:', data);",
      "context": "38:   async createNotification(data: CreateNotificationData): Promise<ChallengeNotification | null> {\n39:     try {\n40:       console.log('🔔 Creating notification:', data);\n41: \n42:       const { data: notification, error } = await supabase"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 124,
      "content": "console.log(`🔔 Sending batch notifications to ${batch.userIds.length} users`);",
      "context": "122:   async sendBatchNotifications(batch: NotificationBatch): Promise<void> {\n123:     try {\n124:       console.log(`🔔 Sending batch notifications to ${batch.userIds.length} users`);\n125: \n126:       const notifications = batch.userIds.map(userId => ({"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 409,
      "content": "console.log('🔔 Subscribing to notifications for user:', userId);",
      "context": "407:     callback: (notification: ChallengeNotification) => void\n408:   ): () => void {\n409:     console.log('🔔 Subscribing to notifications for user:', userId);\n410: \n411:     this.realtimeSubscription = supabase"
    },
    {
      "file": "src/services/challengeNotificationService.ts",
      "line": 432,
      "content": "console.log('🔔 Unsubscribing from notifications');",
      "context": "430:     // Return unsubscribe function\n431:     return () => {\n432:       console.log('🔔 Unsubscribing from notifications');\n433:       if (this.realtimeSubscription) {\n434:         supabase.removeChannel(this.realtimeSubscription);"
    },
    {
      "file": "src/services/emailService.ts",
      "line": 87,
      "content": "console.log(`Sending email to: ${to}`);",
      "context": "85:       // In production, this would integrate with a real email service\n86:       // For now, we'll use Supabase's built-in email functionality\n87:       console.log(`Sending email to: ${to}`);\n88:       console.log(`Subject: ${template.subject}`);\n89:       console.log(`Content: ${template.text}`);"
    },
    {
      "file": "src/services/emailService.ts",
      "line": 88,
      "content": "console.log(`Subject: ${template.subject}`);",
      "context": "86:       // For now, we'll use Supabase's built-in email functionality\n87:       console.log(`Sending email to: ${to}`);\n88:       console.log(`Subject: ${template.subject}`);\n89:       console.log(`Content: ${template.text}`);\n90: "
    },
    {
      "file": "src/services/emailService.ts",
      "line": 89,
      "content": "console.log(`Content: ${template.text}`);",
      "context": "87:       console.log(`Sending email to: ${to}`);\n88:       console.log(`Subject: ${template.subject}`);\n89:       console.log(`Content: ${template.text}`);\n90: \n91:       // Store email log in database for tracking"
    },
    {
      "file": "src/services/emailService.ts",
      "line": 107,
      "content": "console.log(`Email log: ${to} - ${subject} - ${status}`);",
      "context": "105:     try {\n106:       // Log email activity for audit purposes\n107:       console.log(`Email log: ${to} - ${subject} - ${status}`);\n108:     } catch (error) {\n109:       console.error('Failed to log email:', error);"
    },
    {
      "file": "src/services/messageService.ts",
      "line": 291,
      "content": "console.log('Function get_unread_message_count not found, using fallback query');",
      "context": "289: \n290:       // Fallback to manual count if function doesn't exist\n291:       console.log('Function get_unread_message_count not found, using fallback query');\n292:       \n293:       const { data: tableExists, error: tableError } = await supabase"
    },
    {
      "file": "src/services/rankApprovalService.ts",
      "line": 35,
      "content": "console.log(`🎯 [RankApproval] Starting approval for request: ${requestId}`);",
      "context": "33:     \n34:     const startTime = Date.now();\n35:     console.log(`🎯 [RankApproval] Starting approval for request: ${requestId}`);\n36:     \n37:     try {"
    },
    {
      "file": "src/services/rankApprovalService.ts",
      "line": 62,
      "content": "console.log(`📋 [RankApproval] User: ${user_id}, New Rank: ${requested_rank}`);",
      "context": "60:       \n61:       const { user_id, requested_rank } = rankRequest;\n62:       console.log(`📋 [RankApproval] User: ${user_id}, New Rank: ${requested_rank}`);\n63:       \n64:       // 2. Get current rank from player_rankings"
    },
    {
      "file": "src/services/rankApprovalService.ts",
      "line": 72,
      "content": "console.log(`📊 [RankApproval] Current rank: ${oldRank} → New rank: ${requested_rank}`);",
      "context": "70:         \n71:       const oldRank = currentRanking?.verified_rank || currentRanking?.current_rank || 'K';\n72:       console.log(`📊 [RankApproval] Current rank: ${oldRank} → New rank: ${requested_rank}`);\n73:       \n74:       // 3. Start transaction-like updates"
    },
    {
      "file": "src/services/rankApprovalService.ts",
      "line": 219,
      "content": "console.log(`🔄 [RankApproval] Batch approving ${requestIds.length} requests`);",
      "context": "217:     }\n218:   ): Promise<RankApprovalResult[]> {\n219:     console.log(`🔄 [RankApproval] Batch approving ${requestIds.length} requests`);\n220:     \n221:     const results: RankApprovalResult[] = [];"
    },
    {
      "file": "src/services/rankService.ts",
      "line": 76,
      "content": "console.log('Mock get rank definitions');",
      "context": "74: export class RankService {\n75:   static async getRankDefinitions(): Promise<DatabaseRankDefinition[]> {\n76:     console.log('Mock get rank definitions');\n77:     return [\n78:       {"
    },
    {
      "file": "src/services/rankService.ts",
      "line": 93,
      "content": "console.log('Mock update rank definition:', rankCode, data);",
      "context": "91:     data: Partial<DatabaseRankDefinition>\n92:   ) {\n93:     console.log('Mock update rank definition:', rankCode, data);\n94:     return { success: true };\n95:   }"
    },
    {
      "file": "src/services/rankService.ts",
      "line": 98,
      "content": "console.log('Mock create rank definition:', data);",
      "context": "96: \n97:   static async createRankDefinition(data: DatabaseRankDefinition) {\n98:     console.log('Mock create rank definition:', data);\n99:     return { success: true, data };\n100:   }"
    },
    {
      "file": "src/services/rankService.ts",
      "line": 103,
      "content": "console.log('Mock delete rank definition:', rankCode);",
      "context": "101: \n102:   static async deleteRankDefinition(rankCode: string) {\n103:     console.log('Mock delete rank definition:', rankCode);\n104:     return { success: true };\n105:   }"
    },
    {
      "file": "src/services/rankService.ts",
      "line": 108,
      "content": "console.log('Mock get tournament reward structures');",
      "context": "106: \n107:   static async getTournamentRewardStructures() {\n108:     console.log('Mock get tournament reward structures');\n109:     return [];\n110:   }"
    },
    {
      "file": "src/services/rankService.ts",
      "line": 113,
      "content": "console.log('Mock calculate rank promotion:', userId);",
      "context": "111: \n112:   static async calculateRankPromotion(userId: string) {\n113:     console.log('Mock calculate rank promotion:', userId);\n114:     return { promoted: false, newRank: null };\n115:   }"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 41,
      "content": "console.log('🎯 SABOTournamentEngine: Starting score submission', {",
      "context": "39:   ): Promise<AdvancementResult> {\n40:     try {\n41:       console.log('🎯 SABOTournamentEngine: Starting score submission', {\n42:         tournamentId,\n43:         matchId: matchData.match_id,"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 75,
      "content": "console.log('🎯 Player score mapping:', {",
      "context": "73:         : matchData.loser_score;\n74: \n75:       console.log('🎯 Player score mapping:', {\n76:         player1_id: matchInfo.player1_id,\n77:         player1_score,"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 132,
      "content": "console.log('🚀 Processing automatic advancement...', {",
      "context": "130:   ): Promise<any> {\n131:     try {\n132:       console.log('🚀 Processing automatic advancement...', {\n133:         tournamentId,\n134:         completedMatchId,"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 151,
      "content": "console.log('🎯 Match details:', {",
      "context": "149:       const { round_number, match_number, bracket_type } = matchData;\n150:       \n151:       console.log('🎯 Match details:', {\n152:         round_number,\n153:         match_number,"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 198,
      "content": "console.log('⚠️ No specific advancement function for this round', {",
      "context": "196: \n197:         default:\n198:           console.log('⚠️ No specific advancement function for this round', {\n199:             bracket_type,\n200:             round_number"
    },
    {
      "file": "src/services/tournament/SABOTournamentManager.ts",
      "line": 228,
      "content": "console.log(`🎯 Calling ${functionName} for tournament ${tournamentId}`);",
      "context": "226:   ): Promise<any> {\n227:     try {\n228:       console.log(`🎯 Calling ${functionName} for tournament ${tournamentId}`);\n229:       \n230:   const { data, error } = await supabase.rpc(functionName as any, {"
    },
    {
      "file": "src/services/tournament/TournamentFunctionResolver.ts",
      "line": 140,
      "content": "console.warn(`Function ${functionName} not found, trying fallbacks...`);",
      "context": "138:       error.message?.includes('does not exist')\n139:     ) {\n140:       console.warn(`Function ${functionName} not found, trying fallbacks...`);\n141: \n142:       for (const fallback of fallbacks) {"
    },
    {
      "file": "src/services/tournament/TournamentFunctionResolver.ts",
      "line": 148,
      "content": "console.info(`Successfully used fallback function: ${fallback}`);",
      "context": "146: \n147:           if (!fallbackError) {\n148:             console.info(`Successfully used fallback function: ${fallback}`);\n149:             return {\n150:               data: fallbackData as T,"
    },
    {
      "file": "src/services/tournament/TournamentFunctionResolver.ts",
      "line": 156,
      "content": "console.warn(`Fallback ${fallback} also failed:`, fallbackErr);",
      "context": "154:           }\n155:         } catch (fallbackErr) {\n156:           console.warn(`Fallback ${fallback} also failed:`, fallbackErr);\n157:           continue;\n158:         }"
    },
    {
      "file": "src/services/tournament/TournamentFunctionResolver.ts",
      "line": 238,
      "content": "console.info(",
      "context": "236:   });\n237: \n238:   console.info(\n239:     `Tournament Functions Status: ${available.length}/${allFunctions.length} available`\n240:   );"
    },
    {
      "file": "src/services/tournament/TournamentFunctionResolver.ts",
      "line": 242,
      "content": "console.warn('Missing functions:', missing);",
      "context": "240:   );\n241:   if (missing.length > 0) {\n242:     console.warn('Missing functions:', missing);\n243:   }\n244: "
    },
    {
      "file": "src/services/tournament/TournamentTransactionService.ts",
      "line": 209,
      "content": "console.warn(`Executing rollback for ${this.context.operation}...`);",
      "context": "207:    */\n208:   private async rollback(): Promise<void> {\n209:     console.warn(`Executing rollback for ${this.context.operation}...`);\n210: \n211:     // Execute rollback operations in reverse order"
    },
    {
      "file": "src/services/tournament/TournamentTransactionService.ts",
      "line": 395,
      "content": "console.warn(",
      "context": "393:           );\n394:         } catch (advanceError) {\n395:           console.warn(\n396:             'Winner advancement failed, but score was recorded:',\n397:             advanceError"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 26,
      "content": "console.log('🎯 Using new fixed advance function for match:', matchId);",
      "context": "24: ): Promise<AdvancementResult> {\n25:   try {\n26:     console.log('🎯 Using new fixed advance function for match:', matchId);\n27: \n28:     // Get tournament ID first"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 107,
      "content": "console.log('🔧 Fixing bracket progression for tournament:', tournamentId);",
      "context": "105: ): Promise<AdvancementResult> {\n106:   try {\n107:     console.log('🔧 Fixing bracket progression for tournament:', tournamentId);\n108: \n109:     // Get all completed matches that need advancement"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 124,
      "content": "console.log(",
      "context": "122:     }\n123: \n124:     console.log(\n125:       '🎯 Found completed matches to process:',\n126:       completedMatches?.length || 0"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 138,
      "content": "console.log(",
      "context": "136:         if (result.success) {\n137:           successCount++;\n138:           console.log(\n139:             `✅ Advanced winner from Round ${match.round_number} Match ${match.match_number}`\n140:           );"
    },
    {
      "file": "src/services/tournament/bracketAdvancement.ts",
      "line": 179,
      "content": "console.log(",
      "context": "177:   tournamentId: string\n178: ): Promise<void> {\n179:   console.log(\n180:     '🔄 Auto-advancing completed matches for tournament:',\n181:     tournamentId"
    },
    {
      "file": "src/services/tournament-prizes.service.ts",
      "line": 260,
      "content": "console.log('🔍 Rewards calculation result:', rewardsCalculation.positions.length, 'positions');",
      "context": "258:     // Use the existing proven logic\n259:     const rewardsCalculation = calculateRewards(mockTournament, playerRank);\n260:     console.log('🔍 Rewards calculation result:', rewardsCalculation.positions.length, 'positions');\n261:     \n262:     // Convert to our new prize structure - FILTER OUT participation (position 99) "
    },
    {
      "file": "src/services/tournament-prizes.service.ts",
      "line": 264,
      "content": "console.log('🔍 After filtering out participation:', positions.length, 'positions');",
      "context": "262:     // Convert to our new prize structure - FILTER OUT participation (position 99) \n263:     let positions = rewardsCalculation.positions.filter(pos => pos.position !== 99);\n264:     console.log('🔍 After filtering out participation:', positions.length, 'positions');\n265: \n266:     // Apply format modifications to the base calculation"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 59,
      "content": "console.log(`🆕 Phát hiện trang mới: ${pagePath}`);",
      "context": "57:   detectNewPage(pagePath: string, componentName: string): void {\n58:     if (!this.knownPages.has(pagePath)) {\n59:       console.log(`🆕 Phát hiện trang mới: ${pagePath}`);\n60:       this.knownPages.add(pagePath);\n61:       this.queuePageForTranslation(pagePath, componentName);"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 101,
      "content": "console.log(`📝 Đưa trang vào hàng đợi dịch thuật: ${pagePath}`);",
      "context": "99:   ): Promise<void> {\n100:     try {\n101:       console.log(`📝 Đưa trang vào hàng đợi dịch thuật: ${pagePath}`);\n102: \n103:       // Use custom keys if provided, otherwise generate sample keys"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 147,
      "content": "console.log(`🔄 Xử lý ${pendingTasks.length} tasks dịch thuật`);",
      "context": "145:       }\n146: \n147:       console.log(`🔄 Xử lý ${pendingTasks.length} tasks dịch thuật`);\n148: \n149:       for (const task of pendingTasks) {"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 168,
      "content": "console.log(`🔄 Bắt đầu dịch: ${task.page_path}`);",
      "context": "166:       }\n167: \n168:       console.log(`🔄 Bắt đầu dịch: ${task.page_path}`);\n169: \n170:       // Simulate translation process"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 372,
      "content": "console.log(`🔧 Dịch thủ công: ${pagePath}`);",
      "context": "370:     componentName: string\n371:   ): Promise<void> {\n372:     console.log(`🔧 Dịch thủ công: ${pagePath}`);\n373:     await this.queuePageForTranslation(pagePath, componentName);\n374:   }"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 378,
      "content": "console.log('🚀 Bắt đầu dịch hàng loạt tất cả trang');",
      "context": "376:   // Batch translate all untranslated pages\n377:   async batchTranslateAll(): Promise<void> {\n378:     console.log('🚀 Bắt đầu dịch hàng loạt tất cả trang');\n379:     await this.processTranslationQueue();\n380:   }"
    },
    {
      "file": "src/services/translationService.ts",
      "line": 386,
      "content": "console.log('🗑️ Đã xóa tất cả tasks dịch thuật');",
      "context": "384:     this.tasks = [];\n385:     this.saveTasks();\n386:     console.log('🗑️ Đã xóa tất cả tasks dịch thuật');\n387:   }\n388: }"
    },
    {
      "file": "src/tournaments/sabo/SABO32TournamentEngine.ts",
      "line": 23,
      "content": "console.log('🎯 Creating SABO-32 tournament with 2 groups');",
      "context": "21:     }\n22:     \n23:     console.log('🎯 Creating SABO-32 tournament with 2 groups');\n24:     \n25:     // Step 1: Random seeding into 2 groups"
    },
    {
      "file": "src/tournaments/sabo/SABO32TournamentEngine.ts",
      "line": 28,
      "content": "console.log('📊 Groups created:', {",
      "context": "26:     const { groupA, groupB } = SABO32Seeding.randomSeed(players);\n27:     \n28:     console.log('📊 Groups created:', {\n29:       groupA: groupA.length,\n30:       groupB: groupB.length"
    },
    {
      "file": "src/tournaments/sabo/SABODoubleEliminationViewer.tsx",
      "line": 48,
      "content": "console.log('🔄 Saving scroll position:', scrollPositionRef.current);",
      "context": "46:     // Save current scroll position\n47:     scrollPositionRef.current = window.scrollY;\n48:     console.log('🔄 Saving scroll position:', scrollPositionRef.current);\n49: \n50:     refresh();"
    },
    {
      "file": "src/tournaments/sabo/SABODoubleEliminationViewer.tsx",
      "line": 56,
      "content": "console.log('📍 Restored scroll position to:', targetPosition);",
      "context": "54:       const targetPosition = scrollPositionRef.current;\n55:       window.scrollTo({ top: targetPosition, behavior: 'instant' });\n56:       console.log('📍 Restored scroll position to:', targetPosition);\n57:     };\n58: "
    },
    {
      "file": "src/tournaments/sabo/SABODoubleEliminationViewer.tsx",
      "line": 78,
      "content": "console.log('🎯 SABODoubleEliminationViewer DEBUG:', {",
      "context": "76:   const canManageTournament = isClubOwner;\n77: \n78:   console.log('🎯 SABODoubleEliminationViewer DEBUG:', {\n79:     tournamentId,\n80:     matchesCount: matches?.length || 0,"
    },
    {
      "file": "src/tournaments/sabo/SABODoubleEliminationViewer.tsx",
      "line": 115,
      "content": "console.log('🔧 Using mock SABO data for display...');",
      "context": "113:   \n114:   if (!matches || matches.length === 0) {\n115:     console.log('🔧 Using mock SABO data for display...');\n116:     \n117:     // Create mock SABO matches for demonstration"
    },
    {
      "file": "src/tournaments/sabo/SABODoubleEliminationViewer.tsx",
      "line": 162,
      "content": "console.log('📊 Using mock SABO data:', {",
      "context": "160:     displayMatches = mockMatches;\n161:     \n162:     console.log('📊 Using mock SABO data:', {\n163:       total: mockMatches.length,\n164:       type: 'mock'"
    },
    {
      "file": "src/tournaments/sabo/SABODoubleEliminationViewer.tsx",
      "line": 173,
      "content": "console.log('🏆 SABOLogicCore ORGANIZED:', {",
      "context": "171:   const saboProgress = SABOLogicCore.getTournamentProgress(displayMatches);\n172: \n173:   console.log('🏆 SABOLogicCore ORGANIZED:', {\n174:     total: displayMatches?.length || 0,\n175:     winners: organizedMatches.winners?.length || 0,"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 24,
      "content": "console.log('🔍 Fetching SABO-32 tournament matches for:', tournamentId);",
      "context": "22:     queryKey: ['sabo32-tournament', tournamentId],\n23:     queryFn: async (): Promise<SABO32Match[]> => {\n24:       console.log('🔍 Fetching SABO-32 tournament matches for:', tournamentId);\n25:       \n26:       const { data, error } = await supabase"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 83,
      "content": "console.log('🎯 Submitting SABO-32 match score:', { matchId, scores, matchData });",
      "context": "81:       matchData: SABO32Match;\n82:     }) => {\n83:       console.log('🎯 Submitting SABO-32 match score:', { matchId, scores, matchData });\n84: \n85:       // Determine winner and loser"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 151,
      "content": "console.log('🎯 Handling SABO-32 advancement for:', {",
      "context": "149:     tournamentId: string\n150:   ) => {\n151:     console.log('🎯 Handling SABO-32 advancement for:', {\n152:       match: completedMatch.sabo_match_id,\n153:       group: completedMatch.group_id,"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 189,
      "content": "console.log('🏆 Group advancement logic - to be implemented');",
      "context": "187:     // This is similar to SABO-16 advancement but within group scope\n188:     // Implementation would reuse existing SABOLogicCore with group filtering\n189:     console.log('🏆 Group advancement logic - to be implemented');\n190:   };\n191: "
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 198,
      "content": "console.log('🎯 Cross-bracket advancement: winner advances to final');",
      "context": "196:     tournamentId: string\n197:   ) => {\n198:     console.log('🎯 Cross-bracket advancement: winner advances to final');\n199:     \n200:     // Find the final match"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABO32Tournament.ts",
      "line": 225,
      "content": "console.log('🔍 Checking if cross-bracket can be populated...');",
      "context": "223:   // Check if both groups are completed and populate cross-bracket\n224:   const checkAndPopulateCrossBracket = async (tournamentId: string) => {\n225:     console.log('🔍 Checking if cross-bracket can be populated...');\n226:     \n227:     // Get group finals"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 27,
      "content": "console.log('🎯 Submitting SABO match score with SAFE DIRECT UPDATE:', { matchId, scores, matchData });",
      "context": "25:       matchData: any;\n26:     }) => {\n27:       console.log('🎯 Submitting SABO match score with SAFE DIRECT UPDATE:', { matchId, scores, matchData });\n28: \n29:       // Get current user for submitted_by parameter"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 37,
      "content": "console.warn('⚠️ No user logged in, using club owner fallback');",
      "context": "35:       \n36:       if (!user) {\n37:         console.warn('⚠️ No user logged in, using club owner fallback');\n38:       }\n39: "
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 51,
      "content": "console.log('🔍 Using SAFE DIRECT UPDATE (step by step)');",
      "context": "49:       const loserId = player1Score > player2Score ? matchData.player2_id : matchData.player1_id;\n50: \n51:       console.log('🔍 Using SAFE DIRECT UPDATE (step by step)');\n52: \n53:       // ✅ STEP 1: Update match result ONLY (using exact schema columns)"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 87,
      "content": "console.log('📋 Advancement targets:', {",
      "context": "85:         );\n86:         \n87:         console.log('📋 Advancement targets:', {\n88:           round: matchData.round_number,\n89:           winner: winnerAdvancement,"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 95,
      "content": "console.log(`🏆 Advancing winner to round ${winnerAdvancement.round}`);",
      "context": "93:         // ✅ ADVANCE WINNER (if applicable)\n94:         if (winnerAdvancement.round) {\n95:           console.log(`🏆 Advancing winner to round ${winnerAdvancement.round}`);\n96:           \n97:           const nextMatchNumber = Math.ceil(matchData.match_number / 2);"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOScoreSubmission.ts",
      "line": 128,
      "content": "console.log(`💔 Advancing loser to round ${loserAdvancement.round}`);",
      "context": "126:         // ✅ ADVANCE LOSER (if applicable)\n127:         if (loserAdvancement.round) {\n128:           console.log(`💔 Advancing loser to round ${loserAdvancement.round}`);\n129:           \n130:           const loserMatchNumber = Math.ceil(matchData.match_number / 2);"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOSemifinalsFix.ts",
      "line": 15,
      "content": "console.log('🔧 Fixing SABO semifinals for tournament:', tournamentId);",
      "context": "13:   const fixSemifinalsMutation = useMutation({\n14:     mutationFn: async () => {\n15:       console.log('🔧 Fixing SABO semifinals for tournament:', tournamentId);\n16: \n17:       // Cast the function name as any since it's not in types yet"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 26,
      "content": "console.log('🎯 Fetching SABO matches for tournament:', tournamentId);",
      "context": "24:       setError(null);\n25: \n26:       console.log('🎯 Fetching SABO matches for tournament:', tournamentId);\n27:       console.log('👤 User authenticated:', !!user);\n28: "
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 27,
      "content": "console.log('👤 User authenticated:', !!user);",
      "context": "25: \n26:       console.log('🎯 Fetching SABO matches for tournament:', tournamentId);\n27:       console.log('👤 User authenticated:', !!user);\n28: \n29:       // Check if user is authenticated for better RLS access"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 31,
      "content": "console.log('⚠️ No authenticated user - may have RLS issues');",
      "context": "29:       // Check if user is authenticated for better RLS access\n30:       if (!user) {\n31:         console.log('⚠️ No authenticated user - may have RLS issues');\n32:       }\n33: "
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 36,
      "content": "console.log('🔧 Using service client to bypass RLS for SABO matches...');",
      "context": "34:       // Fetch matches from tournament_matches table (renamed from sabo_tournament_matches)\n35:       // Use service client to bypass RLS issues\n36:       console.log('🔧 Using service client to bypass RLS for SABO matches...');\n37:       \n38:       if (!supabaseService) {"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 62,
      "content": "console.log('🔍 Sample SABO match structure:', matchesData[0]);",
      "context": "60:       // Debug: Check first match structure\n61:       if (matchesData && matchesData.length > 0) {\n62:         console.log('🔍 Sample SABO match structure:', matchesData[0]);\n63:         console.log('🔍 Available fields:', Object.keys(matchesData[0]));\n64:       }"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 63,
      "content": "console.log('🔍 Available fields:', Object.keys(matchesData[0]));",
      "context": "61:       if (matchesData && matchesData.length > 0) {\n62:         console.log('🔍 Sample SABO match structure:', matchesData[0]);\n63:         console.log('🔍 Available fields:', Object.keys(matchesData[0]));\n64:       }\n65: "
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 85,
      "content": "console.log('🔍 Processing match:', match.sabo_match_id || match.id, {",
      "context": "83:       // Map matches with cached profiles and convert to SABO format\n84:       const matchesWithProfiles = ((matchesData as any[]) || []).map((match: any) => {\n85:         console.log('🔍 Processing match:', match.sabo_match_id || match.id, {\n86:           bracket_type: match.bracket_type,\n87:           round_number: match.round_number,"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 124,
      "content": "console.log('🔍 [useSABOTournamentMatches] Score mapping CORRECTED:', {",
      "context": "122:         // 🔍 DEBUG: Log score mapping để debug tỷ số\n123:         if (match.status === 'completed' && (match.player1_score || match.player2_score)) {\n124:           console.log('🔍 [useSABOTournamentMatches] Score mapping CORRECTED:', {\n125:             id: match.id,\n126:             raw_player1_score: match.player1_score,"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 137,
      "content": "console.log('🔍 [useSABOTournamentMatches] Score mapping:', {",
      "context": "135:         // 🔍 DEBUG: Log score mapping để debug tỷ số\n136:         if (match.status === 'completed' && (match.score_player1 || match.score_player2)) {\n137:           console.log('🔍 [useSABOTournamentMatches] Score mapping:', {\n138:             id: match.id,\n139:             raw_score_player1: match.score_player1,"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 149,
      "content": "console.log(",
      "context": "147:       }) as SABOMatch[];\n148: \n149:       console.log(\n150:         '✅ SABO matches with cached profiles:',\n151:         matchesWithProfiles.length"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 156,
      "content": "console.log('🔍 Final processed match sample:', matchesWithProfiles[0]);",
      "context": "154:       // Debug: Check final processed matches\n155:       if (matchesWithProfiles.length > 0) {\n156:         console.log('🔍 Final processed match sample:', matchesWithProfiles[0]);\n157:       }\n158:       setMatches(matchesWithProfiles);"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 172,
      "content": "console.log(",
      "context": "170:     if (!tournamentId) return;\n171: \n172:     console.log(\n173:       '🔄 Setting up SABO real-time subscription for tournament:',\n174:       tournamentId"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 185,
      "content": "console.log('🚀 URGENT: Immediate SABO refresh triggered');",
      "context": "183:       // ✅ CRITICAL FIX: Immediate refresh for urgent updates (score submissions)\n184:       if (isUrgent) {\n185:         console.log('🚀 URGENT: Immediate SABO refresh triggered');\n186:         updateQueue.clear();\n187:         loadMatches();"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 194,
      "content": "console.log('🔄 Processing SABO queued updates:', updateQueue.size);",
      "context": "192:       debounceTimer = setTimeout(() => {\n193:         if (updateQueue.size > 0) {\n194:           console.log('🔄 Processing SABO queued updates:', updateQueue.size);\n195:           updateQueue.clear();\n196:           loadMatches();"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 212,
      "content": "console.log(",
      "context": "210:         },\n211:         payload => {\n212:           console.log(\n213:             '🔄 SABO match real-time update:',\n214:             payload.eventType,"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 228,
      "content": "console.log(",
      "context": "226: \n227:           if (isScoreUpdate) {\n228:             console.log(\n229:               '🚀 URGENT: Score/status update detected, immediate refresh!'\n230:             );"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 260,
      "content": "console.log(",
      "context": "258:                   };\n259: \n260:                   console.log(\n261:                     '✅ Immediate UI update applied for match:',\n262:                     payload.new.id"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 272,
      "content": "console.log(",
      "context": "270:             // Also trigger full refresh after a short delay to get any related updates\n271:             setTimeout(() => {\n272:               console.log(\n273:                 '🔄 Following up with full refresh after score update'\n274:               );"
    },
    {
      "file": "src/tournaments/sabo/hooks/useSABOTournamentMatches.ts",
      "line": 298,
      "content": "console.log(",
      "context": "296:         payload => {\n297:           const logData = payload.new as any;\n298:           console.log(\n299:             '🤖 SABO automation event:',\n300:             logData.automation_type,"
    },
    {
      "file": "src/utils/authHelpers.ts",
      "line": 38,
      "content": "console.warn('No access token found');",
      "context": "36: \n37:     if (!session?.access_token) {\n38:       console.warn('No access token found');\n39:       return false;\n40:     }"
    },
    {
      "file": "src/utils/authHelpers.ts",
      "line": 44,
      "content": "console.warn('Token expired');",
      "context": "42:     // Check if token is expired\n43:     if (session.expires_at && session.expires_at < Date.now() / 1000) {\n44:       console.warn('Token expired');\n45:       return false;\n46:     }"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 8,
      "content": "console.log('🚨 Emergency auth recovery initiated...');",
      "context": "6:  */\n7: export const emergencyAuthRecovery = () => {\n8:   console.log('🚨 Emergency auth recovery initiated...');\n9: \n10:   // COMPLETELY SKIP RECOVERY ON TOURNAMENT PAGES"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 14,
      "content": "console.log('🚫 Skipping auth recovery on tournament/club pages to preserve user experience');",
      "context": "12:       window.location.pathname.includes('/club-management') ||\n13:       window.location.pathname === '/tournaments') {\n14:     console.log('🚫 Skipping auth recovery on tournament/club pages to preserve user experience');\n15:     return;\n16:   }"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 50,
      "content": "console.log('📣 Dispatched auth-recovery event (no hard redirect)');",
      "context": "48:       });\n49:       window.dispatchEvent(recoveryEvent);\n50:       console.log('📣 Dispatched auth-recovery event (no hard redirect)');\n51:     } catch (evtErr) {\n52:       console.warn('Event dispatch failed, but AVOIDING forced reload to preserve user experience');"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 52,
      "content": "console.warn('Event dispatch failed, but AVOIDING forced reload to preserve user experience');",
      "context": "50:       console.log('📣 Dispatched auth-recovery event (no hard redirect)');\n51:     } catch (evtErr) {\n52:       console.warn('Event dispatch failed, but AVOIDING forced reload to preserve user experience');\n53:       // REMOVED: setTimeout(() => window.location.reload(), 800);\n54:       // Instead, just log and let user continue their activity"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 118,
      "content": "console.log('🚫 Auth monitoring disabled on tournament/club pages');",
      "context": "116:       window.location.pathname.includes('/club-management') ||\n117:       window.location.pathname === '/tournaments') {\n118:     console.log('🚫 Auth monitoring disabled on tournament/club pages');\n119:     return;\n120:   }"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 125,
      "content": "console.warn('🔍 Auth conflicts detected on load:', initialConflicts);",
      "context": "123:   const initialConflicts = detectAuthConflicts();\n124:   if (initialConflicts.length > 0) {\n125:     console.warn('🔍 Auth conflicts detected on load:', initialConflicts);\n126: \n127:     // Auto-recovery for severe conflicts - BUT NOT ON TOURNAMENT PAGES"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 129,
      "content": "console.log('🔧 Auto-triggering emergency recovery...');",
      "context": "127:     // Auto-recovery for severe conflicts - BUT NOT ON TOURNAMENT PAGES\n128:     if (initialConflicts.length > 3) {\n129:       console.log('🔧 Auto-triggering emergency recovery...');\n130:       emergencyAuthRecovery();\n131:     }"
    },
    {
      "file": "src/utils/authRecovery.ts",
      "line": 188,
      "content": "console.log('🔧 Auth monitoring activated');",
      "context": "186:   };\n187: \n188:   console.log('🔧 Auth monitoring activated');\n189: };\n190: "
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 14,
      "content": "console.log(`Removed localStorage key: ${key}`);",
      "context": "12:     if (key.startsWith('supabase.auth.') || key.includes('sb-')) {\n13:       localStorage.removeItem(key);\n14:       console.log(`Removed localStorage key: ${key}`);\n15:     }\n16:   });"
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 22,
      "content": "console.log(`Removed sessionStorage key: ${key}`);",
      "context": "20:     if (key.startsWith('supabase.auth.') || key.includes('sb-')) {\n21:       sessionStorage.removeItem(key);\n22:       console.log(`Removed sessionStorage key: ${key}`);\n23:     }\n24:   });"
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 47,
      "content": "console.log('🚪 Performing robust sign out...');",
      "context": "45:  */\n46: export const robustSignOut = async () => {\n47:   console.log('🚪 Performing robust sign out...');\n48: \n49:   try {"
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 65,
      "content": "console.log('� Dispatched auth-signed-out event (no forced redirect)');",
      "context": "63:       });\n64:       window.dispatchEvent(evt);\n65:       console.log('� Dispatched auth-signed-out event (no forced redirect)');\n66:     } catch (e) {\n67:       console.warn('Event dispatch failed, fallback soft reload');"
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 67,
      "content": "console.warn('Event dispatch failed, fallback soft reload');",
      "context": "65:       console.log('� Dispatched auth-signed-out event (no forced redirect)');\n66:     } catch (e) {\n67:       console.warn('Event dispatch failed, fallback soft reload');\n68:       setTimeout(() => window.location.reload(), 600);\n69:     }"
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 77,
      "content": "console.log('🔐 Performing robust sign in...');",
      "context": "75:  */\n76: export const robustSignIn = async (signInFunction: () => Promise<any>) => {\n77:   console.log('🔐 Performing robust sign in...');\n78: \n79:   try {"
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 98,
      "content": "console.log(",
      "context": "96: \n97:     if (result.data?.user) {\n98:       console.log(\n99:         '✅ Sign in successful (no forced redirect). Emitting event.'\n100:       );"
    },
    {
      "file": "src/utils/authStateCleanup.ts",
      "line": 145,
      "content": "console.warn('⚠️ Auth conflicts detected:', conflicts);",
      "context": "143: \n144:   if (conflicts.length > 0) {\n145:     console.warn('⚠️ Auth conflicts detected:', conflicts);\n146:     return conflicts;\n147:   }"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 70,
      "content": "console.log('🔧 Starting comprehensive tournament fix for:', tournamentId);",
      "context": "68: ): Promise<AdvancementResult> => {\n69:   try {\n70:     console.log('🔧 Starting comprehensive tournament fix for:', tournamentId);\n71: \n72:     const { data, error } = await supabase.rpc("
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 114,
      "content": "console.log('🔄 Auto-checking tournament progression for:', tournamentId);",
      "context": "112: ): Promise<void> => {\n113:   try {\n114:     console.log('🔄 Auto-checking tournament progression for:', tournamentId);\n115: \n116:     // Check if tournament needs fixing by looking for inconsistencies"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 153,
      "content": "console.log(",
      "context": "151:       if (completedInCurrent.length > 0 && emptyInNext.length > 0) {\n152:         needsFix = true;\n153:         console.log(\n154:           `🔧 Found progression issue: Round ${rounds[i]} -> ${rounds[i + 1]}`\n155:         );"
    },
    {
      "file": "src/utils/bracketAdvancement.ts",
      "line": 161,
      "content": "console.log('🔧 Auto-fixing tournament progression...');",
      "context": "159: \n160:     if (needsFix) {\n161:       console.log('🔧 Auto-fixing tournament progression...');\n162:       await fixAllTournamentProgression(tournamentId);\n163:     } else {"
    },
    {
      "file": "src/utils/bracketFallback.ts",
      "line": 8,
      "content": "console.log('🛠️ Starting fallback bracket generation for tournament:', tournamentId);",
      "context": "6:   \n7:   try {\n8:     console.log('🛠️ Starting fallback bracket generation for tournament:', tournamentId);\n9:     \n10:     // 1. Get confirmed participants"
    },
    {
      "file": "src/utils/bracketFallback.ts",
      "line": 25,
      "content": "console.log(`👥 Found ${registrations.length} confirmed participants`);",
      "context": "23:     }\n24:     \n25:     console.log(`👥 Found ${registrations.length} confirmed participants`);\n26:     \n27:     // 2. Get profiles for seeding"
    },
    {
      "file": "src/utils/bracketFallback.ts",
      "line": 54,
      "content": "console.log('🏆 Sorted by ELO rating');",
      "context": "52:       case 'elo_based':\n53:         sortedParticipants = participants.sort((a, b) => (b.elo || 1000) - (a.elo || 1000));\n54:         console.log('🏆 Sorted by ELO rating');\n55:         break;\n56:       case 'registration_order':"
    },
    {
      "file": "src/utils/bracketFallback.ts",
      "line": 60,
      "content": "console.log('📅 Sorted by registration order');",
      "context": "58:           new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\n59:         );\n60:         console.log('📅 Sorted by registration order');\n61:         break;\n62:       default:"
    },
    {
      "file": "src/utils/bracketFallback.ts",
      "line": 64,
      "content": "console.log('🎲 Random seeding');",
      "context": "62:       default:\n63:         sortedParticipants = participants.sort(() => Math.random() - 0.5);\n64:         console.log('🎲 Random seeding');\n65:     }\n66:     "
    },
    {
      "file": "src/utils/bracketFallback.ts",
      "line": 67,
      "content": "console.log('🔢 Seeding order:', sortedParticipants.map(p => p.full_name));",
      "context": "65:     }\n66:     \n67:     console.log('🔢 Seeding order:', sortedParticipants.map(p => p.full_name));\n68:     \n69:     // 5. Clear existing matches first"
    },
    {
      "file": "src/utils/bracketFallback.ts",
      "line": 103,
      "content": "console.log(`⚡ Generated ${matches.length} first round matches`);",
      "context": "101:     }\n102:     \n103:     console.log(`⚡ Generated ${matches.length} first round matches`);\n104:     \n105:     // 7. Insert matches into database"
    },
    {
      "file": "src/utils/challengeCleanup.ts",
      "line": 59,
      "content": "console.log('🗑️ Starting manual deep cleanup...');",
      "context": "57: export const manualDeepCleanup = async (): Promise<CleanupResult> => {\n58:   try {\n59:     console.log('🗑️ Starting manual deep cleanup...');\n60:     \n61:     const { data: result, error } = await supabase.rpc('deep_cleanup_challenges');"
    },
    {
      "file": "src/utils/challengeCleanup.ts",
      "line": 109,
      "content": "console.log(`🔍 Found ${expiredChallenges?.length || 0} expired challenges:`, expiredChallenges);",
      "context": "107:     }\n108:     \n109:     console.log(`🔍 Found ${expiredChallenges?.length || 0} expired challenges:`, expiredChallenges);\n110:     return expiredChallenges || [];\n111:     "
    },
    {
      "file": "src/utils/challengeValidation.ts",
      "line": 160,
      "content": "console.log('Raw data:', data);",
      "context": "158:   if (process.env.NODE_ENV === 'development') {\n159:     console.group(`🔍 [${componentName}] Debug Data`);\n160:     console.log('Raw data:', data);\n161:     \n162:     if (data.challenge) {"
    },
    {
      "file": "src/utils/challengeValidation.ts",
      "line": 163,
      "content": "console.log('Challenge valid:', isValidChallenge(data.challenge));",
      "context": "161:     \n162:     if (data.challenge) {\n163:       console.log('Challenge valid:', isValidChallenge(data.challenge));\n164:       console.log('Challenge title:', safeChallengeAccess.getTitle(data.challenge));\n165:       console.log('Challenge status:', safeChallengeAccess.getStatus(data.challenge));"
    },
    {
      "file": "src/utils/challengeValidation.ts",
      "line": 164,
      "content": "console.log('Challenge title:', safeChallengeAccess.getTitle(data.challenge));",
      "context": "162:     if (data.challenge) {\n163:       console.log('Challenge valid:', isValidChallenge(data.challenge));\n164:       console.log('Challenge title:', safeChallengeAccess.getTitle(data.challenge));\n165:       console.log('Challenge status:', safeChallengeAccess.getStatus(data.challenge));\n166:     }"
    },
    {
      "file": "src/utils/challengeValidation.ts",
      "line": 165,
      "content": "console.log('Challenge status:', safeChallengeAccess.getStatus(data.challenge));",
      "context": "163:       console.log('Challenge valid:', isValidChallenge(data.challenge));\n164:       console.log('Challenge title:', safeChallengeAccess.getTitle(data.challenge));\n165:       console.log('Challenge status:', safeChallengeAccess.getStatus(data.challenge));\n166:     }\n167:     "
    },
    {
      "file": "src/utils/challengeValidation.ts",
      "line": 169,
      "content": "console.log('Challenges count:', data.challenges?.length || 0);",
      "context": "167:     \n168:     if (data.challenges) {\n169:       console.log('Challenges count:', data.challenges?.length || 0);\n170:       console.log('Valid challenges:', data.challenges?.filter(isValidChallenge).length || 0);\n171:     }"
    },
    {
      "file": "src/utils/challengeValidation.ts",
      "line": 170,
      "content": "console.log('Valid challenges:', data.challenges?.filter(isValidChallenge).length || 0);",
      "context": "168:     if (data.challenges) {\n169:       console.log('Challenges count:', data.challenges?.length || 0);\n170:       console.log('Valid challenges:', data.challenges?.filter(isValidChallenge).length || 0);\n171:     }\n172:     "
    },
    {
      "file": "src/utils/clubNotifications.ts",
      "line": 30,
      "content": "console.log('Club notification data:', notificationData);",
      "context": "28:     };\n29: \n30:     console.log('Club notification data:', notificationData);\n31: \n32:     // For now, we'll just log the notification"
    },
    {
      "file": "src/utils/clubNotifications.ts",
      "line": 37,
      "content": "console.log('Mock: Club notified for booking', booking.id);",
      "context": "35: \n36:     // Mock notification - in a real app, this would update the booking status\n37:     console.log('Mock: Club notified for booking', booking.id);\n38: \n39:     return { success: true };"
    },
    {
      "file": "src/utils/databaseSchemaValidator.ts",
      "line": 272,
      "content": "console.warn(`Table '${table}' not found in schema definitions`);",
      "context": "270:     SCHEMA_DEFINITIONS[table as keyof typeof SCHEMA_DEFINITIONS];\n271:   if (!tableSchema) {\n272:     console.warn(`Table '${table}' not found in schema definitions`);\n273:     return false;\n274:   }"
    },
    {
      "file": "src/utils/databaseSchemaValidator.ts",
      "line": 297,
      "content": "console.warn(`Table '${table}' not found in schema definitions`);",
      "context": "295:     SCHEMA_DEFINITIONS[table as keyof typeof SCHEMA_DEFINITIONS];\n296:   if (!tableSchema) {\n297:     console.warn(`Table '${table}' not found in schema definitions`);\n298:     return false;\n299:   }"
    },
    {
      "file": "src/utils/databaseSchemaValidator.ts",
      "line": 345,
      "content": "console.log(`Available columns:`, getTableColumns(table));",
      "context": "343:     `Attempted to use column '${attemptedColumn}' on table '${table}'`\n344:   );\n345:   console.log(`Available columns:`, getTableColumns(table));\n346:   if (suggestedColumns?.length) {\n347:     console.log(`Suggested alternatives:`, suggestedColumns);"
    },
    {
      "file": "src/utils/databaseSchemaValidator.ts",
      "line": 347,
      "content": "console.log(`Suggested alternatives:`, suggestedColumns);",
      "context": "345:   console.log(`Available columns:`, getTableColumns(table));\n346:   if (suggestedColumns?.length) {\n347:     console.log(`Suggested alternatives:`, suggestedColumns);\n348:   }\n349:   console.groupEnd();"
    },
    {
      "file": "src/utils/databaseSchemaValidator.ts",
      "line": 357,
      "content": "console.log('🔍 Schema Validation Active');",
      "context": "355: export function validateSchemaUsage() {\n356:   if (process.env.NODE_ENV === 'development') {\n357:     console.log('🔍 Schema Validation Active');\n358:     console.log('Available tables:', Object.keys(SCHEMA_DEFINITIONS));\n359:   }"
    },
    {
      "file": "src/utils/databaseSchemaValidator.ts",
      "line": 358,
      "content": "console.log('Available tables:', Object.keys(SCHEMA_DEFINITIONS));",
      "context": "356:   if (process.env.NODE_ENV === 'development') {\n357:     console.log('🔍 Schema Validation Active');\n358:     console.log('Available tables:', Object.keys(SCHEMA_DEFINITIONS));\n359:   }\n360: }"
    },
    {
      "file": "src/utils/debugTournamentRefresh.ts",
      "line": 31,
      "content": "console.log(",
      "context": "29: if (typeof window !== 'undefined') {\n30:   (window as any).debugTournamentRefresh = debugTournamentRefresh;\n31:   console.log(\n32:     '🔧 Debug utility loaded. Call debugTournamentRefresh() to force refresh.'\n33:   );"
    },
    {
      "file": "src/utils/debugTournamentRefresh.ts",
      "line": 54,
      "content": "console.log('❌ No tournaments found');",
      "context": "52: \n53:     if (!tournaments || tournaments.length === 0) {\n54:       console.log('❌ No tournaments found');\n55:       return;\n56:     }"
    },
    {
      "file": "src/utils/debugTournamentRefresh.ts",
      "line": 59,
      "content": "console.log('🏆 Current tournament:', tournaments[0].name, tournamentId);",
      "context": "57: \n58:     const tournamentId = tournaments[0].id;\n59:     console.log('🏆 Current tournament:', tournaments[0].name, tournamentId);\n60: \n61:     // Get all matches"
    },
    {
      "file": "src/utils/debugTournamentRefresh.ts",
      "line": 69,
      "content": "console.log('📊 Tournament matches state:');",
      "context": "67:       .order('match_number');\n68: \n69:     console.log('📊 Tournament matches state:');\n70:     console.table(\n71:       matches?.map(m => ({"
    },
    {
      "file": "src/utils/debugTournamentRefresh.ts",
      "line": 89,
      "content": "console.log(",
      "context": "87: if (typeof window !== 'undefined') {\n88:   (window as any).logTournamentState = logTournamentState;\n89:   console.log(\n90:     '🔧 Debug utility: Call logTournamentState() to see current tournament state.'\n91:   );"
    },
    {
      "file": "src/utils/migrationStartup.ts",
      "line": 3,
      "content": "console.log('Migration system initialized');",
      "context": "1: // Simplified migration startup utilities\n2: export const initializeMigrationSystem = async (): Promise<boolean> => {\n3:   console.log('Migration system initialized');\n4:   return true;\n5: };"
    },
    {
      "file": "src/utils/migrationStartup.ts",
      "line": 12,
      "content": "console.log('Manual migration triggered');",
      "context": "10: \n11: export const triggerManualMigration = async (): Promise<boolean> => {\n12:   console.log('Manual migration triggered');\n13:   return true;\n14: };"
    },
    {
      "file": "src/utils/performance.ts",
      "line": 11,
      "content": "console.log(`${name} took ${end - start} milliseconds`);",
      "context": "9:     fn();\n10:     const end = performance.now();\n11:     console.log(`${name} took ${end - start} milliseconds`);\n12:   },\n13: "
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 4,
      "content": "console.log('🔍 Bắt đầu kiểm tra database...');",
      "context": "2: \n3: export const quickDatabaseCheck = async () => {\n4:   console.log('🔍 Bắt đầu kiểm tra database...');\n5: \n6:   const results = {"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 16,
      "content": "console.log('📡 Kiểm tra kết nối...');",
      "context": "14:   try {\n15:     // 1. Kiểm tra kết nối cơ bản\n16:     console.log('📡 Kiểm tra kết nối...');\n17:     const { data: connectionTest, error: connectionError } = await supabase\n18:       .from('profiles')"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 31,
      "content": "console.log('📋 Kiểm tra các bảng...');",
      "context": "29: \n30:     // 2. Sử dụng danh sách bảng mặc định\n31:     console.log('📋 Kiểm tra các bảng...');\n32:     const importantTables = [\n33:       'profiles',"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 41,
      "content": "console.log(",
      "context": "39:     ];\n40:     results.tables = importantTables;\n41:     console.log(\n42:       `✅ Sử dụng danh sách bảng mặc định: ${importantTables.length} bảng`\n43:     );"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 46,
      "content": "console.log('👥 Kiểm tra dữ liệu users...');",
      "context": "44: \n45:     // 3. Kiểm tra dữ liệu trong profiles\n46:     console.log('👥 Kiểm tra dữ liệu users...');\n47:     const { data: profiles, error: profilesError } = await supabase\n48:       .from('profiles')"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 57,
      "content": "console.log('📝 Users mẫu:', profiles.slice(0, 3));",
      "context": "55:       console.log(`✅ Tìm thấy ${profiles.length} users`);\n56:       if (profiles.length > 0) {\n57:         console.log('📝 Users mẫu:', profiles.slice(0, 3));\n58:       }\n59:     } else {"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 65,
      "content": "console.log('🔍 Kiểm tra các bảng quan trọng...');",
      "context": "63: \n64:     // 4. Kiểm tra các bảng quan trọng khác\n65:     console.log('🔍 Kiểm tra các bảng quan trọng...');\n66: \n67:     for (const table of importantTables) {"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 78,
      "content": "console.log(",
      "context": "76:           console.log(`✅ Bảng ${table}: ${data.length} records`);\n77:         } else {\n78:           console.log(\n79:             `⚠️ Bảng ${table}: ${error?.message || 'Không có dữ liệu'}`\n80:           );"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 88,
      "content": "console.log('🔐 Kiểm tra authentication...');",
      "context": "86: \n87:     // 5. Kiểm tra authentication\n88:     console.log('🔐 Kiểm tra authentication...');\n89:     const {\n90:       data: { user },"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 97,
      "content": "console.log(",
      "context": "95:       console.log('⚠️ Authentication check:', authError.message);\n96:     } else {\n97:       console.log(\n98:         `✅ Authentication: ${user ? 'Đã đăng nhập' : 'Chưa đăng nhập'}`\n99:       );"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 103,
      "content": "console.log('\\n📊 TÓM TẮT KIỂM TRA DATABASE:');",
      "context": "101: \n102:     // 6. Tóm tắt kết quả\n103:     console.log('\\n📊 TÓM TẮT KIỂM TRA DATABASE:');\n104:     console.log('================================');\n105:     console.log("
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 104,
      "content": "console.log('================================');",
      "context": "102:     // 6. Tóm tắt kết quả\n103:     console.log('\\n📊 TÓM TẮT KIỂM TRA DATABASE:');\n104:     console.log('================================');\n105:     console.log(\n106:       `🔗 Kết nối: ${results.connection ? '✅ Thành công' : '❌ Thất bại'}`"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 105,
      "content": "console.log(",
      "context": "103:     console.log('\\n📊 TÓM TẮT KIỂM TRA DATABASE:');\n104:     console.log('================================');\n105:     console.log(\n106:       `🔗 Kết nối: ${results.connection ? '✅ Thành công' : '❌ Thất bại'}`\n107:     );"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 108,
      "content": "console.log(`📋 Số bảng: ${results.tables.length}`);",
      "context": "106:       `🔗 Kết nối: ${results.connection ? '✅ Thành công' : '❌ Thất bại'}`\n107:     );\n108:     console.log(`📋 Số bảng: ${results.tables.length}`);\n109:     console.log(`👥 Số users: ${results.userCount}`);\n110:     console.log(`📊 Có dữ liệu: ${results.hasData ? '✅ Có' : '❌ Không'}`);"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 109,
      "content": "console.log(`👥 Số users: ${results.userCount}`);",
      "context": "107:     );\n108:     console.log(`📋 Số bảng: ${results.tables.length}`);\n109:     console.log(`👥 Số users: ${results.userCount}`);\n110:     console.log(`📊 Có dữ liệu: ${results.hasData ? '✅ Có' : '❌ Không'}`);\n111: "
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 113,
      "content": "console.log('\\n❌ LỖI PHÁT HIỆN:');",
      "context": "111: \n112:     if (results.errors.length > 0) {\n113:       console.log('\\n❌ LỖI PHÁT HIỆN:');\n114:       results.errors.forEach(error => console.log(`  - ${error}`));\n115:     }"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 118,
      "content": "console.log('\\n💡 KHUYẾN NGHỊ:');",
      "context": "116: \n117:     // 7. Đưa ra khuyến nghị\n118:     console.log('\\n💡 KHUYẾN NGHỊ:');\n119:     if (!results.connection) {\n120:       console.log("
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 120,
      "content": "console.log(",
      "context": "118:     console.log('\\n💡 KHUYẾN NGHỊ:');\n119:     if (!results.connection) {\n120:       console.log(\n121:         '  - ❌ Database không thể kết nối. Cần kiểm tra lại cấu hình.'\n122:       );"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 124,
      "content": "console.log(",
      "context": "122:       );\n123:     } else if (results.hasData) {\n124:       console.log(\n125:         '  - ✅ Database có dữ liệu. Có thể sử dụng database hiện tại.'\n126:       );"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 127,
      "content": "console.log('  - ⚠️ Hãy backup trước khi thay đổi.');",
      "context": "125:         '  - ✅ Database có dữ liệu. Có thể sử dụng database hiện tại.'\n126:       );\n127:       console.log('  - ⚠️ Hãy backup trước khi thay đổi.');\n128:     } else {\n129:       console.log('  - 🆕 Database trống. Có thể sử dụng hoặc tạo mới.');"
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 129,
      "content": "console.log('  - 🆕 Database trống. Có thể sử dụng hoặc tạo mới.');",
      "context": "127:       console.log('  - ⚠️ Hãy backup trước khi thay đổi.');\n128:     } else {\n129:       console.log('  - 🆕 Database trống. Có thể sử dụng hoặc tạo mới.');\n130:     }\n131: "
    },
    {
      "file": "src/utils/quickDatabaseCheck.ts",
      "line": 142,
      "content": "console.log('🚀 Chạy kiểm tra database nhanh...');",
      "context": "140: // Hàm kiểm tra nhanh từ console\n141: export const runQuickCheck = () => {\n142:   console.log('🚀 Chạy kiểm tra database nhanh...');\n143:   quickDatabaseCheck()\n144:     .then(results => {"
    },
    {
      "file": "src/utils/relationshipAutoFix.ts",
      "line": 224,
      "content": "console.log('🔧 Applying fixes...');",
      "context": "222: \n223:     // In real implementation, this would write files to disk\n224:     console.log('🔧 Applying fixes...');\n225: \n226:     report.results.forEach(result => {"
    },
    {
      "file": "src/utils/relationshipAutoFix.ts",
      "line": 231,
      "content": "console.log(`🎉 Successfully fixed ${report.filesFixed} files!`);",
      "context": "229:     });\n230: \n231:     console.log(`🎉 Successfully fixed ${report.filesFixed} files!`);\n232: \n233:     resolve(report);"
    },
    {
      "file": "src/utils/relationshipAutoFix.ts",
      "line": 241,
      "content": "console.log('🔧 Starting auto-fix process...');",
      "context": "239:  */\n240: export async function runAutoFix(preview: boolean = false) {\n241:   console.log('🔧 Starting auto-fix process...');\n242: \n243:   // Mock files - in real implementation would scan project"
    },
    {
      "file": "src/utils/relationshipAutoFix.ts",
      "line": 250,
      "content": "console.log(previewText);",
      "context": "248:   if (preview) {\n249:     const previewText = previewFixes(mockFiles);\n250:     console.log(previewText);\n251:   } else {\n252:     const report = await applyFixes(mockFiles);"
    },
    {
      "file": "src/utils/relationshipAutoFix.ts",
      "line": 257,
      "content": "console.log('❌ Auto-fix failed.');",
      "context": "255:       console.log('✅ Auto-fix completed successfully!');\n256:     } else {\n257:       console.log('❌ Auto-fix failed.');\n258:       process.exit(1);\n259:     }"
    },
    {
      "file": "src/utils/relationshipMapper.ts",
      "line": 179,
      "content": "console.warn(",
      "context": "177: \n178:   if (!mapping) {\n179:     console.warn(\n180:       `No standard relationship mapping found for ${table}.${foreignKey}`\n181:     );"
    },
    {
      "file": "src/utils/relationshipValidator.ts",
      "line": 202,
      "content": "console.log('🔍 Starting relationship validation...');",
      "context": "200:  */\n201: export function runValidation() {\n202:   console.log('🔍 Starting relationship validation...');\n203: \n204:   // Trong thực tế, đây sẽ scan tất cả files trong project"
    },
    {
      "file": "src/utils/relationshipValidator.ts",
      "line": 217,
      "content": "console.log(reportText);",
      "context": "215:   const reportText = generateReport(report);\n216: \n217:   console.log(reportText);\n218: \n219:   // Exit with error code if có issues"
    },
    {
      "file": "src/utils/seasonUtils.ts",
      "line": 3,
      "content": "console.log('Season reset');",
      "context": "1: // Simplified season utilities\n2: export const resetSeason = async () => {\n3:   console.log('Season reset');\n4:   return { success: true };\n5: };"
    },
    {
      "file": "src/utils/supabaseHealth.ts",
      "line": 11,
      "content": "// console.log('Testing Supabase connection...');",
      "context": "9: export const checkSupabaseConnection = async (): Promise<HealthCheckResult> => {\n10:   try {\n11:     // console.log('Testing Supabase connection...');\n12:     const { data, error } = await supabase\n13:       .from('profiles')"
    },
    {
      "file": "src/utils/tournamentRewards.ts",
      "line": 29,
      "content": "// console.log('🔍 calculateRewardsFromTiers input:', {",
      "context": "27:   prizeTiers?: any[]\n28: ): Promise<TournamentRewardsCalculation> => {\n29:   // console.log('🔍 calculateRewardsFromTiers input:', {\n30:   //   tournament_id: tournament?.id,\n31:   //   prize_pool: tournament?.prize_pool,"
    },
    {
      "file": "src/utils/tournamentRewards.ts",
      "line": 71,
      "content": "console.log('🔍 calculateRewards (fallback) input:', {",
      "context": "69:   playerRank: RankCode = 'K'\n70: ): TournamentRewardsCalculation => {\n71:   console.log('🔍 calculateRewards (fallback) input:', {\n72:     tournament_id: tournament?.id,\n73:     prize_pool: tournament?.prize_pool,"
    },
    {
      "file": "src/utils/tournamentRewards.ts",
      "line": 87,
      "content": "console.log(",
      "context": "85:   } else if (tournament.entry_fee && tournament.max_participants) {\n86:     totalPrize = tournament.entry_fee * tournament.max_participants * 0.75; // ✅ FIXED: Use 75% as fallback calculation\n87:     console.log(\n88:       '✅ [calculateRewards] Calculated from entry_fee (75%):',\n89:       totalPrize"
    },
    {
      "file": "src/utils/tournamentRewards.ts",
      "line": 93,
      "content": "console.log('🎯 Final totalPrize used:', totalPrize);",
      "context": "91:   }\n92: \n93:   console.log('🎯 Final totalPrize used:', totalPrize);\n94: \n95:   // Default ELO points based on position"
    },
    {
      "file": "src/utils/tournamentRewards.ts",
      "line": 307,
      "content": "console.log('calculateRewards result:', result);",
      "context": "305:   };\n306: \n307:   console.log('calculateRewards result:', result);\n308:   return result;\n309: };"
    },
    {
      "file": "src/utils/tournamentTestFlow.ts",
      "line": 3,
      "content": "console.log('Test tournament flow created');",
      "context": "1: // Simplified tournament test flow\n2: export const createTestTournamentFlow = async () => {\n3:   console.log('Test tournament flow created');\n4:   return { success: true };\n5: };"
    },
    {
      "file": "src/utils/translationScanner.ts",
      "line": 209,
      "content": "console.log('🔍 Scanning codebase for missing translations...');",
      "context": "207: export const useTranslationScanner = () => {\n208:   const scanAndTranslate = async () => {\n209:     console.log('🔍 Scanning codebase for missing translations...');\n210: \n211:     const result = await translationScanner.scanCodebase();"
    },
    {
      "file": "src/utils/translationScanner.ts",
      "line": 212,
      "content": "console.log(",
      "context": "210: \n211:     const result = await translationScanner.scanCodebase();\n212:     console.log(\n213:       `📊 Scan results: ${result.totalTexts} texts found in ${result.totalFiles} files`\n214:     );"
    },
    {
      "file": "src/utils/translationScanner.ts",
      "line": 217,
      "content": "console.log('🚀 Generating translation tasks...');",
      "context": "215: \n216:     if (result.missingKeys.length > 0) {\n217:       console.log('🚀 Generating translation tasks...');\n218:       await translationScanner.generateTranslationTasks();\n219:       console.log("
    },
    {
      "file": "src/utils/translationScanner.ts",
      "line": 219,
      "content": "console.log(",
      "context": "217:       console.log('🚀 Generating translation tasks...');\n218:       await translationScanner.generateTranslationTasks();\n219:       console.log(\n220:         `✅ Created translation tasks for ${result.missingKeys.length} missing translations`\n221:       );"
    }
  ]
}