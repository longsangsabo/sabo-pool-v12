// =====================================================
// üèÜ CHALLENGE NOTIFICATION EVENT HANDLERS
// =====================================================

// Removed supabase import - migrated to services
import { challengeNotificationService } from '@/services/challengeNotificationService';
import {
  ChallengeNotificationType,
  CreateNotificationData,
  NotificationMetadata,
  ChallengeCreatedPayload,
  ChallengeStatusChangedPayload,
  MatchResultPayload
} from '@/types/challengeNotification';
import { toast } from 'sonner';

// ===== NOTIFICATION TEMPLATES =====

interface NotificationTemplate {
  title: string;
  message: string;
  icon: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  actionText?: string;
  actionUrl?: string;
}

const createNotificationTemplate = (
  type: ChallengeNotificationType,
  data: any
): NotificationTemplate => {
  const templates: Record<ChallengeNotificationType, (data: any) => NotificationTemplate> = {
    [ChallengeNotificationType.CHALLENGE_CREATED]: (data) => ({
      title: 'üèÜ Th√°ch ƒë·∫•u ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
      message: `B·∫°n ƒë√£ t·∫°o th√°ch ƒë·∫•u v·ªõi ${data.opponentName || 'ƒë·ªëi th·ªß'}`,
      icon: 'trophy',
      priority: 'medium'
    }),

    [ChallengeNotificationType.CHALLENGE_RECEIVED]: (data) => ({
      title: '‚öîÔ∏è C√≥ th√°ch ƒë·∫•u m·ªõi!',
      message: `${data.challengerName} ƒë√£ th√°ch ƒë·∫•u b·∫°n`,
      icon: 'sword',
      priority: 'high',
      actionText: 'Xem chi ti·∫øt',
      actionUrl: `/challenges/${data.challengeId}`
    }),

    [ChallengeNotificationType.CHALLENGE_ACCEPTED]: (data) => ({
      title: '‚úÖ Th√°ch ƒë·∫•u ƒë∆∞·ª£c ch·∫•p nh·∫≠n',
      message: `${data.opponentName} ƒë√£ ch·∫•p nh·∫≠n th√°ch ƒë·∫•u c·ªßa b·∫°n`,
      icon: 'check-circle',
      priority: 'high',
      actionText: 'Xem tr·∫≠n ƒë·∫•u',
      actionUrl: `/challenges/${data.challengeId}`
    }),

    [ChallengeNotificationType.CHALLENGE_DECLINED]: (data) => ({
      title: '‚ùå Th√°ch ƒë·∫•u b·ªã t·ª´ ch·ªëi',
      message: `${data.opponentName} ƒë√£ t·ª´ ch·ªëi th√°ch ƒë·∫•u c·ªßa b·∫°n`,
      icon: 'x-circle',
      priority: 'medium'
    }),

    [ChallengeNotificationType.SCHEDULE_CONFIRMED]: (data) => ({
      title: 'üìÖ L·ªãch thi ƒë·∫•u ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n',
      message: `Tr·∫≠n ƒë·∫•u s·∫Ω di·ªÖn ra v√†o ${data.matchTime}`,
      icon: 'calendar',
      priority: 'high',
      actionText: 'Xem chi ti·∫øt',
      actionUrl: `/challenges/${data.challengeId}`
    }),

    [ChallengeNotificationType.MATCH_REMINDER_24H]: (data) => ({
      title: '‚è∞ Nh·∫Øc nh·ªü tr·∫≠n ƒë·∫•u',
      message: `Tr·∫≠n ƒë·∫•u v·ªõi ${data.opponentName} s·∫Ω b·∫Øt ƒë·∫ßu trong 24 gi·ªù`,
      icon: 'clock',
      priority: 'medium',
      actionText: 'Chu·∫©n b·ªã',
      actionUrl: `/challenges/${data.challengeId}/prepare`
    }),

    [ChallengeNotificationType.MATCH_REMINDER_1H]: (data) => ({
      title: '‚è∞ S·∫Øp ƒë·∫øn gi·ªù thi ƒë·∫•u',
      message: `Tr·∫≠n ƒë·∫•u v·ªõi ${data.opponentName} s·∫Ω b·∫Øt ƒë·∫ßu trong 1 gi·ªù`,
      icon: 'clock',
      priority: 'high',
      actionText: 'Check-in ngay',
      actionUrl: `/challenges/${data.challengeId}/checkin`
    }),

    [ChallengeNotificationType.MATCH_REMINDER_15M]: (data) => ({
      title: 'üö® Tr·∫≠n ƒë·∫•u s·∫Øp b·∫Øt ƒë·∫ßu',
      message: `Tr·∫≠n ƒë·∫•u v·ªõi ${data.opponentName} s·∫Ω b·∫Øt ƒë·∫ßu trong 15 ph√∫t!`,
      icon: 'alert-circle',
      priority: 'urgent',
      actionText: 'V√†o tr·∫≠n ƒë·∫•u',
      actionUrl: `/challenges/${data.challengeId}/live`
    }),

    [ChallengeNotificationType.CHECK_IN_REQUIRED]: (data) => ({
      title: 'üìç C·∫ßn check-in',
      message: 'Vui l√≤ng check-in tr∆∞·ªõc khi tr·∫≠n ƒë·∫•u b·∫Øt ƒë·∫ßu',
      icon: 'target',
      priority: 'high',
      actionText: 'Check-in',
      actionUrl: `/challenges/${data.challengeId}/checkin`
    }),

    [ChallengeNotificationType.OPPONENT_CHECKED_IN]: (data) => ({
      title: '‚úÖ ƒê·ªëi th·ªß ƒë√£ check-in',
      message: `${data.opponentName} ƒë√£ check-in v√† s·∫µn s√†ng thi ƒë·∫•u`,
      icon: 'users',
      priority: 'medium'
    }),

    [ChallengeNotificationType.MATCH_STARTED]: (data) => ({
      title: 'üöÄ Tr·∫≠n ƒë·∫•u b·∫Øt ƒë·∫ßu',
      message: `Tr·∫≠n ƒë·∫•u v·ªõi ${data.opponentName} ƒë√£ ch√≠nh th·ª©c b·∫Øt ƒë·∫ßu!`,
      icon: 'zap',
      priority: 'high',
      actionText: 'V√†o tr·∫≠n ƒë·∫•u',
      actionUrl: `/challenges/${data.challengeId}/live`
    }),

    [ChallengeNotificationType.SCORE_UPDATED]: (data) => ({
      title: 'üìä C·∫≠p nh·∫≠t t·ª∑ s·ªë',
      message: `T·ª∑ s·ªë hi·ªán t·∫°i: ${data.challengerScore} - ${data.opponentScore}`,
      icon: 'trending-up',
      priority: 'medium'
    }),

    [ChallengeNotificationType.DISPUTE_RAISED]: (data) => ({
      title: '‚ö†Ô∏è C√≥ khi·∫øu n·∫°i',
      message: `${data.playerName} ƒë√£ khi·∫øu n·∫°i k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u`,
      icon: 'alert-circle',
      priority: 'high',
      actionText: 'Xem chi ti·∫øt',
      actionUrl: `/challenges/${data.challengeId}/dispute`
    }),

    [ChallengeNotificationType.RESULT_SUBMITTED]: (data) => ({
      title: 'üìù K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c g·ª≠i',
      message: `${data.submitterName} ƒë√£ g·ª≠i k·∫øt qu·∫£: ${data.challengerScore} - ${data.opponentScore}`,
      icon: 'info',
      priority: 'medium',
      actionText: 'X√°c nh·∫≠n',
      actionUrl: `/challenges/${data.challengeId}/confirm`
    }),

    [ChallengeNotificationType.RESULT_CONFIRMED]: (data) => ({
      title: '‚úÖ K·∫øt qu·∫£ ƒë∆∞·ª£c x√°c nh·∫≠n',
      message: data.isWinner ? 'üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ th·∫Øng!' : 'Tr·∫≠n ƒë·∫•u ƒë√£ k·∫øt th√∫c',
      icon: data.isWinner ? 'crown' : 'check-circle',
      priority: 'high'
    }),

    [ChallengeNotificationType.CLUB_REVIEW_PENDING]: (data) => ({
      title: 'üè¢ Ch·ªù CLB duy·ªát',
      message: 'CLB ƒëang xem x√©t v√† ph√™ duy·ªát k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u',
      icon: 'shield',
      priority: 'medium'
    }),

    [ChallengeNotificationType.CLUB_APPROVED]: (data) => ({
      title: 'üè¢ CLB ƒë√£ ph√™ duy·ªát',
      message: `CLB ${data.clubName} ƒë√£ ph√™ duy·ªát k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u`,
      icon: 'check-circle',
      priority: 'high'
    }),

    [ChallengeNotificationType.SPA_POINTS_AWARDED]: (data) => ({
      title: 'üéÅ Nh·∫≠n SPA Points',
      message: `B·∫°n ƒë√£ nh·∫≠n ${data.spaPoints} SPA Points t·ª´ tr·∫≠n th·∫Øng!`,
      icon: 'gift',
      priority: 'medium',
      actionText: 'Xem v√≠',
      actionUrl: '/wallet'
    }),

    [ChallengeNotificationType.ELO_UPDATED]: (data) => ({
      title: 'üìà ELO Rating c·∫≠p nh·∫≠t',
      message: `ELO c·ªßa b·∫°n ${data.eloChange > 0 ? 'tƒÉng' : 'gi·∫£m'} ${Math.abs(data.eloChange)} ƒëi·ªÉm (${data.newElo})`,
      icon: data.eloChange > 0 ? 'trending-up' : 'trending-down',
      priority: 'medium'
    }),

    [ChallengeNotificationType.ACHIEVEMENT_UNLOCKED]: (data) => ({
      title: 'üèÜ M·ªü kh√≥a th√†nh t·ª±u',
      message: `B·∫°n ƒë√£ m·ªü kh√≥a th√†nh t·ª±u: ${data.achievementName}`,
      icon: 'award',
      priority: 'high',
      actionText: 'Xem th√†nh t·ª±u',
      actionUrl: '/profile/achievements'
    }),

    [ChallengeNotificationType.REMATCH_REQUESTED]: (data) => ({
      title: 'üîÑ Y√™u c·∫ßu t√°i ƒë·∫•u',
      message: `${data.opponentName} mu·ªën t√°i ƒë·∫•u v·ªõi b·∫°n`,
      icon: 'sword',
      priority: 'medium',
      actionText: 'Xem y√™u c·∫ßu',
      actionUrl: `/challenges/${data.challengeId}/rematch`
    }),

    [ChallengeNotificationType.MATCH_SHARED]: (data) => ({
      title: 'üì± Tr·∫≠n ƒë·∫•u ƒë∆∞·ª£c chia s·∫ª',
      message: `${data.playerName} ƒë√£ chia s·∫ª tr·∫≠n ƒë·∫•u l√™n m·∫°ng x√£ h·ªôi`,
      icon: 'heart',
      priority: 'low'
    }),

    [ChallengeNotificationType.REVIEW_RECEIVED]: (data) => ({
      title: '‚≠ê Nh·∫≠n ƒë√°nh gi√°',
      message: `${data.reviewerName} ƒë√£ ƒë√°nh gi√° ${data.rating} sao cho b·∫°n`,
      icon: 'star',
      priority: 'medium'
    }),

    [ChallengeNotificationType.TIMEOUT_CALLED]: (data) => ({
      title: '‚è∏Ô∏è Timeout ƒë∆∞·ª£c g·ªçi',
      message: `${data.playerName} ƒë√£ g·ªçi timeout trong tr·∫≠n ƒë·∫•u`,
      icon: 'clock',
      priority: 'medium'
    }),

    [ChallengeNotificationType.RESULT_DISPUTED]: (data) => ({
      title: '‚ö†Ô∏è K·∫øt qu·∫£ b·ªã khi·∫øu n·∫°i',
      message: `${data.disputerName} kh√¥ng ƒë·ªìng √Ω v·ªõi k·∫øt qu·∫£ tr·∫≠n ƒë·∫•u`,
      icon: 'alert-circle',
      priority: 'high',
      actionText: 'Xem khi·∫øu n·∫°i',
      actionUrl: `/challenges/${data.challengeId}/dispute`
    })
  };

  return templates[type]?.(data) || {
    title: 'Th√¥ng b√°o th√°ch ƒë·∫•u',
    message: 'C√≥ ho·∫°t ƒë·ªông m·ªõi trong th√°ch ƒë·∫•u c·ªßa b·∫°n',
    icon: 'bell',
    priority: 'medium'
  };
};

// ===== EVENT HANDLER CLASS =====

export class ChallengeNotificationEventHandler {
  private static instance: ChallengeNotificationEventHandler;

  static getInstance(): ChallengeNotificationEventHandler {
    if (!ChallengeNotificationEventHandler.instance) {
      ChallengeNotificationEventHandler.instance = new ChallengeNotificationEventHandler();
    }
    return ChallengeNotificationEventHandler.instance;
  }

  // ===== CHALLENGE LIFECYCLE EVENTS =====

  /**
   * Handle challenge created event
   */
  async handleChallengeCreated(payload: ChallengeCreatedPayload): Promise<void> {
    console.log('üîî Handling challenge created:', payload);

    try {
      // Notify challenger
      const challengerTemplate = createNotificationTemplate(
        ChallengeNotificationType.CHALLENGE_CREATED,
        {
          challengeId: payload.challenge.id,
          opponentName: payload.opponent?.name || 'Ch·ªù ƒë·ªëi th·ªß'
        }
      );

      await this.createAndSendNotification({
        type: ChallengeNotificationType.CHALLENGE_CREATED,
        challengeId: payload.challenge.id,
        userId: payload.challenger.id,
        ...challengerTemplate,
        metadata: {
          challengerId: payload.challenger.id,
          challengerName: payload.challenger.name,
          opponentId: payload.opponent?.id,
          opponentName: payload.opponent?.name,
          gameFormat: payload.challenge.gameFormat,
          matchTime: payload.challenge.scheduledTime
        }
      });

      // Notify opponent if exists
      if (payload.opponent) {
        const opponentTemplate = createNotificationTemplate(
          ChallengeNotificationType.CHALLENGE_RECEIVED,
          {
            challengeId: payload.challenge.id,
            challengerName: payload.challenger.name
          }
        );

        await this.createAndSendNotification({
          type: ChallengeNotificationType.CHALLENGE_RECEIVED,
          challengeId: payload.challenge.id,
          userId: payload.opponent.id,
          ...opponentTemplate,
          metadata: {
            challengerId: payload.challenger.id,
            challengerName: payload.challenger.name,
            gameFormat: payload.challenge.gameFormat
          }
        });
      }
    } catch (error) {
      console.error('‚ùå Error handling challenge created:', error);
    }
  }

  /**
   * Handle challenge status change event
   */
  async handleChallengeStatusChanged(payload: ChallengeStatusChangedPayload): Promise<void> {
    console.log('üîî Handling challenge status changed:', payload);

    try {
      const { challenge, participants } = payload;

      switch (challenge.status) {
        case 'accepted':
          await this.handleChallengeAccepted(payload);
          break;
        case 'declined':
          await this.handleChallengeDeclined(payload);
          break;
        case 'scheduled':
          await this.handleChallengeScheduled(payload);
          break;
        case 'in_progress':
          await this.handleMatchStarted(payload);
          break;
        case 'completed':
          await this.handleMatchCompleted(payload);
          break;
        default:
          console.log('Unhandled status change:', challenge.status);
      }
    } catch (error) {
      console.error('‚ùå Error handling challenge status change:', error);
    }
  }

  /**
   * Handle match result submission
   */
  async handleMatchResult(payload: MatchResultPayload): Promise<void> {
    console.log('üîî Handling match result:', payload);

    try {
      // Get participant names
      const challenger = await this.getProfileName(payload.challenge.challengerId);
      const opponent = await this.getProfileName(payload.challenge.opponentId);
      const submitter = await this.getProfileName(payload.result.submittedBy);

      // Notify the other participant about result submission
      const otherParticipantId = payload.result.submittedBy === payload.challenge.challengerId 
        ? payload.challenge.opponentId 
        : payload.challenge.challengerId;

      const template = createNotificationTemplate(
        ChallengeNotificationType.RESULT_SUBMITTED,
        {
          challengeId: payload.challenge.id,
          submitterName: submitter,
          challengerScore: payload.result.challengerScore,
          opponentScore: payload.result.opponentScore
        }
      );

      await this.createAndSendNotification({
        type: ChallengeNotificationType.RESULT_SUBMITTED,
        challengeId: payload.challenge.id,
        userId: otherParticipantId,
        ...template,
        metadata: {
          challengerId: payload.challenge.challengerId,
          challengerName: challenger,
          opponentId: payload.challenge.opponentId,
          opponentName: opponent,
          challengerScore: payload.result.challengerScore,
          opponentScore: payload.result.opponentScore,
          winnerId: payload.result.winnerId,
          submittedBy: payload.result.submittedBy
        }
      });
    } catch (error) {
      console.error('‚ùå Error handling match result:', error);
    }
  }

  // ===== PRIVATE HELPER METHODS =====

  private async handleChallengeAccepted(payload: ChallengeStatusChangedPayload): Promise<void> {
    const template = createNotificationTemplate(
      ChallengeNotificationType.CHALLENGE_ACCEPTED,
      {
        challengeId: payload.challenge.id,
        opponentName: payload.participants.opponentName
      }
    );

    await this.createAndSendNotification({
      type: ChallengeNotificationType.CHALLENGE_ACCEPTED,
      challengeId: payload.challenge.id,
      userId: payload.participants.challengerId,
      ...template
    });
  }

  private async handleChallengeDeclined(payload: ChallengeStatusChangedPayload): Promise<void> {
    const template = createNotificationTemplate(
      ChallengeNotificationType.CHALLENGE_DECLINED,
      {
        challengeId: payload.challenge.id,
        opponentName: payload.participants.opponentName
      }
    );

    await this.createAndSendNotification({
      type: ChallengeNotificationType.CHALLENGE_DECLINED,
      challengeId: payload.challenge.id,
      userId: payload.participants.challengerId,
      ...template
    });
  }

  private async handleChallengeScheduled(payload: ChallengeStatusChangedPayload): Promise<void> {
    // Get challenge details to find scheduled time
//     const { data: challenge } = await supabase
      .from('challenges')
      .select('scheduled_time')
      .eq('id', payload.challenge.id)
      .single();

    if (!challenge?.scheduled_time) return;

    const matchTime = new Date(challenge.scheduled_time).toLocaleString('vi-VN');
    const template = createNotificationTemplate(
      ChallengeNotificationType.SCHEDULE_CONFIRMED,
      {
        challengeId: payload.challenge.id,
        matchTime
      }
    );

    // Notify both participants
    for (const userId of [payload.participants.challengerId, payload.participants.opponentId]) {
      await this.createAndSendNotification({
        type: ChallengeNotificationType.SCHEDULE_CONFIRMED,
        challengeId: payload.challenge.id,
        userId,
        ...template
      });
    }

    // Schedule reminder notifications
    await this.scheduleMatchReminders(payload.challenge.id, challenge.scheduled_time, [
      payload.participants.challengerId,
      payload.participants.opponentId
    ]);
  }

  private async handleMatchStarted(payload: ChallengeStatusChangedPayload): Promise<void> {
    const template = createNotificationTemplate(
      ChallengeNotificationType.MATCH_STARTED,
      { challengeId: payload.challenge.id }
    );

    // Notify both participants
    for (const userId of [payload.participants.challengerId, payload.participants.opponentId]) {
      const opponentName = userId === payload.participants.challengerId 
        ? payload.participants.opponentName 
        : payload.participants.challengerName;

      await this.createAndSendNotification({
        type: ChallengeNotificationType.MATCH_STARTED,
        challengeId: payload.challenge.id,
        userId,
        ...template,
        message: template.message.replace('{{opponentName}}', opponentName)
      });
    }
  }

  private async handleMatchCompleted(payload: ChallengeStatusChangedPayload): Promise<void> {
    // This will be handled by handleMatchResult when results are submitted
    console.log('Match completed, waiting for result submission');
  }

  private async scheduleMatchReminders(
    challengeId: string, 
    matchTime: string, 
    participantIds: string[]
  ): Promise<void> {
    const matchDate = new Date(matchTime);
    const now = new Date();

    // Schedule 24h reminder
    const reminder24h = new Date(matchDate.getTime() - 24 * 60 * 60 * 1000);
    if (reminder24h > now) {
      for (const userId of participantIds) {
        const template = createNotificationTemplate(
          ChallengeNotificationType.MATCH_REMINDER_24H,
          { challengeId }
        );

        await challengeNotificationService.scheduleNotification({
          type: ChallengeNotificationType.MATCH_REMINDER_24H,
          challengeId,
          userId,
          scheduledFor: reminder24h,
          ...template
        });
      }
    }

    // Schedule 1h reminder
    const reminder1h = new Date(matchDate.getTime() - 60 * 60 * 1000);
    if (reminder1h > now) {
      for (const userId of participantIds) {
        const template = createNotificationTemplate(
          ChallengeNotificationType.MATCH_REMINDER_1H,
          { challengeId }
        );

        await challengeNotificationService.scheduleNotification({
          type: ChallengeNotificationType.MATCH_REMINDER_1H,
          challengeId,
          userId,
          scheduledFor: reminder1h,
          ...template
        });
      }
    }

    // Schedule 15m reminder
    const reminder15m = new Date(matchDate.getTime() - 15 * 60 * 1000);
    if (reminder15m > now) {
      for (const userId of participantIds) {
        const template = createNotificationTemplate(
          ChallengeNotificationType.MATCH_REMINDER_15M,
          { challengeId }
        );

        await challengeNotificationService.scheduleNotification({
          type: ChallengeNotificationType.MATCH_REMINDER_15M,
          challengeId,
          userId,
          scheduledFor: reminder15m,
          ...template
        });
      }
    }
  }

  private async createAndSendNotification(data: CreateNotificationData): Promise<void> {
    const notification = await challengeNotificationService.createNotification(data);
    if (notification) {
      await challengeNotificationService.sendRealTimeNotification(data.userId, notification);
    }
  }

  private async getProfileName(userId: string): Promise<string> {
    try {
      // TODO: Replace with service call - const { data } = await supabase
        .from('profiles')
        .select('full_name')
        .eq('user_id', userId)
        .single();
      
      return data?.full_name || 'Unknown Player';
    } catch (error) {
      console.error('Error getting profile name:', error);
      return 'Unknown Player';
    }
  }
}

// Export singleton instance
export const challengeNotificationEventHandler = ChallengeNotificationEventHandler.getInstance();
