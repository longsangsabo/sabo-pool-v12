const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

async function checkGroupAMatches() {
  console.log('üîç Ki·ªÉm tra th·ª±c t·∫ø s·ªë tr·∫≠n trong Group A...\n');
  
  try {
    // L·∫•y t·∫•t c·∫£ matches c·ªßa Group A
    const { data: matches, error } = await supabase
      .from('sabo32_matches')
      .select('*')
      .eq('group_id', 'A')
      .order('round_number', { ascending: true })
      .order('match_number', { ascending: true });

    if (error) {
      console.error('‚ùå Error:', error);
      return;
    }

    console.log(`üìä T·ªîNG S·ªê TR·∫¨N GROUP A: ${matches.length}`);
    
    // Ph√¢n t√≠ch theo bracket_type
    const byBracketType = {};
    const byRound = {};
    
    matches.forEach(match => {
      // Group by bracket type
      if (!byBracketType[match.bracket_type]) {
        byBracketType[match.bracket_type] = [];
      }
      byBracketType[match.bracket_type].push(match);
      
      // Group by round
      if (!byRound[match.round_number]) {
        byRound[match.round_number] = [];
      }
      byRound[match.round_number].push(match);
    });

    console.log('\nüìã PH√ÇN T√çCH THEO BRACKET TYPE:');
    Object.keys(byBracketType).forEach(bracketType => {
      console.log(`  ${bracketType}: ${byBracketType[bracketType].length} tr·∫≠n`);
    });

    console.log('\nüî¢ PH√ÇN T√çCH THEO ROUND:');
    Object.keys(byRound).sort((a, b) => parseInt(a) - parseInt(b)).forEach(round => {
      console.log(`  Round ${round}: ${byRound[round].length} tr·∫≠n`);
    });

    console.log('\nüèóÔ∏è C·∫§U TR√öC L√ù THUY·∫æT (t·ª´ SABO32Structure.ts):');
    console.log('  Winners Bracket: 14 tr·∫≠n (8+4+2)');
    console.log('  Losers Branch A: 7 tr·∫≠n (4+2+1)');
    console.log('  Losers Branch B: 3 tr·∫≠n (2+1)');
    console.log('  Group Final: 1 tr·∫≠n');
    console.log('  T·ªîNG L√ù THUY·∫æT: 25 tr·∫≠n');

    console.log('\n‚ùì V·∫§N ƒê·ªÄ:');
    if (matches.length > 25) {
      console.log(`  üö® Group A c√≥ ${matches.length} tr·∫≠n thay v√¨ 25 tr·∫≠n theo thi·∫øt k·∫ø!`);
      console.log(`  üîç C√≥ th·ªÉ c√≥ duplicate ho·∫∑c logic t·∫°o tr·∫≠n b·ªã sai`);
    } else if (matches.length < 25) {
      console.log(`  üö® Group A thi·∫øu ${25 - matches.length} tr·∫≠n!`);
    } else {
      console.log(`  ‚úÖ Group A c√≥ ƒë√∫ng 25 tr·∫≠n theo thi·∫øt k·∫ø`);
    }

    // Chi ti·∫øt t·ª´ng tr·∫≠n ƒë·ªÉ debug
    console.log('\nüìù CHI TI·∫æT T·ª™NG TR·∫¨N:');
    matches.forEach(match => {
      console.log(`  ${match.sabo_match_id} | ${match.bracket_type} | Round ${match.round_number} | Match ${match.match_number} | ${match.status}`);
    });

  } catch (error) {
    console.error('‚ùå Unexpected error:', error);
  }
}

checkGroupAMatches();
