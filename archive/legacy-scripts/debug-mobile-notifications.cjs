require('dotenv').config()
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY

console.log('üîç KI·ªÇM TRA TH√îNG B√ÅO MOBILE HEADER')
console.log('===================================')

async function checkNotifications() {
  const serviceClient = createClient(supabaseUrl, supabaseServiceKey)

  try {
    console.log('\n1. üìä Ki·ªÉm tra t·ªïng s·ªë th√¥ng b√°o...')
    
    // Check notifications table
    const { data: notifications, error: notifError } = await serviceClient
      .from('notifications')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10)
    
    if (notifError) {
      console.log('‚ùå Error checking notifications:', notifError.message)
    } else {
      console.log(`‚úÖ Found ${notifications.length} recent notifications`)
      if (notifications.length > 0) {
        console.log('üìã Recent notifications:')
        notifications.forEach((notif, i) => {
          console.log(`   ${i+1}. ${notif.title} (${notif.type}) - Read: ${notif.is_read}`)
          console.log(`      User: ${notif.user_id?.substring(0,8)}... - ${notif.created_at}`)
        })
      }
    }

    console.log('\n2. üîî Ki·ªÉm tra challenge_notifications table...')
    
    // Check challenge_notifications table (legacy)
    const { data: challengeNotifs, error: challengeError } = await serviceClient
      .from('challenge_notifications')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10)
    
    if (challengeError) {
      console.log('‚ùå Error checking challenge_notifications:', challengeError.message)
    } else {
      console.log(`‚úÖ Found ${challengeNotifs.length} recent challenge notifications`)
      if (challengeNotifs.length > 0) {
        console.log('üìã Recent challenge notifications:')
        challengeNotifs.forEach((notif, i) => {
          console.log(`   ${i+1}. ${notif.title} (${notif.type}) - Read: ${notif.is_read}`)
          console.log(`      User: ${notif.user_id?.substring(0,8)}... - ${notif.created_at}`)
        })
      }
    }

    console.log('\n3. üë§ Ki·ªÉm tra th√¥ng b√°o cho user c·ª• th·ªÉ...')
    
    // Get a sample user
    const { data: users, error: userError } = await serviceClient
      .from('users')
      .select('id, username')
      .limit(3)
    
    if (!userError && users.length > 0) {
      for (const user of users) {
        console.log(`\nüîç Checking notifications for ${user.username} (${user.id?.substring(0,8)}...)`)
        
        // Check notifications for this user
        const { data: userNotifs, error } = await serviceClient
          .from('notifications')
          .select('*')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false })
          .limit(5)
        
        if (!error) {
          console.log(`   üìä Total notifications: ${userNotifs.length}`)
          console.log(`   üì¨ Unread: ${userNotifs.filter(n => !n.is_read).length}`)
          
          if (userNotifs.length > 0) {
            console.log('   üìã Recent notifications:')
            userNotifs.slice(0, 3).forEach((notif, i) => {
              console.log(`     ${i+1}. ${notif.title} - ${notif.is_read ? 'Read' : 'UNREAD'}`)
            })
          } else {
            console.log('   ‚ö†Ô∏è  No notifications found for this user')
          }
        }
      }
    }

    console.log('\n4. üîß Ki·ªÉm tra UnifiedNotificationBell component behavior...')
    console.log('üìã Components ƒë∆∞·ª£c s·ª≠ d·ª•ng:')
    console.log('   - MobileHeader.tsx uses UnifiedNotificationBell')
    console.log('   - UnifiedNotificationBell queries notifications table')
    console.log('   - ChallengeNotificationBell queries challenge_notifications table')
    
    console.log('\nüéØ PH√ÇN T√çCH V·∫§N ƒê·ªÄ:')
    console.log('====================')
    console.log('1. Mobile header s·ª≠ d·ª•ng UnifiedNotificationBell component')
    console.log('2. Component n√†y query b·∫£ng "notifications"')  
    console.log('3. N·∫øu kh√¥ng c√≥ th√¥ng b√°o n√†o, badge s·∫Ω kh√¥ng hi·ªÉn th·ªã')
    console.log('4. C√≥ th·ªÉ RLS ƒëang block vi·ªác query notifications')
    
    console.log('\nüìã KHUY·∫æN NGH·ªä:')
    console.log('===============')
    console.log('1. T·∫°o th√¥ng b√°o test ƒë·ªÉ ki·ªÉm tra')
    console.log('2. Ki·ªÉm tra RLS policies tr√™n b·∫£ng notifications')
    console.log('3. Ki·ªÉm tra auth context trong mobile header')
    console.log('4. Debug UnifiedNotificationBell component')
    
  } catch (error) {
    console.error('‚ùå Error:', error.message)
  }
}

checkNotifications()
