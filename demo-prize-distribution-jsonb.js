// Demo c√°ch s·ª≠ d·ª•ng prize_distribution JSONB thay v√¨ b·∫£ng tournament_prizes

console.log('üèÜ DEMO: prize_distribution JSONB vs tournament_prizes table');
console.log('='.repeat(70));

// 1. C·∫§U TR√öC D·ªÆ LI·ªÜU M·ªöI - JSONB trong tournaments table
console.log('\n1Ô∏è‚É£ C·∫§U TR√öC prize_distribution JSONB:');
const prizeDistributionStructure = {
  total_positions: 16,
  total_prize_amount: 2000000,
  positions: [
    {
      position: 1,
      position_name: "V√¥ ƒë·ªãch",
      cash_amount: 800000,
      elo_points: 100,
      spa_points: 50,
      physical_items: ["Cup v√†ng", "Gi·∫•y ch·ª©ng nh·∫≠n"],
      is_visible: true,
      color_theme: "#FFD700"
    },
    {
      position: 2,
      position_name: "√Å qu√¢n",
      cash_amount: 500000,
      elo_points: 80,
      spa_points: 30,
      physical_items: ["Cup b·∫°c"],
      is_visible: true,
      color_theme: "#C0C0C0"
    },
    {
      position: 3,
      position_name: "H·∫°ng 3",
      cash_amount: 300000,
      elo_points: 60,
      spa_points: 20,
      physical_items: ["Cup ƒë·ªìng"],
      is_visible: true,
      color_theme: "#CD7F32"
    }
    // ... 13 positions kh√°c
  ],
  prize_summary: {
    position_1: 800000,
    position_2: 500000,
    position_3: 300000,
    position_4: 200000,
    // ... positions kh√°c
  },
  metadata: {
    created_at: "2025-08-15T04:11:07.694942Z",
    template_type: "standard",
    auto_generated: true
  }
};

console.log(JSON.stringify(prizeDistributionStructure, null, 2));

// 2. SO S√ÅNH 2 C√ÅCH TI·∫æP C·∫¨N
console.log('\n2Ô∏è‚É£ SO S√ÅNH 2 C√ÅCH:');

console.log('\nüìã C√ÅCH C≈® - B·∫£ng tournament_prizes ri√™ng bi·ªát:');
console.log('   ‚úÖ ∆Øu ƒëi·ªÉm:');
console.log('      - C·∫•u tr√∫c r√µ r√†ng, d·ªÖ query ri√™ng l·∫ª');
console.log('      - D·ªÖ th√™m/s·ª≠a/x√≥a t·ª´ng prize position');
console.log('      - C√≥ th·ªÉ index ri√™ng cho performance');
console.log('   ‚ùå Nh∆∞·ª£c ƒëi·ªÉm:');
console.log('      - C·∫ßn JOIN ƒë·ªÉ l·∫•y full data');
console.log('      - Nhi·ªÅu rows cho 1 tournament');
console.log('      - Ph·ª©c t·∫°p khi update batch');
console.log('      - Timing issues khi t·∫°o tournament + prizes');

console.log('\nüéØ C√ÅCH M·ªöI - JSONB prize_distribution trong tournaments:');
console.log('   ‚úÖ ∆Øu ƒëi·ªÉm:');
console.log('      - T·∫•t c·∫£ data trong 1 row, kh√¥ng c·∫ßn JOIN');
console.log('      - Atomic operations (t·∫°o tournament + prizes c√πng l√∫c)');
console.log('      - Flexible structure, d·ªÖ m·ªü r·ªông');
console.log('      - Query ƒë∆°n gi·∫£n h∆°n');
console.log('      - PostgreSQL JSONB performance t·ªët');
console.log('   ‚ùå Nh∆∞·ª£c ƒëi·ªÉm:');
console.log('      - Kh√≥ query ri√™ng t·ª´ng position');
console.log('      - JSON structure ph·ª©c t·∫°p h∆°n');

// 3. C√ÅCH MIGRATE D·ªÆ LI·ªÜU
console.log('\n3Ô∏è‚É£ MIGRATION PROCESS:');

console.log('\nüì§ B∆∞·ªõc 1: Export data t·ª´ tournament_prizes');
const oldPrizesExample = [
  {
    tournament_id: 'tournament-123',
    prize_position: 1,
    position_name: 'V√¥ ƒë·ªãch',
    cash_amount: 800000,
    elo_points: 100,
    spa_points: 50,
    physical_items: ['Cup v√†ng'],
    is_visible: true
  },
  {
    tournament_id: 'tournament-123', 
    prize_position: 2,
    position_name: '√Å qu√¢n',
    cash_amount: 500000,
    elo_points: 80,
    spa_points: 30,
    physical_items: ['Cup b·∫°c'],
    is_visible: true
  }
];

console.log('   Old structure:', JSON.stringify(oldPrizesExample, null, 2));

console.log('\nüîÑ B∆∞·ªõc 2: Transform th√†nh JSONB');
function transformToJsonb(tournamentPrizes) {
  const positions = tournamentPrizes.map(prize => ({
    position: prize.prize_position,
    position_name: prize.position_name,
    cash_amount: prize.cash_amount,
    elo_points: prize.elo_points,
    spa_points: prize.spa_points,
    physical_items: prize.physical_items,
    is_visible: prize.is_visible
  }));

  const totalAmount = positions.reduce((sum, pos) => sum + pos.cash_amount, 0);

  return {
    total_positions: positions.length,
    total_prize_amount: totalAmount,
    positions: positions,
    prize_summary: positions.reduce((summary, pos) => {
      summary[`position_${pos.position}`] = pos.cash_amount;
      return summary;
    }, {}),
    metadata: {
      migrated_at: new Date().toISOString(),
      source: 'tournament_prizes_table'
    }
  };
}

const transformedData = transformToJsonb(oldPrizesExample);
console.log('   New JSONB structure:', JSON.stringify(transformedData, null, 2));

// 4. C√ÅC QUERY PATTERNS TH∆Ø·ªúNG D√ôNG
console.log('\n4Ô∏è‚É£ QUERY PATTERNS:');

console.log('\nüîç L·∫•y th√¥ng tin gi·∫£i th∆∞·ªüng cho tournament:');
console.log(`
SELECT 
  id,
  name,
  prize_pool,
  prize_distribution
FROM tournaments 
WHERE id = 'tournament-id';
`);

console.log('\nüèÜ L·∫•y th√¥ng tin v√¥ ƒë·ªãch:');
console.log(`
SELECT 
  id,
  name,
  prize_distribution -> 'positions' -> 0 ->> 'position_name' as champion_name,
  (prize_distribution -> 'positions' -> 0 ->> 'cash_amount')::int as champion_prize,
  (prize_distribution -> 'positions' -> 0 ->> 'elo_points')::int as champion_elo
FROM tournaments 
WHERE id = 'tournament-id';
`);

console.log('\nüí∞ T√¨m tournaments c√≥ gi·∫£i th∆∞·ªüng cao:');
console.log(`
SELECT id, name, prize_pool
FROM tournaments 
WHERE (prize_distribution -> 'positions' -> 0 ->> 'cash_amount')::int > 500000
AND prize_distribution IS NOT NULL;
`);

console.log('\nüìä Th·ªëng k√™ s·ªë l∆∞·ª£ng v·ªã tr√≠ c√≥ gi·∫£i:');
console.log(`
SELECT 
  id,
  name,
  (prize_distribution ->> 'total_positions')::int as positions_count,
  (prize_distribution ->> 'total_prize_amount')::int as total_amount
FROM tournaments 
WHERE prize_distribution IS NOT NULL;
`);

// 5. IMPLEMENTATION V·ªöI SUPABASE
console.log('\n5Ô∏è‚É£ SUPABASE IMPLEMENTATION:');

console.log('\nüíæ Insert tournament v·ªõi prizes:');
console.log(`
const { data, error } = await supabase
  .from('tournaments')
  .insert({
    name: 'SABO Open 2024',
    prize_pool: 2000000,
    prize_distribution: {
      total_positions: 16,
      positions: [
        {
          position: 1,
          position_name: "V√¥ ƒë·ªãch",
          cash_amount: 800000,
          elo_points: 100,
          spa_points: 50
        }
        // ... more positions
      ]
    }
  });
`);

console.log('\nüìù Update prizes:');
console.log(`
const { error } = await supabase
  .from('tournaments')
  .update({
    prize_distribution: updatedPrizeData
  })
  .eq('id', tournamentId);
`);

console.log('\nüéØ Query v√† s·ª≠ d·ª•ng:');
console.log(`
const { data: tournament } = await supabase
  .from('tournaments')
  .select('id, name, prize_distribution')
  .eq('id', tournamentId)
  .single();

// S·ª≠ d·ª•ng data
const positions = tournament.prize_distribution.positions;
const championPrize = positions[0].cash_amount;
const totalPositions = tournament.prize_distribution.total_positions;
`);

console.log('\n6Ô∏è‚É£ K·∫æT LU·∫¨N:');
console.log('   üéØ prize_distribution JSONB ph√π h·ª£p h∆°n cho use case n√†y');
console.log('   ‚ö° Atomic operations, kh√¥ng c√≥ timing issues');
console.log('   üì¶ T·∫•t c·∫£ prize data trong 1 place');
console.log('   üîß D·ªÖ maintenance v√† development');
console.log('   üí° C√≥ th·ªÉ gi·ªØ tournament_prizes table ƒë·ªÉ backup/audit');

console.log('\n' + '='.repeat(70));
console.log('‚úÖ DEMO HO√ÄN T·∫§T');
