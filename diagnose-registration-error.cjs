const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_SERVICE_ROLE_KEY
);

async function diagnoseDatabaseError() {
  console.log('üîç CH·∫®N ƒêO√ÅN L·ªñI "database error saving new user"');
  console.log('=' .repeat(60));
  
  console.log('\nüìã C√ÅC NGUY√äN NH√ÇN C√ì TH·ªÇ:');
  console.log('1. Trigger handle_new_user b·ªã l·ªói');
  console.log('2. Profiles table thi·∫øu constraint ho·∫∑c c√≥ l·ªói schema');
  console.log('3. RLS policies block vi·ªác t·∫°o profile');
  console.log('4. Function handle_new_user b·ªã l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω');
  console.log('5. Raw user metadata kh√¥ng ƒë√∫ng format');
  
  console.log('\nüîß KI·ªÇM TRA CHI TI·∫æT...\n');
  
  // 1. Ki·ªÉm tra xem c√≥ profile n√†o ƒë∆∞·ª£c t·∫°o g·∫ßn ƒë√¢y kh√¥ng
  console.log('1. KI·ªÇM TRA PROFILES G·∫¶N ƒê√ÇY:');
  try {
    const { data: recentProfiles, error: profileError } = await supabase
      .from('profiles')
      .select('user_id, full_name, phone, email, created_at')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (profileError) {
      console.log('‚ùå L·ªói khi l·∫•y profiles:', profileError.message);
    } else {
      console.log('‚úÖ 5 profiles g·∫ßn nh·∫•t:');
      recentProfiles?.forEach(profile => {
        console.log(`   - ${profile.full_name || 'No name'} | ${profile.phone || 'No phone'} | ${profile.created_at}`);
      });
    }
  } catch (error) {
    console.log('‚ùå Exception:', error.message);
  }
  
  // 2. Ki·ªÉm tra constraints tr√™n profiles table
  console.log('\n2. KI·ªÇM TRA CONSTRAINTS:');
  try {
    // Test t·∫°o profile v·ªõi c√°c tr∆∞·ªùng required
    const testData = {
      user_id: '12345678-1234-1234-1234-123456789012', // Valid UUID
      full_name: 'Test User',
      phone: '+84123456789'
    };
    
    const { data: testResult, error: testError } = await supabase
      .from('profiles')
      .insert(testData)
      .select();
    
    if (testError) {
      console.log('‚ùå Test insert failed:', testError.message);
      console.log('   Code:', testError.code);
      console.log('   Details:', testError.details);
      
      // Ph√¢n t√≠ch m√£ l·ªói c·ª• th·ªÉ
      if (testError.code === '23505') {
        console.log('   ‚Üí DUPLICATE KEY: user_id ho·∫∑c phone ƒë√£ t·ªìn t·∫°i');
      } else if (testError.code === '23502') {
        console.log('   ‚Üí NULL CONSTRAINT: c√≥ field required b·ªã null');
      } else if (testError.code === '22P02') {
        console.log('   ‚Üí INVALID UUID: user_id kh√¥ng ƒë√∫ng format UUID');
      } else if (testError.code === '42501') {
        console.log('   ‚Üí PERMISSION DENIED: RLS policy ch·∫∑n insert');
      }
    } else {
      console.log('‚úÖ Test insert th√†nh c√¥ng:', testResult);
      
      // Cleanup test data
      await supabase.from('profiles').delete().eq('user_id', testData.user_id);
      console.log('‚úÖ Test data cleaned up');
    }
  } catch (error) {
    console.log('‚ùå Exception during constraint test:', error.message);
  }
  
  // 3. Ki·ªÉm tra c√°c phone number c√≥ format l·ªói
  console.log('\n3. KI·ªÇM TRA PHONE NUMBER FORMAT:');
  try {
    const { data: invalidPhones, error: phoneError } = await supabase
      .from('profiles')
      .select('user_id, full_name, phone')
      .not('phone', 'is', null)
      .limit(10);
    
    if (phoneError) {
      console.log('‚ùå L·ªói ki·ªÉm tra phone numbers:', phoneError.message);
    } else {
      console.log('‚úÖ Sample phone numbers trong database:');
      invalidPhones?.forEach(profile => {
        const phone = profile.phone;
        let status = '‚úÖ';
        let issues = [];
        
        if (!phone) {
          status = '‚ö†Ô∏è';
          issues.push('NULL');
        } else {
          if (!phone.startsWith('+84') && !phone.startsWith('0')) {
            status = '‚ùå';
            issues.push('Invalid format');
          }
          if (phone.length < 10) {
            status = '‚ùå';
            issues.push('Too short');
          }
        }
        
        console.log(`   ${status} ${phone || 'NULL'} - ${profile.full_name} ${issues.length > 0 ? '(' + issues.join(', ') + ')' : ''}`);
      });
    }
  } catch (error) {
    console.log('‚ùå Exception during phone check:', error.message);
  }
  
  // 4. M√¥ ph·ªèng l·ªói registration
  console.log('\n4. M√î PH·ªéNG REGISTRATION PROCESS:');
  console.log('Gi·∫£ l·∫≠p nh·ªØng g√¨ x·∫£y ra khi user ƒëƒÉng k√Ω...');
  
  // Test v·ªõi c√°c tr∆∞·ªùng h·ª£p th∆∞·ªùng g·∫∑p
  const testCases = [
    {
      name: 'Valid Vietnam phone',
      phone: '0987654321',
      expected: '+84987654321'
    },
    {
      name: 'Already E164 format',
      phone: '+84987654321',
      expected: '+84987654321'
    },
    {
      name: 'Invalid format',
      phone: '987654321',
      expected: 'ERROR'
    }
  ];
  
  testCases.forEach(testCase => {
    console.log(`\n   Test: ${testCase.name}`);
    console.log(`   Input: ${testCase.phone}`);
    
    // Format phone to E164 (similar to what app does)
    let formattedPhone;
    try {
      if (testCase.phone.startsWith('+84')) {
        formattedPhone = testCase.phone;
      } else if (testCase.phone.startsWith('0')) {
        formattedPhone = '+84' + testCase.phone.slice(1);
      } else {
        formattedPhone = 'INVALID';
      }
      
      console.log(`   Formatted: ${formattedPhone}`);
      console.log(`   Expected: ${testCase.expected}`);
      console.log(`   Status: ${formattedPhone === testCase.expected ? '‚úÖ OK' : '‚ùå MISMATCH'}`);
    } catch (error) {
      console.log(`   ‚ùå Error formatting: ${error.message}`);
    }
  });
  
  console.log('\n' + '='.repeat(60));
  console.log('üí° G·ª¢I √ù GI·∫¢I PH√ÅP:');
  console.log('');
  
  console.log('1. KI·ªÇM TRA SUPABASE LOGS:');
  console.log('   - V√†o Supabase Dashboard > Logs');
  console.log('   - Xem "Database" logs trong l√∫c user ƒëƒÉng k√Ω');
  console.log('   - T√¨m l·ªói t·ª´ trigger handle_new_user');
  console.log('');
  
  console.log('2. KI·ªÇM TRA FORMAT D·ªÆ LI·ªÜU:');
  console.log('   - Phone number ph·∫£i l√† E164 format (+84...)');
  console.log('   - Full name kh√¥ng ƒë∆∞·ª£c null ho·∫∑c empty');
  console.log('   - User ID ph·∫£i l√† valid UUID');
  console.log('');
  
  console.log('3. KI·ªÇM TRA RLS POLICIES:');
  console.log('   - ƒê·∫£m b·∫£o trigger c√≥ SECURITY DEFINER');
  console.log('   - RLS policies kh√¥ng ch·∫∑n INSERT t·ª´ trigger');
  console.log('');
  
  console.log('4. C·∫¨P NH·∫¨T HANDLE_NEW_USER FUNCTION:');
  console.log('   - Th√™m logging ƒë·ªÉ debug');
  console.log('   - Handle c√°c exception t·ªët h∆°n');
  console.log('   - Validate d·ªØ li·ªáu tr∆∞·ªõc khi insert');
  console.log('');
  
  console.log('5. TEST MANUAL:');
  console.log('   - Th·ª≠ t·∫°o user qua Supabase Dashboard');
  console.log('   - Xem trigger c√≥ ch·∫°y kh√¥ng');
  console.log('   - Debug t·ª´ng step c·ªßa registration flow');
}

diagnoseDatabaseError().catch(console.error);
