-- =====================================================
-- MILESTONE NOTIFICATION SYSTEM INTEGRATION
-- =====================================================
-- T√≠ch h·ª£p h·ªá th·ªëng milestone v·ªõi challenge_notifications
-- T·ª± ƒë·ªông th√¥ng b√°o khi ho√†n th√†nh milestone

-- =====================================================
-- 1. MILESTONE COMPLETION NOTIFICATION TRIGGER
-- =====================================================

-- Function: T·ª± ƒë·ªông th√¥ng b√°o khi milestone ƒë∆∞·ª£c ho√†n th√†nh
CREATE OR REPLACE FUNCTION notify_milestone_completion()
RETURNS TRIGGER AS $$
DECLARE
    milestone_info RECORD;
    player_info RECORD;
BEGIN
    -- Ch·ªâ x·ª≠ l√Ω khi milestone m·ªõi ƒë∆∞·ª£c completed
    IF NEW.is_completed = true AND (OLD.is_completed IS NULL OR OLD.is_completed = false) THEN
        
        -- L·∫•y th√¥ng tin milestone
        SELECT * INTO milestone_info
        FROM milestones
        WHERE id = NEW.milestone_id;
        
        -- L·∫•y th√¥ng tin player
        SELECT full_name, display_name INTO player_info
        FROM profiles
        WHERE user_id = NEW.player_id;
        
        -- T·∫°o th√¥ng b√°o milestone completion
        PERFORM create_challenge_notification(
            'milestone_completed',
            NEW.player_id,
            'üèÜ Ho√†n th√†nh milestone!',
            format('üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh "%s" v√† nh·∫≠n ƒë∆∞·ª£c %s SPA!', 
                   COALESCE(milestone_info.name, 'Milestone'),
                   COALESCE(milestone_info.spa_reward, 0)),
            NEW.milestone_id::TEXT,
            'trophy',
            'high',
            'Xem th∆∞·ªüng',
            '/milestones'
        );
        
        -- Th√¥ng b√°o ƒë·∫∑c bi·ªát cho milestone l·ªõn (SPA reward >= 200)
        IF milestone_info.spa_reward >= 200 THEN
            PERFORM create_challenge_notification(
                'milestone_major_achievement',
                NEW.player_id,
                'üåü Th√†nh t·ª±u l·ªõn!',
                format('üåü AMAZING! B·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c th√†nh t·ª±u l·ªõn "%s"! ƒê√¢y l√† m·ªôt c·ªôt m·ªëc quan tr·ªçng trong h√†nh tr√¨nh c·ªßa b·∫°n!', 
                       milestone_info.name),
                NEW.milestone_id::TEXT,
                'crown',
                'urgent',
                'Khoe th√†nh t√≠ch',
                '/milestones'
            );
        END IF;
        
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger cho milestone completion
DROP TRIGGER IF EXISTS trigger_milestone_completion_notification ON player_milestones;
CREATE TRIGGER trigger_milestone_completion_notification
    AFTER UPDATE ON player_milestones
    FOR EACH ROW
    EXECUTE FUNCTION notify_milestone_completion();

-- =====================================================
-- 2. MILESTONE PROGRESS NOTIFICATION SYSTEM
-- =====================================================

-- Function: Th√¥ng b√°o ti·∫øn tr√¨nh milestone (80%, 90% ho√†n th√†nh)
CREATE OR REPLACE FUNCTION notify_milestone_progress()
RETURNS TRIGGER AS $$
DECLARE
    milestone_info RECORD;
    progress_percentage DECIMAL;
    previous_percentage DECIMAL;
BEGIN
    -- Ch·ªâ x·ª≠ l√Ω n·∫øu milestone ch∆∞a completed
    IF NEW.is_completed = false THEN
        
        -- L·∫•y th√¥ng tin milestone
        SELECT * INTO milestone_info
        FROM milestones
        WHERE id = NEW.milestone_id;
        
        -- T√≠nh ph·∫ßn trƒÉm ho√†n th√†nh
        progress_percentage := (NEW.current_progress::DECIMAL / milestone_info.requirement_value::DECIMAL) * 100;
        previous_percentage := (OLD.current_progress::DECIMAL / milestone_info.requirement_value::DECIMAL) * 100;
        
        -- Th√¥ng b√°o khi ƒë·∫°t 80%
        IF progress_percentage >= 80 AND previous_percentage < 80 THEN
            PERFORM create_challenge_notification(
                'milestone_progress_80',
                NEW.player_id,
                'üéØ G·∫ßn ho√†n th√†nh!',
                format('üéØ B·∫°n ƒë√£ ho√†n th√†nh 80%% milestone "%s"! Ch·ªâ c√≤n m·ªôt ch√∫t n·ªØa th√¥i!', 
                       milestone_info.name),
                NEW.milestone_id::TEXT,
                'target',
                'medium',
                'Xem ti·∫øn tr√¨nh',
                '/milestones'
            );
        END IF;
        
        -- Th√¥ng b√°o khi ƒë·∫°t 90%
        IF progress_percentage >= 90 AND previous_percentage < 90 THEN
            PERFORM create_challenge_notification(
                'milestone_progress_90',
                NEW.player_id,
                'üî• S·∫Øp ho√†n th√†nh!',
                format('üî• WOW! B·∫°n ƒë√£ ho√†n th√†nh 90%% milestone "%s"! Victory is near!', 
                       milestone_info.name),
                NEW.milestone_id::TEXT,
                'flame',
                'high',
                'Ho√†n th√†nh ngay',
                '/milestones'
            );
        END IF;
        
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger cho milestone progress
DROP TRIGGER IF EXISTS trigger_milestone_progress_notification ON player_milestones;
CREATE TRIGGER trigger_milestone_progress_notification
    AFTER UPDATE OF current_progress ON player_milestones
    FOR EACH ROW
    WHEN (NEW.current_progress > OLD.current_progress)
    EXECUTE FUNCTION notify_milestone_progress();

-- =====================================================
-- 3. DAILY/WEEKLY MILESTONE RESET NOTIFICATIONS
-- =====================================================

-- Function: Th√¥ng b√°o reset milestone h√†ng ng√†y/tu·∫ßn
CREATE OR REPLACE FUNCTION notify_milestone_reset()
RETURNS void AS $$
DECLARE
    reset_count INTEGER;
BEGIN
    -- Reset daily milestones (gi·∫£ ƒë·ªãnh c√≥ field is_daily)
    UPDATE player_milestones pm
    SET 
        current_progress = 0,
        last_daily_completion = CURRENT_DATE
    FROM milestones m
    WHERE pm.milestone_id = m.id
    AND m.is_repeatable = true
    AND m.daily_limit IS NOT NULL
    AND pm.last_daily_completion < CURRENT_DATE;
    
    GET DIAGNOSTICS reset_count = ROW_COUNT;
    
    -- Th√¥ng b√°o reset cho admin (system notification)
    IF reset_count > 0 THEN
        INSERT INTO challenge_notifications (
            id, user_id, type, title, message, icon, priority, 
            action_text, action_url, is_read, metadata
        ) VALUES (
            gen_random_uuid(),
            '00000000-0000-0000-0000-000000000000', -- System user
            'milestone_daily_reset',
            'üîÑ Daily Milestone Reset',
            format('üîÑ Daily milestone reset completed. %s player milestone progress reset for new day.', reset_count),
            'refresh-cw',
            'low',
            'View System Logs',
            '/admin/milestones',
            false,
            jsonb_build_object(
                'reset_count', reset_count,
                'reset_date', CURRENT_DATE,
                'reset_type', 'daily'
            )
        );
    END IF;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- 4. MILESTONE STREAK NOTIFICATIONS
-- =====================================================

-- Function: Th√¥ng b√°o milestone streak (login, daily challenges, etc.)
CREATE OR REPLACE FUNCTION notify_milestone_streaks()
RETURNS TRIGGER AS $$
DECLARE
    milestone_info RECORD;
    streak_value INTEGER;
BEGIN
    -- X·ª≠ l√Ω milestone lo·∫°i "streak"
    SELECT * INTO milestone_info
    FROM milestones
    WHERE id = NEW.milestone_id
    AND milestone_type LIKE '%streak%';
    
    IF FOUND THEN
        streak_value := NEW.current_progress;
        
        -- Th√¥ng b√°o streak milestones
        CASE 
            WHEN milestone_info.milestone_type = 'login_streak' THEN
                -- Login streak notifications
                CASE streak_value
                    WHEN 3 THEN
                        PERFORM create_challenge_notification(
                            'login_streak_3',
                            NEW.player_id,
                            'üî• 3 ng√†y li√™n ti·∫øp!',
                            'üî• Tuy·ªát v·ªùi! B·∫°n ƒë√£ login 3 ng√†y li√™n ti·∫øp! H√£y duy tr√¨ streak n√†y!',
                            NEW.milestone_id::TEXT,
                            'flame',
                            'medium',
                            'Ti·∫øp t·ª•c streak',
                            '/milestones'
                        );
                    WHEN 7 THEN
                        PERFORM create_challenge_notification(
                            'login_streak_7',
                            NEW.player_id,
                            '‚≠ê 1 tu·∫ßn li√™n ti·∫øp!',
                            '‚≠ê AMAZING! 7 ng√†y login li√™n ti·∫øp! B·∫°n th·∫≠t ki√™n tr√¨!',
                            NEW.milestone_id::TEXT,
                            'star',
                            'high',
                            'Xem th√†nh t√≠ch',
                            '/milestones'
                        );
                    WHEN 30 THEN
                        PERFORM create_challenge_notification(
                            'login_streak_30',
                            NEW.player_id,
                            'üëë 1 th√°ng li√™n ti·∫øp!',
                            'üëë LEGENDARY! 30 ng√†y login li√™n ti·∫øp! B·∫°n l√† m·ªôt trong nh·ªØng player ki√™n tr√¨ nh·∫•t!',
                            NEW.milestone_id::TEXT,
                            'crown',
                            'urgent',
                            'Khoe th√†nh t√≠ch',
                            '/milestones'
                        );
                END CASE;
                
            WHEN milestone_info.milestone_type = 'win_streak' THEN
                -- Win streak notifications  
                CASE streak_value
                    WHEN 5 THEN
                        PERFORM create_challenge_notification(
                            'win_streak_5',
                            NEW.player_id,
                            '‚ö° 5 th·∫Øng li√™n ti·∫øp!',
                            '‚ö° HOT! 5 th·∫Øng li√™n ti·∫øp! Momentum ƒëang theo b·∫°n!',
                            NEW.milestone_id::TEXT,
                            'zap',
                            'high',
                            'Ti·∫øp t·ª•c chi·∫øn th·∫Øng',
                            '/challenges'
                        );
                    WHEN 10 THEN
                        PERFORM create_challenge_notification(
                            'win_streak_10',
                            NEW.player_id,
                            'üî• 10 th·∫Øng li√™n ti·∫øp!',
                            'üî• INCREDIBLE! 10 th·∫Øng li√™n ti·∫øp! B·∫°n ƒëang trong phong ƒë·ªô ƒë·ªânh cao!',
                            NEW.milestone_id::TEXT,
                            'flame',
                            'urgent',
                            'Xem th√†nh t√≠ch',
                            '/milestones'
                        );
                END CASE;
        END CASE;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger cho milestone streaks
DROP TRIGGER IF EXISTS trigger_milestone_streak_notification ON player_milestones;
CREATE TRIGGER trigger_milestone_streak_notification
    AFTER UPDATE OF current_progress ON player_milestones
    FOR EACH ROW
    EXECUTE FUNCTION notify_milestone_streaks();

-- =====================================================
-- 5. MILESTONE CATEGORY ACHIEVEMENTS
-- =====================================================

-- Function: Th√¥ng b√°o khi ho√†n th√†nh t·∫•t c·∫£ milestone trong m·ªôt category
CREATE OR REPLACE FUNCTION notify_category_completion()
RETURNS TRIGGER AS $$
DECLARE
    category_name TEXT;
    total_milestones INTEGER;
    completed_milestones INTEGER;
    category_complete BOOLEAN := false;
BEGIN
    -- Ch·ªâ x·ª≠ l√Ω khi milestone m·ªõi ƒë∆∞·ª£c completed
    IF NEW.is_completed = true AND (OLD.is_completed IS NULL OR OLD.is_completed = false) THEN
        
        -- L·∫•y category c·ªßa milestone n√†y
        SELECT category INTO category_name
        FROM milestones
        WHERE id = NEW.milestone_id;
        
        -- ƒê·∫øm total milestones trong category
        SELECT COUNT(*) INTO total_milestones
        FROM milestones
        WHERE category = category_name AND is_active = true;
        
        -- ƒê·∫øm completed milestones c·ªßa player trong category n√†y
        SELECT COUNT(*) INTO completed_milestones
        FROM player_milestones pm
        JOIN milestones m ON pm.milestone_id = m.id
        WHERE pm.player_id = NEW.player_id
        AND m.category = category_name
        AND m.is_active = true
        AND pm.is_completed = true;
        
        -- Ki·ªÉm tra n·∫øu ƒë√£ ho√†n th√†nh t·∫•t c·∫£ milestone trong category
        IF completed_milestones >= total_milestones THEN
            category_complete := true;
        END IF;
        
        -- Th√¥ng b√°o category completion
        IF category_complete THEN
            PERFORM create_challenge_notification(
                'milestone_category_complete',
                NEW.player_id,
                'üèÖ Ho√†n th√†nh category!',
                format('üèÖ PERFECT! B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ %s milestone trong category "%s"! Master level achieved!', 
                       total_milestones, 
                       CASE category_name
                           WHEN 'progress' THEN 'Ti·∫øn Tr√¨nh'
                           WHEN 'achievement' THEN 'Th√†nh T·ª±u'
                           WHEN 'social' THEN 'X√£ H·ªôi'
                           WHEN 'repeatable' THEN 'H√†ng Ng√†y'
                           ELSE category_name
                       END),
                NEW.milestone_id::TEXT,
                'award',
                'urgent',
                'Xem t·∫•t c·∫£ th√†nh t√≠ch',
                '/milestones',
                jsonb_build_object(
                    'category', category_name,
                    'total_milestones', total_milestones,
                    'completion_rate', '100%',
                    'special_achievement', true
                )
            );
        END IF;
        
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger cho category completion
DROP TRIGGER IF EXISTS trigger_milestone_category_completion ON player_milestones;
CREATE TRIGGER trigger_milestone_category_completion
    AFTER UPDATE ON player_milestones
    FOR EACH ROW
    EXECUTE FUNCTION notify_category_completion();

-- =====================================================
-- 6. TEST MILESTONE NOTIFICATION SYSTEM
-- =====================================================

-- Function: Test milestone notification system
CREATE OR REPLACE FUNCTION test_milestone_notifications()
RETURNS text AS $$
DECLARE
    test_user_id UUID := 'e30e1d1d-d714-4678-b63c-9f403ea2aeac';
    test_milestone_id UUID;
    result_text TEXT := '';
BEGIN
    -- L·∫•y m·ªôt milestone ƒë·ªÉ test
    SELECT id INTO test_milestone_id
    FROM milestones
    WHERE milestone_type = 'account_creation'
    LIMIT 1;
    
    IF test_milestone_id IS NULL THEN
        RETURN '‚ùå Kh√¥ng t√¨m th·∫•y milestone ƒë·ªÉ test';
    END IF;
    
    -- Test 1: Milestone completion notification
    result_text := result_text || 'üß™ TEST 1: Milestone completion notification' || E'\n';
    
    -- T·∫°o player_milestone record n·∫øu ch∆∞a c√≥
    INSERT INTO player_milestones (player_id, milestone_id, current_progress, is_completed)
    VALUES (test_user_id, test_milestone_id, 0, false)
    ON CONFLICT (player_id, milestone_id) DO NOTHING;
    
    -- Trigger completion
    UPDATE player_milestones
    SET is_completed = true, completed_at = NOW()
    WHERE player_id = test_user_id AND milestone_id = test_milestone_id;
    
    result_text := result_text || '‚úÖ Milestone completion notification triggered' || E'\n';
    
    -- Test 2: Progress notification
    result_text := result_text || E'\n' || 'üß™ TEST 2: Progress notification (80%)' || E'\n';
    
    -- Reset v√† test progress
    UPDATE player_milestones
    SET is_completed = false, current_progress = 80
    WHERE player_id = test_user_id AND milestone_id = test_milestone_id;
    
    result_text := result_text || '‚úÖ Progress notification (80%) triggered' || E'\n';
    
    -- Cleanup
    DELETE FROM player_milestones
    WHERE player_id = test_user_id AND milestone_id = test_milestone_id;
    
    result_text := result_text || E'\n' || 'üßπ Test cleanup completed' || E'\n';
    result_text := result_text || E'\n' || 'üéØ MILESTONE NOTIFICATION SYSTEM READY!';
    
    RETURN result_text;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- SUMMARY
-- =====================================================

/*
üéØ MILESTONE NOTIFICATION SYSTEM - COMPLETE!

‚úÖ IMPLEMENTED FEATURES:
1. üèÜ Milestone Completion Notifications - T·ª± ƒë·ªông th√¥ng b√°o khi ho√†n th√†nh
2. üéØ Progress Notifications - Th√¥ng b√°o khi ƒë·∫°t 80%, 90%
3. üîÑ Daily/Weekly Reset Notifications - Qu·∫£n l√Ω milestone l·∫∑p l·∫°i
4. üî• Streak Notifications - Login streak, win streak celebrations
5. üèÖ Category Completion - Th√¥ng b√°o khi ho√†n th√†nh t·∫•t c·∫£ milestone trong category
6. üß™ Test System - Function ƒë·ªÉ test to√†n b·ªô h·ªá th·ªëng

üöÄ TRIGGERS CREATED:
- trigger_milestone_completion_notification (player_milestones)
- trigger_milestone_progress_notification (player_milestones)  
- trigger_milestone_streak_notification (player_milestones)
- trigger_milestone_category_completion (player_milestones)

üì± NOTIFICATION TYPES:
- milestone_completed: Ho√†n th√†nh milestone
- milestone_major_achievement: Th√†nh t·ª±u l·ªõn (SPA ‚â• 200)
- milestone_progress_80/90: Ti·∫øn tr√¨nh 80%, 90%
- login_streak_3/7/30: Login streak milestones
- win_streak_5/10: Win streak achievements
- milestone_category_complete: Ho√†n th√†nh to√†n b·ªô category

üéâ MILESTONE NOTIFICATIONS NOW FULLY INTEGRATED!
*/
