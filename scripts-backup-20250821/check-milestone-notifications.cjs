const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function checkMilestoneNotificationIntegration() {
  console.log('üéØ KI·ªÇM TRA T√çCH H·ª¢P MILESTONE & TH√îNG B√ÅO');
  console.log('=========================================');
  console.log('');

  try {
    // 1. Ki·ªÉm tra milestone database
    console.log('1. üìä MILESTONE DATABASE:');
    const { data: milestones, error: milestonesError } = await supabase
      .from('milestones')
      .select('id, name, milestone_type, spa_reward')
      .limit(5);
    
    if (milestonesError) {
      console.log('‚ùå Milestone database error:', milestonesError.message);
    } else {
      console.log(`‚úÖ Milestone database: ${milestones?.length || 0} milestones`);
      milestones?.forEach((m, i) => {
        console.log(`   ${i + 1}. ${m.name} (${m.milestone_type}) - ${m.spa_reward} SPA`);
      });
    }

    // 2. Ki·ªÉm tra milestone notifications
    console.log('');
    console.log('2. üîî MILESTONE NOTIFICATIONS:');
    const { data: milestoneNotifs, error: notifError } = await supabase
      .from('challenge_notifications')
      .select('id, type, title, message')
      .or('type.ilike.%milestone%,type.ilike.%achievement%,type.ilike.%spa%')
      .limit(5);
    
    if (notifError) {
      console.log('‚ùå Notification query error:', notifError.message);
    } else {
      console.log(`‚úÖ Milestone notifications found: ${milestoneNotifs?.length || 0}`);
      milestoneNotifs?.forEach((n, i) => {
        console.log(`   ${i + 1}. ${n.title} (${n.type})`);
      });
    }

    // 3. Ki·ªÉm tra milestoneService integration
    console.log('');
    console.log('3. üîß MILESTONE SERVICE INTEGRATION:');
    
    // Check if milestoneService uses challenge_notifications
    const fs = require('fs');
    const path = require('path');
    
    try {
      const milestoneServicePath = path.join(process.cwd(), 'src/services/milestoneService.ts');
      const milestoneServiceContent = fs.readFileSync(milestoneServicePath, 'utf8');
      
      const hasNotificationIntegration = milestoneServiceContent.includes('challenge_notifications') ||
                                       milestoneServiceContent.includes('notifications');
      
      if (hasNotificationIntegration) {
        console.log('‚úÖ MilestoneService c√≥ t√≠ch h·ª£p notifications');
      } else {
        console.log('‚ùå MilestoneService CH∆ØA t√≠ch h·ª£p challenge_notifications');
        console.log('   - Hi·ªán t·∫°i d√πng b·∫£ng "notifications" c≈©');
        console.log('   - C·∫ßn c·∫≠p nh·∫≠t ƒë·ªÉ d√πng "challenge_notifications"');
      }
    } catch (err) {
      console.log('‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c milestoneService.ts:', err.message);
    }

    console.log('');
    console.log('üéØ K·∫æT LU·∫¨N T·ªîNG QUAN:');
    console.log('====================');
    console.log('');
    
    console.log('üìä H·ªÜ TH·ªêNG MILESTONE:');
    console.log('   ‚úÖ Database structure: S·∫¥N S√ÄNG');
    console.log('   ‚úÖ Business logic: S·∫¥N S√ÄNG (milestoneService.ts)');
    console.log('   ‚úÖ UI components: S·∫¥N S√ÄNG (MilestonePage.tsx)');
    console.log('   ‚úÖ Edge Functions: S·∫¥N S√ÄNG (milestone-triggers)');
    console.log('');
    
    console.log('üîî TH√îNG B√ÅO MILESTONE:');
    if (milestoneNotifs && milestoneNotifs.length > 0) {
      console.log('   ‚úÖ ƒê√£ c√≥ m·ªôt s·ªë th√¥ng b√°o milestone');
      console.log('   ‚úÖ Challenge_notifications table ho·∫°t ƒë·ªông');
    } else {
      console.log('   ‚ùå CH∆ØA C√ì th√¥ng b√°o milestone t·ª± ƒë·ªông');
      console.log('   ‚ùå MilestoneService ch∆∞a t√≠ch h·ª£p challenge_notifications');
    }
    
    console.log('');
    console.log('üöÄ C·∫¶N TH·ª∞C HI·ªÜN ƒê·ªÇ HO√ÄN THI·ªÜN:');
    console.log('==============================');
    console.log('1. üîß C·∫≠p nh·∫≠t milestoneService.ts:');
    console.log('   - Thay th·∫ø "notifications" ‚Üí "challenge_notifications"');
    console.log('   - S·ª≠ d·ª•ng create_challenge_notification function');
    console.log('   - Th√™m icon, priority, action_url');
    console.log('');
    console.log('2. üéØ T·∫°o milestone notification triggers:');
    console.log('   - Trigger khi milestone completed');
    console.log('   - Auto g·ª≠i notification v·ªõi SPA reward');
    console.log('   - Real-time updates');
    console.log('');
    console.log('3. üß™ Test integration:');
    console.log('   - Complete m·ªôt milestone');
    console.log('   - Verify notification xu·∫•t hi·ªán');
    console.log('   - Check notification bell updates');
    console.log('');
    
    console.log('üí° H∆Ø·ªöNG D·∫™N NHANH:');
    console.log('=================');
    console.log('ƒê·ªÉ t√≠ch h·ª£p milestone notifications:');
    console.log('1. M·ªü milestoneService.ts');
    console.log('2. T√¨m d√≤ng: await supabase.from("notifications").insert({');
    console.log('3. Thay b·∫±ng: await supabase.rpc("create_challenge_notification", {');
    console.log('4. C·∫≠p nh·∫≠t parameters theo challenge_notifications format');
    console.log('5. Test b·∫±ng c√°ch complete m·ªôt milestone');

  } catch (error) {
    console.error('‚ùå L·ªói ki·ªÉm tra:', error.message);
  }
}

checkMilestoneNotificationIntegration();
