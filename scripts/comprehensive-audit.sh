#!/bin/bash

echo "üîç KI·ªÇM TRA TO√ÄN DI·ªÜN CODEBASE - COMPREHENSIVE CODEBASE AUDIT"
echo "=================================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

cd /workspaces/sabo-pool-v12

echo -e "\n${BLUE}1. KI·ªÇM TRA JSX TAG MISMATCHES${NC}"
echo "-----------------------------------"

# Check for Button/button mismatches
echo "üî∏ Ki·ªÉm tra Button/button mismatches..."
BUTTON_ISSUES=$(find apps/ -name "*.tsx" -exec grep -l "<button.*</Button>\|<Button.*</button>" {} \; 2>/dev/null)
if [ -n "$BUTTON_ISSUES" ]; then
    echo -e "${RED}‚ùå T√¨m th·∫•y JSX tag mismatches trong:${NC}"
    echo "$BUTTON_ISSUES"
else
    echo -e "${GREEN}‚úÖ Kh√¥ng c√≥ Button/button tag mismatches${NC}"
fi

echo -e "\n${BLUE}2. KI·ªÇM TRA IMPORT PATHS${NC}"
echo "----------------------------"

# Check for incorrect import paths
echo "üî∏ Ki·ªÉm tra Typography import paths..."
WRONG_IMPORTS=$(find apps/ -name "*.tsx" -exec grep -l "@/packages/shared-ui" {} \; 2>/dev/null)
if [ -n "$WRONG_IMPORTS" ]; then
    echo -e "${RED}‚ùå T√¨m th·∫•y import paths sai trong:${NC}"
    echo "$WRONG_IMPORTS"
else
    echo -e "${GREEN}‚úÖ T·∫•t c·∫£ Typography import paths ƒë√∫ng${NC}"
fi

# Check for missing imports
echo "üî∏ Ki·ªÉm tra missing Button imports..."
MISSING_BUTTON_IMPORTS=$(find apps/ -name "*.tsx" -exec grep -L "import.*Button" {} \; | xargs grep -l "<Button\|</Button>" 2>/dev/null)
if [ -n "$MISSING_BUTTON_IMPORTS" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Files c√≥ th·ªÉ thi·∫øu Button import:${NC}"
    echo "$MISSING_BUTTON_IMPORTS"
fi

echo -e "\n${BLUE}3. KI·ªÇM TRA TYPESCRIPT ERRORS${NC}"
echo "--------------------------------"

# Check TypeScript errors in user app
echo "üî∏ Checking TypeScript errors in user app..."
cd apps/sabo-user
if npx tsc --noEmit --skipLibCheck > /tmp/user-ts-errors.log 2>&1; then
    echo -e "${GREEN}‚úÖ Kh√¥ng c√≥ TypeScript errors trong user app${NC}"
else
    echo -e "${RED}‚ùå C√≥ TypeScript errors trong user app:${NC}"
    head -20 /tmp/user-ts-errors.log
fi

cd ../../

# Check TypeScript errors in admin app  
echo "üî∏ Checking TypeScript errors in admin app..."
cd apps/sabo-admin
if npx tsc --noEmit --skipLibCheck > /tmp/admin-ts-errors.log 2>&1; then
    echo -e "${GREEN}‚úÖ Kh√¥ng c√≥ TypeScript errors trong admin app${NC}"
else
    echo -e "${RED}‚ùå C√≥ TypeScript errors trong admin app:${NC}"
    head -20 /tmp/admin-ts-errors.log
fi

cd ../../

echo -e "\n${BLUE}4. KI·ªÇM TRA PACKAGE DEPENDENCIES${NC}"
echo "-----------------------------------"

# Check if all packages are installed
echo "üî∏ Ki·ªÉm tra package dependencies..."
if [ -f "pnpm-lock.yaml" ]; then
    echo -e "${GREEN}‚úÖ pnpm-lock.yaml t·ªìn t·∫°i${NC}"
else
    echo -e "${RED}‚ùå Thi·∫øu pnpm-lock.yaml${NC}"
fi

# Check node_modules
if [ -d "node_modules" ]; then
    echo -e "${GREEN}‚úÖ node_modules ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t${NC}"
else
    echo -e "${RED}‚ùå node_modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t${NC}"
fi

echo -e "\n${BLUE}5. KI·ªÇM TRA DUPLICATE CLASS NAMES${NC}"
echo "------------------------------------"

echo "üî∏ Ki·ªÉm tra duplicate className attributes..."
DUPLICATE_CLASSES=$(find apps/ -name "*.tsx" -exec grep -n "className.*className" {} \; 2>/dev/null)
if [ -n "$DUPLICATE_CLASSES" ]; then
    echo -e "${RED}‚ùå T√¨m th·∫•y duplicate className attributes:${NC}"
    echo "$DUPLICATE_CLASSES"
else
    echo -e "${GREEN}‚úÖ Kh√¥ng c√≥ duplicate className attributes${NC}"
fi

echo -e "\n${BLUE}6. KI·ªÇM TRA UNUSED IMPORTS${NC}"
echo "-----------------------------"

echo "üî∏ Ki·ªÉm tra imports c√≥ th·ªÉ kh√¥ng s·ª≠ d·ª•ng..."
UNUSED_IMPORTS=$(find apps/ -name "*.tsx" -exec grep -l "import.*{.*}" {} \; | head -5)
if [ -n "$UNUSED_IMPORTS" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è C·∫ßn review imports trong m·ªôt s·ªë files (sample):${NC}"
    echo "$UNUSED_IMPORTS" | head -3
fi

echo -e "\n${BLUE}7. KI·ªÇM TRA SYNTAX ERRORS${NC}"
echo "----------------------------"

echo "üî∏ Ki·ªÉm tra basic syntax errors..."
SYNTAX_ERRORS=$(find apps/ -name "*.tsx" -exec node -c {} \; 2>&1 | grep -i error || echo "")
if [ -n "$SYNTAX_ERRORS" ]; then
    echo -e "${RED}‚ùå T√¨m th·∫•y syntax errors:${NC}"
    echo "$SYNTAX_ERRORS"
else
    echo -e "${GREEN}‚úÖ Kh√¥ng c√≥ basic syntax errors${NC}"
fi

echo -e "\n${BLUE}8. KI·ªÇM TRA DEVELOPMENT SERVERS${NC}"
echo "-----------------------------------"

echo "üî∏ Ki·ªÉm tra ports ƒëang s·ª≠ d·ª•ng..."
PORT_8080=$(lsof -ti:8080 || echo "")
PORT_8081=$(lsof -ti:8081 || echo "")

if [ -n "$PORT_8080" ]; then
    echo -e "${GREEN}‚úÖ User app ƒëang ch·∫°y tr√™n port 8080${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è User app kh√¥ng ch·∫°y tr√™n port 8080${NC}"
fi

if [ -n "$PORT_8081" ]; then
    echo -e "${GREEN}‚úÖ Admin app ƒëang ch·∫°y tr√™n port 8081${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Admin app kh√¥ng ch·∫°y tr√™n port 8081${NC}"
fi

echo -e "\n${BLUE}T·ªîNG K·∫æT AUDIT${NC}"
echo "==============="

# Count total issues
TOTAL_ISSUES=0

if [ -n "$BUTTON_ISSUES" ]; then
    TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
fi

if [ -n "$WRONG_IMPORTS" ]; then
    TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
fi

if [ -n "$DUPLICATE_CLASSES" ]; then
    TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
fi

if [ -n "$SYNTAX_ERRORS" ]; then
    TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
fi

if [ $TOTAL_ISSUES -eq 0 ]; then
    echo -e "${GREEN}üéâ CODEBASE S·∫†CH - Kh√¥ng c√≥ l·ªói critical n√†o ƒë∆∞·ª£c t√¨m th·∫•y!${NC}"
else
    echo -e "${RED}‚ö†Ô∏è T√¨m th·∫•y $TOTAL_ISSUES lo·∫°i l·ªói c·∫ßn ƒë∆∞·ª£c fix${NC}"
fi

echo -e "\n${BLUE}KHUY·∫æN NGH·ªä TI·∫æP THEO:${NC}"
echo "- Ch·∫°y user app development server: pnpm run dev:user"  
echo "- Ch·∫°y admin app development server: pnpm run dev:admin"
echo "- Ki·ªÉm tra browser console ƒë·ªÉ t√¨m runtime errors"
echo "- Review v√† test c√°c t√≠nh nƒÉng ch√≠nh"
