const { createClient } = require('@supabase/supabase-js');
require('dotenv/config');

const supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_SERVICE_ROLE_KEY);

console.log('üéØ TEST SPA HISTORY IMPROVEMENTS');
console.log('===============================');

async function testSpaHistoryImprovements() {
  try {
    // Get a user with transactions
    const { data: transactions, error } = await supabase
      .from('spa_transactions')
      .select('*')
      .not('reference_id', 'is', null)
      .limit(5);
      
    if (error) throw error;
    
    console.log('üìä BEFORE vs AFTER Comparison:');
    console.log('==============================');
    
    for (const tx of transactions) {
      console.log(`\nüîÑ Transaction ${tx.id.substring(0, 8)}...`);
      console.log(`üìã BEFORE (Old): "${tx.description || 'Kh√°c'}"`);
      
      // Simulate the new logic
      let enhancedDescription = tx.description;
      let enhancedSubtitle = 'Giao d·ªãch SPA';
      
      if (tx.source_type === 'milestone_reward' && tx.reference_id) {
        const { data: milestone } = await supabase
          .from('milestones')
          .select('name, description, category')
          .eq('id', tx.reference_id)
          .single();
          
        if (milestone) {
          enhancedDescription = milestone.name;
          enhancedSubtitle = `${milestone.category || 'Milestone'} ‚Ä¢ ${milestone.description}`;
        }
      }
      
      if (tx.source_type === 'rank_verification' && tx.reference_id) {
        const { data: rankRequest } = await supabase
          .from('rank_requests')
          .select('requested_rank, status')
          .eq('id', tx.reference_id)
          .single();
          
        if (rankRequest) {
          enhancedDescription = `X√°c th·ª±c h·∫°ng ${rankRequest.requested_rank}`;
          enhancedSubtitle = `H·∫°ng ƒë∆∞·ª£c x√°c th·ª±c ‚Ä¢ ${rankRequest.status}`;
        }
      }
      
      console.log(`‚ú® AFTER (New): "${enhancedDescription}"`);
      console.log(`üìù Subtitle: "${enhancedSubtitle}"`);
      console.log(`üí∞ Amount: +${tx.amount} SPA`);
    }
    
    console.log('\nüéâ IMPROVEMENTS SUMMARY:');
    console.log('========================');
    console.log('‚úÖ Thay th·∫ø "Kh√°c" b·∫±ng t√™n milestone c·ª• th·ªÉ');
    console.log('‚úÖ Hi·ªÉn th·ªã category v√† description c·ªßa milestone');
    console.log('‚úÖ Th√™m th√¥ng tin x√°c th·ª±c h·∫°ng chi ti·∫øt');
    console.log('‚úÖ C·∫£i thi·ªán UX v·ªõi th√¥ng tin r√µ r√†ng h∆°n');
    console.log('‚úÖ Gi·ªØ nguy√™n reference_id ƒë·ªÉ debug');
    
    console.log('\nüì± MOBILE UI IMPACT:');
    console.log('====================');
    console.log('- Title: T√™n milestone thay v√¨ "Milestone"');
    console.log('- Subtitle: Category v√† description thay v√¨ generic text');  
    console.log('- Icon: Ph√π h·ª£p v·ªõi lo·∫°i ho·∫°t ƒë·ªông');
    console.log('- Color: Ph√¢n bi·ªát r√µ r√†ng c√°c lo·∫°i giao d·ªãch');

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  }
}

testSpaHistoryImprovements();
